---
title: "Defensive Programming"
description: "Say hello to your new friend: tryCatch()"
author: "Kennedy Mwavu"
date: "2023-02-26"
categories: [R, Shiny, UI/UX]
image: "tc.png"
draft: false
---

## Introduction

Your app should never have to fail, crash or display arcane red lines 
of errors on the UI. 

If it has to fail, it should do so gracefully and with dignity.
You can then convince the client that it's not a bug,
it's a feature.

Meme?

## When do errors arise?

Most, if not all, errors occur when you're trying to perform a 
calculation or an operation on data. This can be during app startup or 
in response to user action.

Common cases are:

- Mathematical calculations eg. `+`, `-`, `*`, `/`
- Data manipulations eg. subsetting (`iris[, "Sepal.Length"]`)

## Defensive programming

Defensive programming is an approach to software development that 
focuses on anticipating and preventing potential errors, bugs, and 
vulnerabilities in the code.

The fundamental concept of this approach is to develop a program that can function correctly even in the presence of unforeseen circumstances or when users enter unexpected inputs.

We'll focus on 2 key principles of defensive programming, both at the same time:

1. Validating inputs: Checking that all input values are within 
expected ranges or formats, and handling unexpected input values 
appropriately.

2. Handling errors: Catching and handling errors/exceptions in a way
that allows the program to recover gracefully, without crashing or 
losing data

That's where `tryCatch` comes in!

## tryCatch()

The basic syntax of `tryCatch()` is:

```r
result <- tryCatch(
  expr = {
    # Code block to be executed
  },
  error = function(e) {
    # Error handling code
  },
  warning = function(w) {
    # Warning handling code
  },
  finally = {
    # Do this, regardless of success or failure of 'expr' block
  }
)
```

Mental model: Hey R, I have this block of code.I'm not sure if it's
flawless, but I need you to try and run it. If you encounter issues,
then here's how you should proceed depending on the reason it didn't
work:

- Did it throw an error? Then do &lt;error handling&gt;
- Did it give a warning? Then do &lt;warning handling code&gt;
- Finally, regardless of whether it ran successfully or failed, please
do &lt;finally block&gt;

## Hands-On
