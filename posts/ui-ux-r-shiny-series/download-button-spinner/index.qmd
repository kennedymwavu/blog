---
title: "Adding a Spinner to Download Buttons in R Shiny"
description: "Inform users that the download is in progress"
author: "Kennedy Mwavu"
date: "2023-02-21"
categories: [R, Shiny, UI/UX, Bootstrap]
image: "loader.webp"
draft: false
---

## Demo

Here is a demo of what we will build today:

![](dnld-spinner.gif){alt="A gif showing what we will build today"}

## Introduction

<blockquote class="blockquote text-right text-black">
<p class="mb-4">I hope nobody is reading. But if you are, then keep this to yourself.</p>
<footer class="blockquote-footer">Mwavu</footer>
</blockquote>

Oftentimes you have a large dataset that takes a while to download. The spinner will give your users a visual cue that the download is in progress.

I'll show you how to add a spinner to a download button in Shiny using a module. 

Why a module? Because it's a great way to encapsulate the logic of the spinner and make it reusable. You can use the same module in multiple Shiny apps.

<div class="d-flex justify-content-center">
  <img src="it-is-modules.png" alt="A meme: I don't always talk about R Shiny 
But when I do, it's usually about modules">
</div>

## Creating the download button module

Let's first create a basic download button module that we can build upon. 

Starting with the UI piece, we'll create a button that will trigger the download.
We'll also create the real download button but it will be hidden.

```r
#' Download button module UI
#' @param id Module ID
#' @return [shiny::tagList()]
mod_dnld_ui <- function(id) {
  ns <- shiny::NS(id)

  shiny::tagList(
    # Trigger button:
    shiny::actionButton(
      inputId = ns("actbtn"),
      label = htmltools::doRenderTags(
        shiny::tags$span(
          shiny::icon("download"),
          "Download"
        )
      )
    ),

    # Real download button:
    shiny::downloadButton(
      outputId = ns("dnld"),
      label = NULL,
      style = "visibility: hidden;"
    )
  )
}
```

The basic server piece is also as simple:
  
```r
#' Download button module server
#' @param id Module ID
#' @param given_data Data to download, as a reactive.
#' @param filename Filename to use for download.
#' @return NULL
mod_dnld_server <- function(
  id,
  given_data = reactive({iris}),
  filename = "iris.csv"
) {
  stopifnot(
    "`given_data` must be a reactive" = is.reactive(given_data)
  )

  shiny::moduleServer(
    id = id,
    module = function(input, output, session) {
      output$dnld <- downloadHandler(
        filename = filename,
        content = function(file) {
          write.csv(given_data(), file)
        }
      )
    }
  )
}
```

It takes in a reactive data object (`given_data`) and a `filename` for the download. We use the downloadHandler function to handle the file download. When the download button is clicked, the write.csv function is used to write the data to a CSV file with the given filename.

Now that we have a basic download button module, we can move on to adding a spinner to the download button to improve the user experience.

## Adding a spinner to the download button

Spoiler alert: the `mod_dnld_ui` function is done. We'll work on the `mod_dnld_server` function from now on.

In the server module, we'll use `shiny::observeEvent` to listen for clicks on the action button. 

When the button is clicked, we update its label to show a spinner and a message indicating that the download is in progress. 

We then trigger a click on the real download button using `shinyjs::click`:

```r
shiny::observeEvent(input$actbtn, {
  # update label of 'actbtn':
  shiny::updateActionButton(
    session = session,
    inputId = "actbtn",
    label = htmltools::doRenderTags(
      shiny::tags$span(
        class = "d-flex align-items-center",
        shiny::tags$span(
          class = "spinner-border spinner-border-sm",
          role = "status",
          `aria-hidden` = "true"
        ),
        shiny::tags$span(
          class = "mx-1",
          "Downloading..."
        )
      )
    )
  )

  # simulate click on 'dnld' btn:
  shinyjs::delay(
    ms = 2 * 1e3,
    expr = shinyjs::click(id = "dnld")
  )
})

```

We used `shinyjs::delay ` to, well, delay the click for 2 seconds. Wanna know why?

<div class="d-flex justify-content-center">
  <img src="purpose-of-delay.png" alt="The whisper and goosebumps meme: The delay makes the overall UX better">
</div>

Next, we need to update the label of the action button back to its original state when the download is complete.

`on.exit` comes in handy here. 

From the documentation:

> `on.exit` records the expression given as its argument as needing to be executed when the current function exits (either naturally or as the result of an error). This is useful for resetting graphical parameters or performing other cleanup actions.

In our case, we're performing a cleanup action: updating the label of the action button back to its original state.

```r
output$dnld <- downloadHandler(
  filename = filename,
  content = function(file) {
    # on exit, update 'actbtn' label:
    on.exit({
      shiny::updateActionButton(
        session = session,
        inputId = "actbtn",
        label = htmltools::doRenderTags(
          shiny::tags$span(
            shiny::icon("download"),
            "Download"
          )
        )
      )
    })

    # write data to file:
    write.csv(given_data(), file)
  }
)
```

The complete server module is as follows:

```r
#' Download button module server
#' @param id Module id
#' @param given_data Data to download, as a reactive.
#' @param filename Filename to use for download.
#' @return NULL
mod_dnld_server <- function(
    id,
    given_data = reactive({
      iris
    }),
    filename = "iris.csv") {
  stopifnot(
    "`given_data` must be a reactive" = is.reactive(given_data)
  )

  shiny::moduleServer(
    id = id,
    module = function(input, output, session) {
      shiny::observeEvent(input$actbtn, {
        # update label of 'actbtn':
        shiny::updateActionButton(
          session = session,
          inputId = "actbtn",
          label = htmltools::doRenderTags(
            shiny::tags$span(
              class = "d-flex align-items-center",
              shiny::tags$span(
                class = "spinner-border spinner-border-sm",
                role = "status",
                `aria-hidden` = "true"
              ),
              shiny::tags$span(
                class = "mx-1",
                "Downloading..."
              )
            )
          )
        )

        # simulate click on 'dnld' btn:
        shinyjs::delay(
          ms = 2 * 1e3,
          expr = shinyjs::click(id = "dnld")
        )
      })

      output$dnld <- downloadHandler(
        filename = filename,
        content = function(file) {
          # on exit, update 'actbtn' label:
          on.exit({
            shiny::updateActionButton(
              session = session,
              inputId = "actbtn",
              label = htmltools::doRenderTags(
                shiny::tags$span(
                  shiny::icon("download"),
                  "Download"
                )
              )
            )
          })

          # write data to file:
          write.csv(given_data(), file)
        }
      )
    }
  )
}
```

## Putting it all together

Now that we have the UI and server modules, we can put them together in a Shiny app.

The app is as simple as it can get:

```r
ui <- bslib::page(
  theme = bslib::bs_theme(version = 5),
  shinyjs::useShinyjs(),

  shiny::tags$div(
    class = "bg-light",

    shiny::tags$div(
    class = paste(
      "container min-vh-100",
      "d-flex justify-content-center align-items-center bg-white"
    ),

    # module UI:
    shiny::tags$div(
      mod_dnld_ui("this")
    )
  )
  )
)

server <- function(input, output, session) {
  # module server:
  mod_dnld_server("this")
}

shiny::shinyApp(ui, server)
```

The full code is available on [this GitHub Gist](https://gist.github.com/kennedymwavu/bbcbe3a2373f103c98f52a9d8d79dabc).

