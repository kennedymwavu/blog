---
title: "The power of .names in dplyr::across()"
author: "Kennedy Mwavu"
date: "2022-12-14"
categories: [rlang, dplyr]
image: "across.jpg"
---

![](across.jpg)

### Introduction

My project manager is a die-hard fan of the tidyverse. I go to the office once a week, and last Friday was one of those days.

He comes up to me and says:

"Good afternoon Mwavu, you know how much I'm into the tidyverse and piping. But today, it seems, I have to break my pipeline. Come have a look."

![](broken-pipe.webp)

### Problem statement

"Say I have this tibble:

```{r}
prem_sum <- tibble::tibble(
  id = head(letters), 
  prem_a = seq_along(id), 
  sum_a = seq_along(id) * 2, 
  prem_b = prem_a, 
  sum_b = sum_a, 
  prem_c = prem_a, 
  sum_c = sum_a
)

print(prem_sum)
```

I want to divide the corresponding 'prem' and 'sum' columns, ie. `prem_a / sum_a`, `prem_b / sum_b`, `prem_c / sum_c` etc.

From that, new columns should be created with the name format of `prem_sum_a`, `prem_sum_b`, `prem_sum_c` etc.

How do I do that without having to create an intermediate object to hold the result of the calculations and then having to patch it back to the original tibble?

In other words, how do I not break my pipeline? Also, I have around 20 such columns."

### Have you tried across()?

"Yes I have but it overwrites my previous columns. Look at this:

```{r}
prem_sum |> 
  dplyr::mutate(
    dplyr::across(
      .cols = dplyr::starts_with('prem_')
    ) / 
      dplyr::across(
        .cols = dplyr::starts_with('sum_')
      )
  )
```

All `prem_*` columns are overwritten, and I don't want that to happen."

### What about the .names argument to across()?

"No, not yet."

Okay, let's give it a shot:

```{r}
prem_sum |> 
  dplyr::mutate(
    dplyr::across(
      .cols = dplyr::starts_with('prem_'), 
      .names = 'PREMSUM_{.col}'
    ) / 
      dplyr::across(
        .cols = dplyr::starts_with('sum_')
      )
  )
```

"Ahaa, that's nice! I can now rename the columns starting with `PREMSUM` to whatever I need. I was kinda hoping for something better and straightforward though."

That's the best I can think of now.

### Really?!

A week down the line and today I found myself messing around with `across()`. I remembered my PM's question and his words "... I was kinda hoping for something better and straightforward though."

Does he have to `dplyr::rename()`?

First, let's have a look at the documentation of `.names` arg in `across()`:

> A glue specification that describes how to name the output columns. This can use {.col} to stand for the selected column name, and {.fn} to stand for the name of the function being applied. The default (NULL) is equivalent to "{.col}" for the single function case and "{.col}_{.fn}" for the case where a list is used for .fns.

You mean `{.col}` can only be used for the current column which is being computed on? Then there surely isn't a better way.

Wait... Do me a favor and print out `{.col}`, just curious.

```{r}
prem_sum |> 
  dplyr::mutate(
    dplyr::across(
      .cols = dplyr::starts_with('prem_'), 
      .names = 'PREMSUM_{print(.col)}'
    ) / 
      dplyr::across(
        .cols = dplyr::starts_with('sum_')
      )
  )
```

Whoa!

`{.col}` is a vector of all the selected column names, not just the current one.

That means I can manipulate the .names arg even further.

It can get easier.

### Better, huh?

Let's start small. Say I have this vector:

```{r}
x <- paste0('prem_', letters[1:3])
print(x)
```

All I need is to add 'sum' between 'prem' and the suffixes, separated by an underscore. I can use `substr()` for that:

```{r}
paste0(
  'prem_sum', 
  substr(x = x, start = nchar('prem_'), stop = nchar(x))
)
```

Circling back, replace `x` with `.col` in `substr()`:

```{r}
prem_sum |> 
  dplyr::mutate(
    dplyr::across(
      .cols = dplyr::starts_with('prem_'), 
      .names = "{paste0(
        'prem_sum', 
        substr(x = .col, start = nchar('prem_'), stop = nchar(.col))
      )}"
    ) / 
      dplyr::across(
        .cols = dplyr::starts_with('sum_')
      )
  )
```

And voila!

No need to break the pipeline.

If you're confused about what just happened, have a look at `?glue::glue`.
