[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Hobbit's Tale",
    "section": "",
    "text": "Series\n\nUI/UX in R Shiny\n\n\n\nAll Posts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefensive Programming\n\n\n\nR\n\n\nShiny\n\n\nUI/UX\n\n\n\nSay hello to your new friend: tryCatch()\n\n\n\nKennedy Mwavu\n\n\nFeb 26, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a spinner to your download buttons!\n\n\n\nR\n\n\nShiny\n\n\nUI/UX\n\n\nBootstrap\n\n\n\nInform users that the download is in progress\n\n\n\nKennedy Mwavu\n\n\nFeb 21, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Mwavu",
    "section": "",
    "text": "“There and Back Again: A Hobbits Tale by Bilbo Baggins.”"
  },
  {
    "objectID": "ui-ux-r-shiny-series.html",
    "href": "ui-ux-r-shiny-series.html",
    "title": "Series: UI/UX in R Shiny",
    "section": "",
    "text": "“ If people [users] cannot understand how to use your application, or if your application front-end does not work at all, your application is not successful no matter how innovative and incredible the computation algorithms in the back-end are. ” — Engineering Production-Grade Shiny Apps"
  },
  {
    "objectID": "ui-ux-r-shiny-series.html#posts-in-this-series",
    "href": "ui-ux-r-shiny-series.html#posts-in-this-series",
    "title": "Series: UI/UX in R Shiny",
    "section": "Posts in this series",
    "text": "Posts in this series"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html",
    "title": "Add a spinner to your download buttons!",
    "section": "",
    "text": "Here is a demo of what we will build today:"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#introduction",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#introduction",
    "title": "Add a spinner to your download buttons!",
    "section": "Introduction",
    "text": "Introduction\n\n\nI hope nobody is reading. But if you are, then keep this to yourself.\n\n\nMwavu\n\n\nOftentimes you have a large dataset that takes a while to download. To give your users a visual cue that the download is in progress, you can (and should) add spinners to your download buttons."
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#the-module",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#the-module",
    "title": "Add a spinner to your download buttons!",
    "section": "The module",
    "text": "The module\nLet’s first create a basic download button module that we can build upon.\n\nUI\nWe’ll create an action button that will trigger the download (Yes, you read that right, an action button).\nWe’ll then add the real download button but it will be hidden.\n#' Download button module UI\n#' @param id Module ID\n#' @return [shiny::tagList()]\nmod_dnld_ui <- function(id) {\n  ns <- shiny::NS(id)\n\n  shiny::tagList(\n    # Trigger button:\n    shiny::actionButton(\n      inputId = ns(\"actbtn\"),\n      label = htmltools::doRenderTags(\n        shiny::tags$span(\n          shiny::icon(\"download\"),\n          \"Download\"\n        )\n      )\n    ),\n\n    # Real download button:\n    shiny::downloadButton(\n      outputId = ns(\"dnld\"),\n      label = NULL,\n      style = \"visibility: hidden;\"\n    )\n  )\n}\n\n\nServer\nThe basic server piece is also as simple:\n#' Download button module server\n#' @param id Module ID\n#' @param given_data Data to download, as a reactive.\n#' @param filename Filename to use for download.\n#' @return NULL\nmod_dnld_server <- function(\n  id,\n  given_data = reactive({iris}),\n  filename = \"iris.csv\"\n) {\n  stopifnot(\n    \"`given_data` must be a reactive\" = is.reactive(given_data)\n  )\n\n  shiny::moduleServer(\n    id = id,\n    module = function(input, output, session) {\n      output$dnld <- downloadHandler(\n        filename = filename,\n        content = function(file) {\n          write.csv(given_data(), file)\n        }\n      )\n    }\n  )\n}\nIt takes in a reactive data object (given_data) and a filename. The rest is normal stuff.\nWe can now move on to adding the download button spinner."
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#adding-a-spinner-to-the-download-button",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#adding-a-spinner-to-the-download-button",
    "title": "Add a spinner to your download buttons!",
    "section": "Adding a spinner to the download button",
    "text": "Adding a spinner to the download button\nSpoiler alert: mod_dnld_ui is done. We’ll work on mod_dnld_server from now on.\nIn the server module, we’ll use shiny::observeEvent to listen for clicks on the action button.\nWhen the button is clicked, we update its label to show a spinner and a message indicating that the download is in progress.\nWe then trigger a click on the real download button using shinyjs::click:\nshiny::observeEvent(input$actbtn, {\n  # update label of 'actbtn':\n  shiny::updateActionButton(\n    session = session,\n    inputId = \"actbtn\",\n    label = htmltools::doRenderTags(\n      shiny::tags$span(\n        class = \"d-flex align-items-center\",\n        shiny::tags$span(\n          class = \"spinner-border spinner-border-sm\",\n          role = \"status\",\n          `aria-hidden` = \"true\"\n        ),\n        shiny::tags$span(\n          class = \"mx-1\",\n          \"Downloading...\"\n        )\n      )\n    )\n  )\n\n  # simulate click on 'dnld' btn:\n  shinyjs::delay(\n    ms = 2 * 1e3,\n    expr = shinyjs::click(id = \"dnld\")\n  )\n})\nTwo things to note here:\n\nI use Bootstrap 5 classes.\nI use shinyjs::delay to, well, delay the click for 2 seconds. Wanna know why?\n\n\n\n\nNext, after the download is complete, we need to update the label of the action button back to its original value.\noutput$dnld <- downloadHandler(\n  filename = filename,\n  content = function(file) {\n    # on exit, update 'actbtn' label:\n    on.exit({\n      shiny::updateActionButton(\n        session = session,\n        inputId = \"actbtn\",\n        label = htmltools::doRenderTags(\n          shiny::tags$span(\n            shiny::icon(\"download\"),\n            \"Download\"\n          )\n        )\n      )\n    })\n\n    # write data to file:\n    write.csv(given_data(), file)\n  }\n)\n?on.exit:\n\non.exit records the expression given as its argument as needing to be executed when the current function exits (either naturally or as the result of an error). This is useful for resetting graphical parameters or performing other cleanup actions.\n\nIn our case, we’re performing a cleanup action: updating the label of the action button back to its original state.\nThe complete module server function is as follows:\n#' Download button module server\n#' @param id Module id\n#' @param given_data Data to download, as a reactive.\n#' @param filename Filename to use for download.\n#' @return NULL\nmod_dnld_server <- function(\n    id,\n    given_data = reactive({\n      iris\n    }),\n    filename = \"iris.csv\") {\n  stopifnot(\n    \"`given_data` must be a reactive\" = is.reactive(given_data)\n  )\n\n  shiny::moduleServer(\n    id = id,\n    module = function(input, output, session) {\n      shiny::observeEvent(input$actbtn, {\n        # update label of 'actbtn':\n        shiny::updateActionButton(\n          session = session,\n          inputId = \"actbtn\",\n          label = htmltools::doRenderTags(\n            shiny::tags$span(\n              class = \"d-flex align-items-center\",\n              shiny::tags$span(\n                class = \"spinner-border spinner-border-sm\",\n                role = \"status\",\n                `aria-hidden` = \"true\"\n              ),\n              shiny::tags$span(\n                class = \"mx-1\",\n                \"Downloading...\"\n              )\n            )\n          )\n        )\n\n        # simulate click on 'dnld' btn:\n        shinyjs::delay(\n          ms = 2 * 1e3,\n          expr = shinyjs::click(id = \"dnld\")\n        )\n      })\n\n      output$dnld <- downloadHandler(\n        filename = filename,\n        content = function(file) {\n          # on exit, update 'actbtn' label:\n          on.exit({\n            shiny::updateActionButton(\n              session = session,\n              inputId = \"actbtn\",\n              label = htmltools::doRenderTags(\n                shiny::tags$span(\n                  shiny::icon(\"download\"),\n                  \"Download\"\n                )\n              )\n            )\n          })\n\n          # write data to file:\n          write.csv(given_data(), file)\n        }\n      )\n    }\n  )\n}"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#putting-it-all-together",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#putting-it-all-together",
    "title": "Add a spinner to your download buttons!",
    "section": "Putting it all together",
    "text": "Putting it all together\nNow that we have the module UI and server parts, we can put them together in a shiny app.\nThe app is as simple as it can get:\nui <- bslib::page(\n  theme = bslib::bs_theme(version = 5),\n  shinyjs::useShinyjs(),\n\n  shiny::tags$div(\n    class = \"bg-light\",\n\n    shiny::tags$div(\n    class = paste(\n      \"container min-vh-100\",\n      \"d-flex justify-content-center align-items-center bg-white\"\n    ),\n\n    # module UI:\n    shiny::tags$div(\n      mod_dnld_ui(\"this\")\n    )\n  )\n  )\n)\n\nserver <- function(input, output, session) {\n  # module server:\n  mod_dnld_server(\"this\")\n}\n\nshiny::shinyApp(ui, server)\nThe full code is available on this GitHub Gist."
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/defensive-programming/index.html",
    "href": "posts/ui-ux-r-shiny-series/defensive-programming/index.html",
    "title": "Defensive Programming",
    "section": "",
    "text": "I hope nobody is reading. But if you are, then keep this to yourself.\n\n\nMwavu\n\n\nYour prod app should never have to fail, crash or display arcane red lines of errors on the UI.\nIf it has to, it should do so gracefully and with dignity. Only then will you have an easy time convincing the client that it’s a six-legged feature, not a bug."
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#when-do-errors-arise",
    "href": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#when-do-errors-arise",
    "title": "Defensive Programming",
    "section": "When do errors arise?",
    "text": "When do errors arise?\nMost, if not all, application errors occur when you’re trying to perform an operation on data. This can be during app startup or in response to user action.\nCommon cases are:\n\nMathematical calculations eg. +, -, *, /\nData manipulations eg. subsetting (iris[, \"Sepal.Length\"])"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#defensive-programming",
    "href": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#defensive-programming",
    "title": "Defensive Programming",
    "section": "Defensive programming",
    "text": "Defensive programming\nDefensive programming is an approach to software development that focuses on anticipating and preventing potential errors, bugs, and vulnerabilities in the code.\nThe fundamental concept of this approach is to develop a program that can function correctly even in the presence of unforeseen circumstances or when users enter unexpected inputs.\nWe’ll focus on 2 key principles of defensive programming, both at the same time:\n\nValidating inputs: Checking that all input values are within expected ranges or formats, and handling unexpected input values appropriately.\nHandling errors: Catching and handling errors/exceptions in a way that allows the program to recover gracefully, without crashing or losing data\n\nThat’s where tryCatch comes in!"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#trycatch",
    "href": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#trycatch",
    "title": "Defensive Programming",
    "section": "tryCatch()",
    "text": "tryCatch()\nThe basic syntax of tryCatch() is this:\n\n\n\n\n\n\n\nMental model:\n\n\n\n\n\nHey R, I have this block of code. I’m not sure if it’s flawless, but I need you to try and run it.  In case you encounter issues, here’s how you should proceed depending on the scenario:\n\nDid it throw an error? Then do <error handling>\nDid it give a warning? Then run this <warning handling chunk>\nFinally, regardless of whether it ran successfully or failed, please do <finally block>"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#hands-on",
    "href": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#hands-on",
    "title": "Defensive Programming",
    "section": "Hands-On",
    "text": "Hands-On\nPractical examples have been a great way for me to learn new concepts.\nBe sure to go through the examples thoroughly and see if you can remake similar ones of your own.\n\nExample 1: Generic errors & warnings\nIn case of an error or a warning during an operation, inform the user that something unexpected happened and show a glimpse of what might have went wrong.\nlibrary(shiny)\n\nui <- fluidPage(\n  shinytoastr::useToastr(),\n  \n  tags$div(\n    class = \"container\",\n    align = \"center\",\n    \n    selectInput(\n      inputId = \"cols\",\n      label = \"Choose one or more columns\",\n      choices = c(names(iris), \"Unknown Column\"),\n      multiple = TRUE\n    ),\n    \n    DT::DTOutput(outputId = \"table\")\n  )\n)\n\nserver <- function(input, output, session) {\n  output$table <- DT::renderDT({\n    tryCatch(\n      expr = {\n        { iris |> dplyr::select(dplyr::all_of(input$cols)) } * 100\n      },\n      error = \\(e) {\n        shinytoastr::toastr_error(\n          title = \"Error in calculation\",\n          message = conditionMessage(e)\n        )\n      },\n      warning = \\(w) {\n        shinytoastr::toastr_warning(\n          title = \"Warning!\",\n          message = conditionMessage(w)\n        )\n      }\n    )\n  })\n}\n\nshinyApp(ui, server)\n\n\nExample 2: Custom errors & warnings\nSometimes you can choose to be more informative and specific. In this example, we tell the user what exactly went wrong.\nOn top of that, we leave room for unforeseen causes of errors & warnings.\nlibrary(shiny)\n\nui <- fluidPage(\n  shinytoastr::useToastr(),\n  \n  tags$div(\n    class = \"container\",\n    align = \"center\",\n    \n    selectInput(\n      inputId = \"cols\",\n      label = \"Choose one or more columns\",\n      choices = c(names(iris), \"Unknown Column\"),\n      multiple = TRUE\n    ),\n    \n    DT::DTOutput(outputId = \"table\")\n  )\n)\n\nserver <- function(input, output, session) {\n  output$table <- DT::renderDT({\n    cols <- input$cols\n    req(cols)\n    \n    tryCatch(\n      expr = {\n        if (\"Species\" %in% cols) {\n          shinytoastr::toastr_warning(\n            title = \"Omitting column 'Species'\",\n            message = \"Cannot perform multiplication on a factor\"\n          )\n          \n          cols <- setdiff(cols, \"Species\")\n        }\n        \n        if (\"Unknown Column\" %in% cols) {\n          shinytoastr::toastr_error(\n            title = \"Omitting 'Uknown Column'\",\n            message = \"Cannot subset columns which don't exist\"\n          )\n          \n          cols <- setdiff(cols, \"Unknown Column\")\n        }\n        \n        { iris |> dplyr::select(dplyr::all_of(cols)) } * 100\n      },\n      \n      # in case of other unforeseen errors & warnings:\n      error = \\(e) {\n        shinytoastr::toastr_error(\n          title = \"Error in calculation\",\n          message = conditionMessage(e)\n        )\n      },\n      warning = \\(w) {\n        shinytoastr::toastr_warning(\n          title = \"Warning!\",\n          message = conditionMessage(w)\n        )\n      }\n    )\n  })\n}\n\nshinyApp(ui, server)"
  }
]