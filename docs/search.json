[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Hobbit's Tale",
    "section": "",
    "text": "Series\n\nUI/UX in R Shiny\nAuthentication in R Shiny\n\n\n\nAll Posts\n\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nCategories\n\n\n\n\n\n\nMay 28, 2023\n\n\nAdd downLoading spinners… using JS\n\n\nR,Shiny,UI/UX,Bootstrap\n\n\n\n\nApr 16, 2023\n\n\nSubset every nth element from a vector\n\n\nR\n\n\n\n\nFeb 26, 2023\n\n\nDefensive Programming\n\n\nR,Shiny,UI/UX\n\n\n\n\nFeb 21, 2023\n\n\nAdd downLoading spinners\n\n\nR,Shiny,UI/UX,Bootstrap\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "“There and Back Again: A Hobbits Tale by Bilbo Baggins.”"
  },
  {
    "objectID": "authentication-in-r-shiny.html",
    "href": "authentication-in-r-shiny.html",
    "title": "Series: Authentication in R Shiny",
    "section": "",
    "text": "Many are the times you develop an in-house app for your organization. Two conditions must be met:\n\nA user can only access the app if and only if they are part of your organization ie. using the company email\nOnly certain users can access some parts of the app eg. the admin section\n\nAll I ever wanted was to build an app that felt intuitive:\n\na landing page,\na sign-in/up section, and\nthe app itself\n\nFor a long time I could not figure out how to build the sign-in/up section. The options I found online didn’t suit my needs either.\nWhich brings us to the topic of this series…\nShiny doesn’t have in-built features for user authentication or authorization.\nI found 2 remarkable packages which solve that problem:\n\npolished\nfirebase\n\nThey are easy enough to get started with, but not a walk in the park if you want the good stuff. By “good stuff” I mean detailed customization.\nI’m not here to show you the easy part, I’m here for the hard part."
  },
  {
    "objectID": "authentication-in-r-shiny.html#posts-in-this-series",
    "href": "authentication-in-r-shiny.html#posts-in-this-series",
    "title": "Series: Authentication in R Shiny",
    "section": "Posts in this series",
    "text": "Posts in this series"
  },
  {
    "objectID": "ui-ux-r-shiny-series.html",
    "href": "ui-ux-r-shiny-series.html",
    "title": "Series: UI/UX in R Shiny",
    "section": "",
    "text": "“ If people [users] cannot understand how to use your application, or if your application front-end does not work at all, your application is not successful no matter how innovative and incredible the computation algorithms in the back-end are. ” — Engineering Production-Grade Shiny Apps"
  },
  {
    "objectID": "ui-ux-r-shiny-series.html#posts-in-this-series",
    "href": "ui-ux-r-shiny-series.html#posts-in-this-series",
    "title": "Series: UI/UX in R Shiny",
    "section": "Posts in this series",
    "text": "Posts in this series"
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html",
    "title": "Subset every nth element from a vector",
    "section": "",
    "text": "I’ve been using R on a daily basis (literally) precisely for 3 years 3 months 2 weeks 2 days now.\nIf I were to say anything about the language, it’d be what Gandalf said about Hobbits:\n\n\n\n\n\n\n\nHobbits are amazing creatures. You can learn all there is to know about their ways in a month, and yet after a hundred years, they can still surprise you.\n— Gandalf, LOTR"
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html#problem-statement",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html#problem-statement",
    "title": "Subset every nth element from a vector",
    "section": "Problem Statement",
    "text": "Problem Statement\nAbout a week ago I needed to subset every second element of a vector. Let me explain.\nTake a look at letters:\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\nHow do you get the elements “b”, “d”, “f”, “h”, “j”, … ie. values at the indices 2, 4, 6, 8, ...?\nSimple enough, right? Right.\nWhat amazed me wasn’t the simplicity of the question at hand, it was how even as a prolific user of R, the building blocks of the language sometimes slip past me so easily."
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html#what-i-did",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html#what-i-did",
    "title": "Subset every nth element from a vector",
    "section": "What I did",
    "text": "What I did\nLet’s go through my thought process.\n\nseq()\nThis was definitely the first option that came to mind:\n\nindices <- seq(from = 2, to = length(letters), by = 2)\nletters[indices]\n\n [1] \"b\" \"d\" \"f\" \"h\" \"j\" \"l\" \"n\" \"p\" \"r\" \"t\" \"v\" \"x\" \"z\"\n\n\nPretty good, but…\nThere must be a better solution.\n\n\nModulo Operator %%\nThe modulo operator %% returns the remainder of the division of one number by another.\nFor example, 4 %% 2 would return 0 since: \\[\n\\frac{4}{2} = 2\\;remainder\\;0\n\\] and 9 %% 7 would return 2 since: \\[\n\\frac{9}{7} = 1\\;remainder\\;2\n\\]\nBack to our problem: I basically want all indices which are divisible by \\(2\\) ie. Leave a remainder of zero.\n\nindices <- !seq_along(letters) %% 2\nletters[indices]\n\n [1] \"b\" \"d\" \"f\" \"h\" \"j\" \"l\" \"n\" \"p\" \"r\" \"t\" \"v\" \"x\" \"z\"\n\n\nThat works but… It’s quite obfuscated for such a simple problem.\n\nThere’s only one way to know if there’s an easier solution: Google."
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html#vector-recycling",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html#vector-recycling",
    "title": "Subset every nth element from a vector",
    "section": "Vector recycling",
    "text": "Vector recycling\nIf logical vectors are used for indexing in R, their values are recycled if the index vector is shorter than the vector containing the values.\nIt is one of my all time favorite features about R. The first time I learnt the concept, it was mind-blowing.\nThis time round, it swept me off my feet completely.\nThe solution was as simple as this:\n\nletters[c(FALSE, TRUE)]\n\n [1] \"b\" \"d\" \"f\" \"h\" \"j\" \"l\" \"n\" \"p\" \"r\" \"t\" \"v\" \"x\" \"z\"\n\n\nTell me that isn’t elegant!\nThat’s one of the best answers on StackOverflow as far as I’m concerned.\n\nShort. In most cases short never equals good performance but this is one of the few cases where what’s advertised is what’s delivered.\nSimple. It’s very easy to understand. Straightforward.\nClean. It’s not obfuscated.\n\nIt’s better in every way compared to my initial trials. It was posted by the user Sven Hohenstein. Link to the answer."
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html#generalization",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html#generalization",
    "title": "Subset every nth element from a vector",
    "section": "Generalization",
    "text": "Generalization\nNow that we have the best solution (as far as we know), let’s generalize it.\n\n\\(i^{th}\\) element\nWhat if you wanted to subset every 9th element? Repeat TRUE & FALSE the required number of times:\n\n# Subset every 9th element:\nletters[c(rep(FALSE, times = 8), TRUE)]\n\n[1] \"i\" \"r\"\n\n\nWe repeat FALSE \\(8\\) times because we want every \\(9\\)th index to be retrieved.\nTaking \\(9\\) as our i:\n\ni <- 9\nletters[c(rep(FALSE, times = i - 1), TRUE)]\n\n[1] \"i\" \"r\"\n\n\n\n\n\\((i + n)^{th}\\) element\nExtending the above logic, let’s assume i is \\(9\\) and n is \\(10\\). So it’s like saying we want to subset every \\((9 + 10)^{th} = 19^{th}\\) element.\n\ni <- 9\nn <- 10\n# So we repeat FALSE \"i + n - 1\" times:\nletters[c(rep(FALSE, times = i + n - 1), TRUE)]\n\n[1] \"s\""
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html#conclusion",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html#conclusion",
    "title": "Subset every nth element from a vector",
    "section": "Conclusion",
    "text": "Conclusion\n\nTill next time, avoid complicating stuff."
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#introduction",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#introduction",
    "title": "Add downLoading spinners",
    "section": "Introduction",
    "text": "Introduction\n\n\nI hope nobody is reading. But if you are, then keep this to yourself.\n\n\nMwavu\n\n\nOftentimes you have a large dataset that takes a while to download. To give your users a visual cue that the download is in progress, you can (and should) add spinners to your download buttons."
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#the-module",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#the-module",
    "title": "Add downLoading spinners",
    "section": "The module",
    "text": "The module\nLet’s first create a basic download button module that we can build upon.\n\nUI\nWe’ll create an action button that will trigger the download (Yes, you read that right, an action button).\nWe’ll then add the real download button but it will be hidden.\n#' Download button module UI\n#' @param id Module ID\n#' @return [shiny::tagList()]\nmod_dnld_ui <- function(id) {\n  ns <- shiny::NS(id)\n\n  shiny::tagList(\n    # Trigger button:\n    shiny::actionButton(\n      inputId = ns(\"actbtn\"),\n      label = htmltools::doRenderTags(\n        shiny::tags$span(\n          shiny::icon(\"download\"),\n          \"Download\"\n        )\n      )\n    ),\n\n    # Real download button:\n    shiny::downloadButton(\n      outputId = ns(\"dnld\"),\n      label = NULL,\n      style = \"visibility: hidden;\"\n    )\n  )\n}\n\n\nServer\nThe basic server piece is also as simple:\n#' Download button module server\n#' @param id Module ID\n#' @param given_data Data to download, as a reactive.\n#' @param filename Filename to use for download.\n#' @return NULL\nmod_dnld_server <- function(\n  id,\n  given_data = reactive({iris}),\n  filename = \"iris.csv\"\n) {\n  stopifnot(\n    \"`given_data` must be a reactive\" = is.reactive(given_data)\n  )\n\n  shiny::moduleServer(\n    id = id,\n    module = function(input, output, session) {\n      output$dnld <- downloadHandler(\n        filename = filename,\n        content = function(file) {\n          write.csv(given_data(), file)\n        }\n      )\n    }\n  )\n}\nIt takes in a reactive data object (given_data) and a filename. The rest is normal stuff.\nWe can now move on to adding the download button spinner."
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#adding-a-spinner-to-the-download-button",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#adding-a-spinner-to-the-download-button",
    "title": "Add downLoading spinners",
    "section": "Adding a spinner to the download button",
    "text": "Adding a spinner to the download button\nSpoiler alert: mod_dnld_ui is done. We’ll work on mod_dnld_server from now on.\nIn the server module, we’ll use shiny::observeEvent to listen for clicks on the action button.\nWhen the button is clicked, we update its label to show a spinner and a message indicating that the download is in progress.\nWe then trigger a click on the real download button using shinyjs::click:\nshiny::observeEvent(input$actbtn, {\n  # update label of 'actbtn':\n  shiny::updateActionButton(\n    session = session,\n    inputId = \"actbtn\",\n    label = htmltools::doRenderTags(\n      shiny::tags$span(\n        class = \"d-flex align-items-center\",\n        shiny::tags$span(\n          class = \"spinner-border spinner-border-sm\",\n          role = \"status\",\n          `aria-hidden` = \"true\"\n        ),\n        shiny::tags$span(\n          class = \"mx-1\",\n          \"Downloading...\"\n        )\n      )\n    )\n  )\n\n  # simulate click on 'dnld' btn:\n  shinyjs::delay(\n    ms = 2 * 1e3,\n    expr = shinyjs::click(id = \"dnld\")\n  )\n})\nTwo things to note here:\n\nI use Bootstrap 5 classes.\nI use shinyjs::delay to, well, delay the click for 2 seconds. Wanna know why?\n\n\n\n\nNext, after the download is complete, we need to update the label of the action button back to its original value.\noutput$dnld <- downloadHandler(\n  filename = filename,\n  content = function(file) {\n    # on exit, update 'actbtn' label:\n    on.exit({\n      shiny::updateActionButton(\n        session = session,\n        inputId = \"actbtn\",\n        label = htmltools::doRenderTags(\n          shiny::tags$span(\n            shiny::icon(\"download\"),\n            \"Download\"\n          )\n        )\n      )\n    })\n\n    # write data to file:\n    write.csv(given_data(), file)\n  }\n)\n?on.exit:\n\non.exit records the expression given as its argument as needing to be executed when the current function exits (either naturally or as the result of an error). This is useful for resetting graphical parameters or performing other cleanup actions.\n\nIn our case, we’re performing a cleanup action: updating the label of the action button back to its original state.\nThe complete module server function is as follows:\n#' Download button module server\n#' @param id Module id\n#' @param given_data Data to download, as a reactive.\n#' @param filename Filename to use for download.\n#' @return NULL\nmod_dnld_server <- function(\n    id,\n    given_data = reactive({\n      iris\n    }),\n    filename = \"iris.csv\") {\n  stopifnot(\n    \"`given_data` must be a reactive\" = is.reactive(given_data)\n  )\n\n  shiny::moduleServer(\n    id = id,\n    module = function(input, output, session) {\n      shiny::observeEvent(input$actbtn, {\n        # update label of 'actbtn':\n        shiny::updateActionButton(\n          session = session,\n          inputId = \"actbtn\",\n          label = htmltools::doRenderTags(\n            shiny::tags$span(\n              class = \"d-flex align-items-center\",\n              shiny::tags$span(\n                class = \"spinner-border spinner-border-sm\",\n                role = \"status\",\n                `aria-hidden` = \"true\"\n              ),\n              shiny::tags$span(\n                class = \"mx-1\",\n                \"Downloading...\"\n              )\n            )\n          )\n        )\n\n        # simulate click on 'dnld' btn:\n        shinyjs::delay(\n          ms = 2 * 1e3,\n          expr = shinyjs::click(id = \"dnld\")\n        )\n      })\n\n      output$dnld <- downloadHandler(\n        filename = filename,\n        content = function(file) {\n          # on exit, update 'actbtn' label:\n          on.exit({\n            shiny::updateActionButton(\n              session = session,\n              inputId = \"actbtn\",\n              label = htmltools::doRenderTags(\n                shiny::tags$span(\n                  shiny::icon(\"download\"),\n                  \"Download\"\n                )\n              )\n            )\n          })\n\n          # write data to file:\n          write.csv(given_data(), file)\n        }\n      )\n    }\n  )\n}"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#putting-it-all-together",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner/index.html#putting-it-all-together",
    "title": "Add downLoading spinners",
    "section": "Putting it all together",
    "text": "Putting it all together\nNow that we have the module UI and server parts, we can put them together in a shiny app.\nThe app is as simple as it can get:\nui <- bslib::page(\n  theme = bslib::bs_theme(version = 5),\n  shinyjs::useShinyjs(),\n\n  shiny::tags$div(\n    class = \"bg-light\",\n\n    shiny::tags$div(\n    class = paste(\n      \"container min-vh-100\",\n      \"d-flex justify-content-center align-items-center bg-white\"\n    ),\n\n    # module UI:\n    shiny::tags$div(\n      mod_dnld_ui(\"this\")\n    )\n  )\n  )\n)\n\nserver <- function(input, output, session) {\n  # module server:\n  mod_dnld_server(\"this\")\n}\n\nshiny::shinyApp(ui, server)\nThe full code is available on this GitHub Gist."
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/defensive-programming/index.html",
    "href": "posts/ui-ux-r-shiny-series/defensive-programming/index.html",
    "title": "Defensive Programming",
    "section": "",
    "text": "I hope nobody is reading. But if you are, then keep this to yourself.\n\n\nMwavu\n\n\nYour prod app should never have to fail, crash or display arcane red lines of errors on the UI.\nIf it has to, it should do so gracefully and with dignity. Only then will you have an easy time convincing the client that it’s a six-legged feature, not a bug."
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#when-do-errors-arise",
    "href": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#when-do-errors-arise",
    "title": "Defensive Programming",
    "section": "When do errors arise?",
    "text": "When do errors arise?\nMost, if not all, application errors occur when you’re trying to perform an operation on data. This can be during app startup or in response to user action.\nCommon cases are:\n\nMathematical calculations eg. +, -, *, /\nData manipulations eg. subsetting (iris[, \"Sepal.Length\"])"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#defensive-programming",
    "href": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#defensive-programming",
    "title": "Defensive Programming",
    "section": "Defensive programming",
    "text": "Defensive programming\nDefensive programming is an approach to software development that focuses on anticipating and preventing potential errors, bugs, and vulnerabilities in the code.\nThe fundamental concept of this approach is to develop a program that can function correctly even in the presence of unforeseen circumstances or when users enter unexpected inputs.\nWe’ll focus on 2 key principles of defensive programming, both at the same time:\n\nValidating inputs: Checking that all input values are within expected ranges or formats, and handling unexpected input values appropriately.\nHandling errors: Catching and handling errors/exceptions in a way that allows the program to recover gracefully, without crashing or losing data\n\nThat’s where tryCatch comes in!"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#trycatch",
    "href": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#trycatch",
    "title": "Defensive Programming",
    "section": "tryCatch()",
    "text": "tryCatch()\nThe basic syntax of tryCatch() is this:\n\n\n\n\n\n\n\nMental model:\n\n\n\n\n\nHey R, I have this block of code. I’m not sure if it’s flawless, but I need you to try and run it.  In case you encounter issues, here’s how you should proceed depending on the scenario:\n\nDid it throw an error? Then do <error handling>\nDid it give a warning? Then run this <warning handling chunk>\nFinally, regardless of whether it ran successfully or failed, please do <finally block>"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#hands-on",
    "href": "posts/ui-ux-r-shiny-series/defensive-programming/index.html#hands-on",
    "title": "Defensive Programming",
    "section": "Hands-On",
    "text": "Hands-On\nPractical examples have been a great way for me to learn new concepts.\nBe sure to go through the examples thoroughly and see if you can remake similar ones of your own.\n\nExample 1: Generic errors & warnings\nIn case of an error or a warning during an operation, inform the user that something unexpected happened and show a glimpse of what might have went wrong.\nlibrary(shiny)\n\nui <- fluidPage(\n  shinytoastr::useToastr(),\n  \n  tags$div(\n    class = \"container\",\n    align = \"center\",\n    \n    selectInput(\n      inputId = \"cols\",\n      label = \"Choose one or more columns\",\n      choices = c(names(iris), \"Unknown Column\"),\n      multiple = TRUE\n    ),\n    \n    DT::DTOutput(outputId = \"table\")\n  )\n)\n\nserver <- function(input, output, session) {\n  output$table <- DT::renderDT({\n    tryCatch(\n      expr = {\n        { iris |> dplyr::select(dplyr::all_of(input$cols)) } * 100\n      },\n      error = \\(e) {\n        shinytoastr::toastr_error(\n          title = \"Error in calculation\",\n          message = conditionMessage(e)\n        )\n      },\n      warning = \\(w) {\n        shinytoastr::toastr_warning(\n          title = \"Warning!\",\n          message = conditionMessage(w)\n        )\n      }\n    )\n  })\n}\n\nshinyApp(ui, server)\n\n\nExample 2: Custom errors & warnings\nSometimes you can choose to be more informative and specific. In this example, we tell the user what exactly went wrong.\nOn top of that, we leave room for unforeseen causes of errors & warnings.\nlibrary(shiny)\n\nui <- fluidPage(\n  shinytoastr::useToastr(),\n  \n  tags$div(\n    class = \"container\",\n    align = \"center\",\n    \n    selectInput(\n      inputId = \"cols\",\n      label = \"Choose one or more columns\",\n      choices = c(names(iris), \"Unknown Column\"),\n      multiple = TRUE\n    ),\n    \n    DT::DTOutput(outputId = \"table\")\n  )\n)\n\nserver <- function(input, output, session) {\n  output$table <- DT::renderDT({\n    cols <- input$cols\n    req(cols)\n    \n    tryCatch(\n      expr = {\n        if (\"Species\" %in% cols) {\n          shinytoastr::toastr_warning(\n            title = \"Omitting column 'Species'\",\n            message = \"Cannot perform multiplication on a factor\"\n          )\n          \n          cols <- setdiff(cols, \"Species\")\n        }\n        \n        if (\"Unknown Column\" %in% cols) {\n          shinytoastr::toastr_error(\n            title = \"Omitting 'Uknown Column'\",\n            message = \"Cannot subset columns which don't exist\"\n          )\n          \n          cols <- setdiff(cols, \"Unknown Column\")\n        }\n        \n        { iris |> dplyr::select(dplyr::all_of(cols)) } * 100\n      },\n      \n      # in case of other unforeseen errors & warnings:\n      error = \\(e) {\n        shinytoastr::toastr_error(\n          title = \"Error in calculation\",\n          message = conditionMessage(e)\n        )\n      },\n      warning = \\(w) {\n        shinytoastr::toastr_warning(\n          title = \"Warning!\",\n          message = conditionMessage(w)\n        )\n      }\n    )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner-js/index.html#introduction",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner-js/index.html#introduction",
    "title": "Add downLoading spinners… using JS",
    "section": "Introduction",
    "text": "Introduction\nIn an older post I explained how to add loading spinners to download buttons when the download is in progress using shinyjs.\nI did so by rendering a fake download button which, when clicked, triggered the real download button. Honestly, it was kind of cumbersome.\nToday, as I was walking in the streets of R Shiny articles by Posit, I came across JavaScript events in shiny.\nI was intrigued. It opened my eyes to the endless possibilities of using JS with shiny. This blog post is just the tip of that iceberg."
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner-js/index.html#motivation",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner-js/index.html#motivation",
    "title": "Add downLoading spinners… using JS",
    "section": "Motivation",
    "text": "Motivation\nAllow me to let you in on a small secret… Come here. Come closer.\n\nIn one way or another JavaScript is inevitable.\n\nI’ve spent so much time trying to run away from JS, forcing R to do what JS was purposed to do.\nIn the end I’ve come to one conclusion: Smith was always right.\n\nAs a matter of fact, I’m beginning to enjoy learning and using it."
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner-js/index.html#the-module",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner-js/index.html#the-module",
    "title": "Add downLoading spinners… using JS",
    "section": "The module",
    "text": "The module\nI refuse to NOT use modules. So, here we are.\n\nUI\nThis is the simplest, there’s nothing to explain.\nI have a reminder for you though: It’s always a missing call to NS(). Thank me later.\nmod_dnld_ui <- \\(id) {\n  ns <- NS(id)\n\n  tagList(\n    downloadButton(\n      outputId = ns(\"download\"),\n      icon = icon(name = NULL, class = \"bi bi-download\")\n    )\n  )\n}\n\n\nServer\nmod_dnld_server <- \\(id, data) {\n  stopifnot(\"Argument 'data' must be a reactive!\" = is.reactive(data))\n  moduleServer(\n    id = id,\n    module = \\(input, output, session) {\n      ns <- session$ns\n\n      output$download <- downloadHandler(\n        filename = \\() {\n          paste(\"data-\", Sys.Date(), \".csv\", sep = \"\")\n        },\n        content = \\(file) {\n          session$sendCustomMessage(\n            type = \"starting_download\",\n            list(id = ns(\"download\"))\n          )\n          write.csv(data(), file)\n          session$sendCustomMessage(\n            type = \"end_download\",\n            list(id = ns(\"download\"))\n          )\n        }\n      )\n    }\n  )\n}\nEvery time the download button is clicked, shiny sends a message to JavaScript. It also sends another message when the download is complete.\n\n\n\n\n\n\nNote\n\n\n\nsendCustomMessage() sends information from the server to the client.\nOn the client side, a message handler function must be registered to receive and do something with the message."
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner-js/index.html#script.js",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner-js/index.html#script.js",
    "title": "Add downLoading spinners… using JS",
    "section": "script.js",
    "text": "script.js\nLet’s dump this in www/script.js:\nShiny.addCustomMessageHandler(\"starting_download\", (message) => {\n  let inner_html = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>' +\n  '<span class=\"ps-1\">Downloading...</span>';\n  $(\"#\" + message[\"id\"]).html(inner_html);\n});\n\nShiny.addCustomMessageHandler(\"end_download\", function(message) {\n  let inner_html = '<i class=\"bi bi-download pe-1\"></i>' + \"Download\";\n  $(\"#\" + message[\"id\"]).html(inner_html);\n});\nBoth message handlers change the inner HTML of the download button.\nThe first one (starting_download), adds a loading spinner to indicate that the download is in progress.\nThe second handler (end_download), changes the inner HTML to its original value, indicating that the download is done.\nThe module is complete!"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner-js/index.html#the-app",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner-js/index.html#the-app",
    "title": "Add downLoading spinners… using JS",
    "section": "The app",
    "text": "The app\n\nNested\nFor the sake of testing whether our module will work when nested in other modules, let’s define this:\nmod_nested_dnld_ui <- \\(id) {\n  ns <- NS(id)\n  \n  tagList(\n    mod_dnld_ui(ns(\"this\"))\n  )\n}\n\nmod_nested_dnld_server <- \\(id) {\n  moduleServer(\n    id = id,\n    module = \\(input, output, session) {\n      given_data <- reactive({\n        lapply(seq_len(2000), \\(x) {\n          iris\n        }) |>\n          do.call(what = rbind)\n      })\n      mod_dnld_server(\"this\", given_data)\n    }\n  )\n}\nLet’s now knit it all together by defining the app’s ui and server chunks:\n\n\nui.R\nui <- bslib::page(\n  title = \"DownLoading spinner\",\n  theme = bslib::bs_theme(version = 5),\n  lang = \"en\",\n  tags$head(\n    tags$link(\n      rel = \"stylesheet\",\n      href = \"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\"\n    )\n  ),\n  tags$body(\n    class = \"d-flex flex-column align-items-center bg-dark\",\n    tags$div(\n      tags$h1(\"H3110 W0r1d!\"),\n      tags$div(\n        class = \"my-5\",\n        tags$p(\"When the file is small:\"),\n        mod_dnld_ui(\"this\")\n      ),\n      tags$div(\n        class = \"my-5\",\n        tags$p(\"When the file is large:\"),\n        mod_nested_dnld_ui(\"that\")\n      ),\n      tags$div(\n        class = \"my-5\",\n        tags$p(\"Features:\"),\n        tags$ul(\n          tags$li(\n            \"Works even when the download module is nested in other modules\"\n          )\n        )\n      ),\n      tags$script(src = \"script.js\")\n    )\n  )\n)\n\n\nserver.R\nserver <- \\(input, output, session) {\n  mod_dnld_server(\"this\", data = reactive(mtcars))\n  mod_nested_dnld_server(\"that\")\n}\n\n\nglobal.R\nlibrary(shiny)"
  },
  {
    "objectID": "posts/ui-ux-r-shiny-series/download-button-spinner-js/index.html#issawrap",
    "href": "posts/ui-ux-r-shiny-series/download-button-spinner-js/index.html#issawrap",
    "title": "Add downLoading spinners… using JS",
    "section": "Issawrap!",
    "text": "Issawrap!\nReally proud of myself today!\nI expect to learn more JavaScript, but I can’t promise.\nWait… What!?\n\nUhhmmm…\nAnddd I just tweeted that.\nI expect to learn more JavaScript, but I can't promise.— Mwavu (@kennedymwavu) May 28, 2023"
  }
]