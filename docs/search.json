[
  {
    "objectID": "shiny.html",
    "href": "shiny.html",
    "title": "R Shiny",
    "section": "",
    "text": "Well, me too!\nGrab your keyboard, click on any of the articles below, and let‚Äôs transform your web apps from pixelated potatoes to interactive masterpieces :)\nP.S Don‚Äôt be shy! Hit the comments section and let‚Äôs geek out about Shiny together."
  },
  {
    "objectID": "shiny.html#so-you-use-shiny",
    "href": "shiny.html#so-you-use-shiny",
    "title": "R Shiny",
    "section": "",
    "text": "Well, me too!\nGrab your keyboard, click on any of the articles below, and let‚Äôs transform your web apps from pixelated potatoes to interactive masterpieces :)\nP.S Don‚Äôt be shy! Hit the comments section and let‚Äôs geek out about Shiny together."
  },
  {
    "objectID": "shiny.html#posts-in-this-series",
    "href": "shiny.html#posts-in-this-series",
    "title": "R Shiny",
    "section": "Posts in this series",
    "text": "Posts in this series"
  },
  {
    "objectID": "posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/index.html",
    "href": "posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/index.html",
    "title": "Injecting üíâ tabPanelBodies into tabsetPanels",
    "section": "",
    "text": "Let‚Äôs talk about injections‚Ä¶ Code & data injections, to be specific.\nIf you have built any sizeable shiny app, then you‚Äôve probably had to handle many hidden tab panels.\nYou end up with code which looks like this:\n\n\nglobal.R\n\nlibrary(shiny)\n\n\n\nui.R\n\n# btns to switch from one tab to the other:\nbtns &lt;- lapply(letters[1:10], \\(letter) {\n  actionButton(\n    inputId = paste0(\"btn_\", letter),\n    label = paste0(letter, letter),\n    class = \"btn-primary btn-lg\"\n  )\n})\n\ntabs &lt;- tabsetPanel(\n  id = \"tabs\",\n  type = \"hidden\",\n  selected = \"a\",\n  tabPanelBody(value = \"a\", tags$h1(\"Tab A\")),\n  tabPanelBody(value = \"b\", tags$h1(\"Tab B\")),\n  tabPanelBody(value = \"c\", tags$h1(\"Tab C\")),\n  tabPanelBody(value = \"d\", tags$h1(\"Tab D\")),\n  tabPanelBody(value = \"e\", tags$h1(\"Tab E\")),\n  tabPanelBody(value = \"f\", tags$h1(\"Tab F\")),\n  tabPanelBody(value = \"g\", tags$h1(\"Tab G\")),\n  tabPanelBody(value = \"h\", tags$h1(\"Tab H\")),\n  tabPanelBody(value = \"i\", tags$h1(\"Tab I\")),\n  tabPanelBody(value = \"j\", tags$h1(\"Tab J\"))\n)\n\nui &lt;- fluidPage(\n  tags$div(\n    class = \"container text-center\",\n    tags$div(class = \"page-header\", btns),\n    tabs\n  )\n)\n\n\n\nserver.R\n\nserver &lt;- \\(input, output, session) {\n  # switch to selected tab:\n  switch_tabs &lt;- \\(selected) {\n    freezeReactiveValue(x = input, name = \"tabs\")\n    updateTabsetPanel(\n      session = session,\n      inputId = \"tabs\",\n      selected = selected\n    )\n  }\n  # add btn observers:\n  lapply(letters[1:10], \\(letter) {\n    btn_id &lt;- paste0(\"btn_\", letter)\n    observeEvent(input[[btn_id]], switch_tabs(letter))\n  })\n}"
  },
  {
    "objectID": "posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/index.html#context",
    "href": "posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/index.html#context",
    "title": "Injecting üíâ tabPanelBodies into tabsetPanels",
    "section": "",
    "text": "Let‚Äôs talk about injections‚Ä¶ Code & data injections, to be specific.\nIf you have built any sizeable shiny app, then you‚Äôve probably had to handle many hidden tab panels.\nYou end up with code which looks like this:\n\n\nglobal.R\n\nlibrary(shiny)\n\n\n\nui.R\n\n# btns to switch from one tab to the other:\nbtns &lt;- lapply(letters[1:10], \\(letter) {\n  actionButton(\n    inputId = paste0(\"btn_\", letter),\n    label = paste0(letter, letter),\n    class = \"btn-primary btn-lg\"\n  )\n})\n\ntabs &lt;- tabsetPanel(\n  id = \"tabs\",\n  type = \"hidden\",\n  selected = \"a\",\n  tabPanelBody(value = \"a\", tags$h1(\"Tab A\")),\n  tabPanelBody(value = \"b\", tags$h1(\"Tab B\")),\n  tabPanelBody(value = \"c\", tags$h1(\"Tab C\")),\n  tabPanelBody(value = \"d\", tags$h1(\"Tab D\")),\n  tabPanelBody(value = \"e\", tags$h1(\"Tab E\")),\n  tabPanelBody(value = \"f\", tags$h1(\"Tab F\")),\n  tabPanelBody(value = \"g\", tags$h1(\"Tab G\")),\n  tabPanelBody(value = \"h\", tags$h1(\"Tab H\")),\n  tabPanelBody(value = \"i\", tags$h1(\"Tab I\")),\n  tabPanelBody(value = \"j\", tags$h1(\"Tab J\"))\n)\n\nui &lt;- fluidPage(\n  tags$div(\n    class = \"container text-center\",\n    tags$div(class = \"page-header\", btns),\n    tabs\n  )\n)\n\n\n\nserver.R\n\nserver &lt;- \\(input, output, session) {\n  # switch to selected tab:\n  switch_tabs &lt;- \\(selected) {\n    freezeReactiveValue(x = input, name = \"tabs\")\n    updateTabsetPanel(\n      session = session,\n      inputId = \"tabs\",\n      selected = selected\n    )\n  }\n  # add btn observers:\n  lapply(letters[1:10], \\(letter) {\n    btn_id &lt;- paste0(\"btn_\", letter)\n    observeEvent(input[[btn_id]], switch_tabs(letter))\n  })\n}"
  },
  {
    "objectID": "posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/index.html#problem-isolation",
    "href": "posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/index.html#problem-isolation",
    "title": "Injecting üíâ tabPanelBodies into tabsetPanels",
    "section": "Problem isolation",
    "text": "Problem isolation\nserver.R looks good.\nLet‚Äôs focus on ui.R, specifically on the tabs.\ntabs &lt;- tabsetPanel(\n  id = \"tabs\",\n  type = \"hidden\",\n  selected = \"a\",\n  tabPanelBody(value = \"a\", tags$h1(\"Tab A\")),\n  tabPanelBody(value = \"b\", tags$h1(\"Tab B\")),\n  tabPanelBody(value = \"c\", tags$h1(\"Tab C\")),\n  tabPanelBody(value = \"d\", tags$h1(\"Tab D\")),\n  tabPanelBody(value = \"e\", tags$h1(\"Tab E\")),\n  tabPanelBody(value = \"f\", tags$h1(\"Tab F\")),\n  tabPanelBody(value = \"g\", tags$h1(\"Tab G\")),\n  tabPanelBody(value = \"h\", tags$h1(\"Tab H\")),\n  tabPanelBody(value = \"i\", tags$h1(\"Tab I\")),\n  tabPanelBody(value = \"j\", tags$h1(\"Tab J\"))\n)\nOne thing is clear: the tabPanelBody()s are wet, not DRY. (Yes, I‚Äôm actually smiling right now).\nRealistically, the content of each tabPanelBody() is usually a call to a module which I give the same id as the value of the tabPanelBody().\nI have used h1 tags here for simplification.\nTo avoid repetition, let‚Äôs use lapply():\npanel_bodies &lt;- lapply(letters[1:10], \\(value) {\n  tabPanelBody(\n    value = value,\n    tags$h1(\n      paste(\"tab\", value) |&gt; stringr::str_to_title()\n    )\n  )\n})\nIf you have modules you‚Äôd have to use Map() so that you iterate over the values/ids and modules.\nFor example:\npanel_bodies &lt;- Map(\n  f = \\(value, mod_ui) {\n    tabPanelBody(value = value, mod_ui(id = value))\n  },\n  list(\n    \"home\", \"generate_shifts\", \"leave_application\",\n    \"manage_employees\", \"download_shifts\"\n  ),\n  list(\n    mod_home_ui, mod_generate_shifts_ui, mod_leave_application_ui,\n    mod_manage_employees_ui, mod_download_shifts_ui\n  )\n)\nI digress. Back to the lapply().\nWe now no longer repeat ourselves. Yeeey!\nBut our joy is not meant to last long: how do we pass this list of tabPanelBody()s to tabsetPanel()?\nThis will not work:\ntabsetPanel(\n  id = \"tabs\",\n  type = \"hidden\",\n  selected = \"a\",\n  panel_bodies\n)\nError: Navigation containers expect a collection of `bslib::nav_panel()`/`shiny::tabPanel()`s and/or `bslib::nav_menu()`/`shiny::navbarMenu()`s. Consider using `header` or `footer` if you wish to place content above (or below) every panel's contents.\ntabsetPanel() expects the bare tabPanelBody()s, without wrappers (in this case a list)."
  },
  {
    "objectID": "posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/index.html#good-old-do.call",
    "href": "posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/index.html#good-old-do.call",
    "title": "Injecting üíâ tabPanelBodies into tabsetPanels",
    "section": "Good-old do.call()",
    "text": "Good-old do.call()\nMy first thought when I encountered this was to use do.call().\nSince we already have some default arguments passed to tabsetPanel(), we have to modify the approach to do.call() a little bit:\n# a wrapper function with default args to `tabsetPanel()`\ntp &lt;- \\(...) {\n  tabsetPanel(\n    id = \"tabs\",\n    type = \"hidden\",\n    selected = \"a\",\n    ...\n  )\n}\n\ndo.call(what = tp, args = panel_bodies)"
  },
  {
    "objectID": "posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/index.html#enter-rlanginject.",
    "href": "posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/index.html#enter-rlanginject.",
    "title": "Injecting üíâ tabPanelBodies into tabsetPanels",
    "section": "Enter rlang::inject().",
    "text": "Enter rlang::inject().\nThe older I grow, the more I prefer reading the docs, so:\n?rlang::`!!!`\n\nThe splice operator ‚Å†!!!‚Å† implemented in dynamic dots injects a list of arguments into a function call. It belongs to the family of injection operators and provides the same functionality as do.call().\nThe two main cases for splice injection are:\n\nTurning a list of inputs into distinct arguments. This is especially useful with functions that take data in ..., such as base::rbind().\n\ndfs &lt;- list(mtcars, mtcars)\ninject(rbind(!!!dfs))\n‚Ä¶\n\nThis is exactly what we need. Let‚Äôs now inject the tabPanelBody()s into the tabsetPanel():\ntabs &lt;- rlang::inject(\n  tabsetPanel(\n    id = \"tabs\",\n    type = \"hidden\",\n    selected = \"a\",\n    !!!panel_bodies\n  )\n)\nShiny comes with injection support out of the box. Therefore, there‚Äôs no need to wrap the code in rlang::inject():\ntabs &lt;- tabsetPanel(\n  id = \"tabs\",\n  type = \"hidden\",\n  selected = \"a\",\n  !!!panel_bodies\n)\nThis is way cleaner and also visually appealing.\nThere are numerous applications of code & data injection. Check out more in the docs."
  },
  {
    "objectID": "posts/shiny/jquery-effects/index.html",
    "href": "posts/shiny/jquery-effects/index.html",
    "title": "JQuery Effects in Shiny",
    "section": "",
    "text": "Here is how renderUI() normally functions:\n\n\n\nThere‚Äôs nothing wrong with it. It works well.\nBut notice how on the initial render, the user is just slapped with the content. It gets worse if you‚Äôre rendering a huge portion.\nI‚Äôm not here to offer you another version of renderUI. What I can do, however, is show you how you can improvise and make the rendering feel magical to the user.\nLet‚Äôs take a look at a sample:\n\n\n\nThe rendered UI now smoothly slides down and up depending on user action. How cool is that?"
  },
  {
    "objectID": "posts/shiny/jquery-effects/index.html#demo",
    "href": "posts/shiny/jquery-effects/index.html#demo",
    "title": "JQuery Effects in Shiny",
    "section": "",
    "text": "Here is how renderUI() normally functions:\n\n\n\nThere‚Äôs nothing wrong with it. It works well.\nBut notice how on the initial render, the user is just slapped with the content. It gets worse if you‚Äôre rendering a huge portion.\nI‚Äôm not here to offer you another version of renderUI. What I can do, however, is show you how you can improvise and make the rendering feel magical to the user.\nLet‚Äôs take a look at a sample:\n\n\n\nThe rendered UI now smoothly slides down and up depending on user action. How cool is that?"
  },
  {
    "objectID": "posts/shiny/jquery-effects/index.html#introduction",
    "href": "posts/shiny/jquery-effects/index.html#introduction",
    "title": "JQuery Effects in Shiny",
    "section": "Introduction",
    "text": "Introduction\nI‚Äôve been playing around with JQuery and I must admit, it‚Äôs very fascinating. It has allowed me to do some exciting things.\nToday we‚Äôll focus on one specific task:\n\nAdding a sliding animation (like the one in the demo) to a div\n\n\n\n\n\n\n\nWhy did you choose renderUI specifically?\n\n\n\nIt‚Äôs easy enough to add such effects on non-rendered divs. But with renderUI? I found it quite challenging.\nThat‚Äôs why I must remind you‚Ä¶ I‚Äôm not here for the easy part."
  },
  {
    "objectID": "posts/shiny/jquery-effects/index.html#module",
    "href": "posts/shiny/jquery-effects/index.html#module",
    "title": "JQuery Effects in Shiny",
    "section": "Module",
    "text": "Module\nOne thing is for sure: I am going to use modules.\nThe module‚Äôs UI is pretty straightforward:\n\n\nR/mod_animated_ui.R\n\nmod_animated_ui &lt;- \\(id) {\n  ns &lt;- NS(id)\n  \n  tagList(\n    tags$h1(\"Animated renderUI\"),\n    actionButton(\n      inputId = ns(\"render_div\"),\n      label = \"Render UI\",\n      class = \"btn-outline-success px-5 mb-3\"\n    ),\n    uiOutput(outputId = ns(\"theui\"))\n  )\n}\n\nFor the server part, let‚Äôs build it up step by step. Starting with what we‚Äôre all used to, then levelling up to new heights.\n\n\nR/mod_animated_server.R\n\nmod_animated_server &lt;- \\(id) {\n  moduleServer(\n    id = id,\n    module = \\(input, output, session) {\n      ns &lt;- session$ns\n      # values to use for the textInput:\n      aliases &lt;- c(\n        \"Gandalf the grey\", \"Strider\", \"Saruman\",\n        \"Sauron\", \"Frodo\", \"Samwise Gamgee\"\n      )\n      output$theui &lt;- renderUI({\n        tagList(\n          tags$div(\n            id = ns(\"to_animate\"),\n            style = \"display: none;\",\n            selectInput(\n              inputId = ns(\"selector\"),\n              label = \"What's your fav letter?\",\n              choices = LETTERS,\n              selected = sample(x = LETTERS, size = 1)\n            ),\n            textInput(\n              inputId = ns(\"name\"),\n              label = \"Enter your pseudo name\",\n              value = sample(x = aliases, size = 1)\n            ),\n            checkboxInput(\n              inputId = ns(\"lotr_fan\"),\n              label = \"Are you a LOTR fan?\",\n              value = sample(x = c(FALSE, TRUE), size = 1)\n            ),\n            tags$p(\n              tags$em(\"PS: Don't overdo the animations! Thanks.\")\n            )\n          ),\n          tags$div(\n            class = \"d-flex\",\n            actionButton(\n              inputId = ns(\"toggle_div\"),\n              label = \"Hide the rendered UI\",\n              class = \"btn-outline-primary px-5 mr-1 mt-3\"\n            )\n          )\n        )\n      }) |&gt; bindEvent(input$render_div)\n      \n      observeEvent(input$render_div, {\n        updateActionButton(\n          session = session,\n          inputId = \"render_div\",\n          label = \"Re-render UI\"\n        )\n      }, once = TRUE)\n    }\n  )\n}\n\nA few things to note here:\n\nTo get this module‚Äôs namespace we use ns &lt;- session$ns. This is the equivalent of ns &lt;- NS(id) in the module‚Äôs UI.\nThe div we‚Äôre returning inside of the tagList has:\n\nAn id which we will use later in JQuery to select the div.\nA display of none. This means that even after it is rendered, it will take no space and hence won‚Äôt be visible. This is similar to what shinyjs::hide() does.\n\nWe only need to render the UI when the user clicks on the button, hence bindEvent(input$render_div).\nOnce the button render_div is clicked, we change it‚Äôs label to ‚ÄúRe-render UI‚Äù, and we only do this once since any further clicks will just be ‚ÄúRe-rendering the UI‚Äù. That‚Äôs why we have once = TRUE on the observeEvent. The observer is destroyed after the first time the handler expression is ran.\n\nNow, are you ready for the juicy (and probably messy) part?\nI‚Äôm not a fan of inline JS in a shiny app, unless it‚Äôs just a short one-liner.\nWhat I‚Äôm trying to tell you is that we‚Äôre going to use a script. Let‚Äôs add it just before closing the tagList:\n\n\nR/mod_animated_server.R\n\ntagList(\n  # ...\n  tags$script(src = \"animate.js\")\n)\n\nWe want the script to target elements in this module alone, not any other part of ui.R. This presents us with a huge problem:\n\nHow do we pass our module‚Äôs namespace to the script?\n\nThis is the point where I almost gave up on using modules. I tried numerous tricks, I googled, I even asked my grandma :)\n\nMonkey Laptop GIFfrom Monkey GIFs\n\n\nNone of those worked, least of all the last option. So I decided to take a walk.\nI was in the middle of nowhere when a thought crept into my mind:\n\nCan R read an arbitrary file? If so, I can read the JS file and modify it so that the selectors incorporate the namespace id.\n\nLet me explain."
  },
  {
    "objectID": "posts/shiny/jquery-effects/index.html#script.js",
    "href": "posts/shiny/jquery-effects/index.html#script.js",
    "title": "JQuery Effects in Shiny",
    "section": "script.js",
    "text": "script.js\n\n\nwww/animate.js\n\n$(document).ready(function () {\n  const ns = undefined;\n  const div = $(\"#\" + ns + \"to_animate\");\n  const toggle_div = $(\"#\" + ns + \"toggle_div\");\n  const hide_text = \"Hide the rendered UI\";\n  const show_text = \"Show the rendered UI\";\n\n  div.slideToggle(600);\n\n  toggle_div.on(\"click\", () =&gt; {\n    div.slideToggle(\"slow\");\n    // toggle button text:\n    toggle_div.text(toggle_div.text() === hide_text ? show_text : hide_text);\n  });\n});\n\nHere‚Äôs what the script does, line by line:\n\nLine \\(1\\) says: Wait till this document is ready for manipulation and then call this anonymous function.\nLine \\(2\\) is the key to solving our problem. We assign undefined to a variable ns. We will replace the undefined with our module‚Äôs namespace.\nLine \\(3\\) selects the div to animate.\nLine \\(4\\) selects the button which hides and shows the rendered div.\nLine \\(5\\) & \\(6\\) are the button labels when the div is hidden or shown.\nRecall that by default the rendered div is hidden. Line \\(8\\) makes it visible and slides it down in a span of 600 ms.\nOn line \\(10\\), we are adding an observer to the button. We‚Äôre basically saying whenever the button is clicked:\n\nIf the div is hidden, show it [slowly]. If it‚Äôs shown, hide it [slowly] (Line \\(11\\)).\nRelabel the button. If its current label is hide_text, change it to show_text. Otherwise change it to hide_text (Line \\(13\\)).\n\n\nNow let‚Äôs circle back and add this script to our module‚Äôs server:\n\n\nR/mod_animated_server.R\n\nmod_animated_server &lt;- \\(id) {\n  moduleServer(\n    id = id,\n    module = \\(input, output, session) {\n      ns &lt;- session$ns\n      # read animate.js and add namespace to the line \"const ns = undefined\":\n      anim_js &lt;- readLines(con = file.path(\"www\", \"animate.js\")) |&gt; \n        gsub(\n          pattern = \"const ns = undefined\",\n          replacement = sprintf('const ns = \"%s\"', ns(\"\"))\n        ) |&gt; \n        paste0(collapse = \"\\n\") |&gt; \n        HTML()\n      \n      # ...\n      \n      output$theui &lt;- renderUI({\n        tagList(\n          # ...,\n          tags$script(anim_js)\n        )\n      }) |&gt; bindEvent(input$render_div)\n    }\n  )\n}\n\nThe most important thing to note here is that passing an empty string to ns returns the namespace of the module.\nThat‚Äôs it! Here‚Äôs how the final module server looks like:\n\n\nShow code\n\n\n\nR/mod_animated_server.R\n\nmod_animated_server &lt;- \\(id) {\n  moduleServer(\n    id = id,\n    module = \\(input, output, session) {\n      ns &lt;- session$ns\n      # read animate.js and add namespace to the line \"const ns = undefined\":\n      anim_js &lt;- readLines(con = file.path(\"www\", \"animate.js\")) |&gt; \n        gsub(\n          pattern = \"const ns = undefined\",\n          replacement = sprintf('const ns = \"%s\"', ns(\"\"))\n        ) |&gt; \n        paste0(collapse = \"\\n\") |&gt; \n        HTML()\n      # values to use for the textInput:\n      aliases &lt;- c(\n        \"Gandalf the grey\", \"Strider\", \"Saruman\",\n        \"Sauron\", \"Frodo\", \"Samwise Gamgee\"\n      )\n      output$theui &lt;- renderUI({\n        tagList(\n          tags$div(\n            id = ns(\"to_animate\"),\n            style = \"display: none;\",\n            selectInput(\n              inputId = ns(\"selector\"),\n              label = \"What's your fav letter?\",\n              choices = LETTERS,\n              selected = sample(x = LETTERS, size = 1)\n            ),\n            textInput(\n              inputId = ns(\"name\"),\n              label = \"Enter your pseudo name\",\n              value = sample(x = aliases, size = 1)\n            ),\n            checkboxInput(\n              inputId = ns(\"lotr_fan\"),\n              label = \"Are you a LOTR fan?\",\n              value = sample(x = c(FALSE, TRUE), size = 1)\n            ),\n            tags$p(\n              tags$em(\"PS: Don't overdo the animations! Thanks.\")\n            )\n          ),\n          tags$div(\n            class = \"d-flex\",\n            actionButton(\n              inputId = ns(\"toggle_div\"),\n              label = \"Hide the rendered UI\",\n              class = \"btn-outline-primary px-5 mr-1 mt-3\"\n            )\n          ),\n          tags$script(anim_js)\n        )\n      }) |&gt; bindEvent(input$render_div)\n      \n      observeEvent(input$render_div, {\n        updateActionButton(\n          session = session,\n          inputId = \"render_div\",\n          label = \"Re-render UI\"\n        )\n      }, once = TRUE)\n    }\n  )\n}"
  },
  {
    "objectID": "posts/shiny/jquery-effects/index.html#the-app",
    "href": "posts/shiny/jquery-effects/index.html#the-app",
    "title": "JQuery Effects in Shiny",
    "section": "The app",
    "text": "The app\n\n\nglobal.R\n\nlibrary(shiny)\n\n\n\nui.R\n\nui &lt;- bslib::page(\n  title = \"Animate rendered UIs\",\n  theme = bslib::bs_theme(version = 5),\n  tags$div(\n    class = \"container\",\n    mod_animated_ui(\"animated\")\n  )\n)\n\n\n\nserver.R\n\nserver &lt;- \\(input, output, session) {\n  mod_animated_server(\"animated\")\n}"
  },
  {
    "objectID": "posts/shiny/jquery-effects/index.html#conclusion",
    "href": "posts/shiny/jquery-effects/index.html#conclusion",
    "title": "JQuery Effects in Shiny",
    "section": "Conclusion",
    "text": "Conclusion\nI don‚Äôt know about you, but I‚Äôm kinda liking JavaScript.\nJQuery has many such effects which you can use in your apps for better UI/UX.\n$(this) has been JQuery + Shiny in a nutshell."
  },
  {
    "objectID": "posts/shiny/auto-reload/index.html",
    "href": "posts/shiny/auto-reload/index.html",
    "title": "AutoreloadingüîÑ in Shiny",
    "section": "",
    "text": "Tip\n\n\n\nHave a look at this example/article for a better way to enable live-reloading."
  },
  {
    "objectID": "posts/shiny/auto-reload/index.html#introduction",
    "href": "posts/shiny/auto-reload/index.html#introduction",
    "title": "AutoreloadingüîÑ in Shiny",
    "section": "Introduction",
    "text": "Introduction\nIf you take a look at\n?shiny::getShinyOption\nyou‚Äôll see there‚Äôs an option shiny.autoreload which when set to TRUE should reload your app when you make changes to the code.\nThis works well for relatively small apps where you have a simple architecture.\nWhen you introduce shiny modules or use an R package architecture, the autoreloading stops.\nFor a very long time I‚Äôve been envious of JavaScript devs. Regardless of the architecture, they make a change and their web apps automatically reload.\nLet‚Äôs explore how we can bring such experience into the development of shiny apps."
  },
  {
    "objectID": "posts/shiny/auto-reload/index.html#setup-the-shiny-side",
    "href": "posts/shiny/auto-reload/index.html#setup-the-shiny-side",
    "title": "AutoreloadingüîÑ in Shiny",
    "section": "Setup the shiny side",
    "text": "Setup the shiny side\nWe, of course, need an app.\nI‚Äôm sure by now you‚Äôre familiar with this setup:\n|- autoreload/\n    |- global.R\n    |- ui.R\n    |- server.R\n    |- R/\n        |- mod_select_ui.R\n        |- mod_select_server.R\nautoreload/ is our working directory.\nI‚Äôve added the select module under autoreload/R/, as expected.\nHere‚Äôs the source code:\n\n\nglobal.R\n\nlibrary(shiny)\n\n\n\nui.R\n\nui &lt;- fluidPage(\n  tags$div(\n    class = \"container\",\n    tags$h1(\"Hello, nodemon!\"),\n    mod_select_ui(id = \"select\")\n  )\n)\n\n\n\nserver.R\n\nserver &lt;- \\(input, output, session) {\n  mod_select_server(id = \"select\")\n}\n\n\n\nR/mod_select_ui.R\n\nmod_select_ui &lt;- \\(id) {\n  ns &lt;- NS(id)\n  tagList(\n    selectInput(\n      inputId = ns(\"letter\"),\n      label = \"LETTERS\",\n      choices = LETTERS\n    ),\n    checkboxInput(\n      inputId = ns(\"case_sensitive\"),\n      label = \"Case Sensitive\"\n    )\n  )\n}\n\n\n\nR/mod_select_server.R\n\nmod_select_server &lt;- \\(id) {\n  moduleServer(\n    id = id,\n    module = \\(input, output, session) {}\n  )\n}\n\nThe reprex is complete.\nWe only have one job now: enable autoreload."
  },
  {
    "objectID": "posts/shiny/auto-reload/index.html#prerequisites",
    "href": "posts/shiny/auto-reload/index.html#prerequisites",
    "title": "AutoreloadingüîÑ in Shiny",
    "section": "Prerequisites",
    "text": "Prerequisites\nYou will need to have these two installed:\n\nNodeJS. This is a JavaScript runtime environment.\n\nJust google ‚Äúhow to install nodejs ‚Äù\n\nNPM: Package manager for JavaScript.\n\nAgain, google ‚Äúhow to install npm ‚Äù\n\n\nBy the way, in case you‚Äôre concerned, we aren‚Äôt going to write any JavaScript."
  },
  {
    "objectID": "posts/shiny/auto-reload/index.html#initialize-project",
    "href": "posts/shiny/auto-reload/index.html#initialize-project",
    "title": "AutoreloadingüîÑ in Shiny",
    "section": "Initialize project",
    "text": "Initialize project\nSwitch to the terminal and ensure you‚Äôre in the root folder of your shiny app (autoreload/), then run:\nnpm init -y\nThis will setup a new npm package and create the package.json file.\nThe -y flag accepts the default npm setup."
  },
  {
    "objectID": "posts/shiny/auto-reload/index.html#enter-nodemon",
    "href": "posts/shiny/auto-reload/index.html#enter-nodemon",
    "title": "AutoreloadingüîÑ in Shiny",
    "section": "Enter nodemon",
    "text": "Enter nodemon\nnodemon is a tool that helps develop Node.js based applications by automatically restarting the node application when file changes in the directory are detected.\nWe will use it to rerun our shiny app as needed.\nInstall nodemon as a dev dependency:\nnpm i -D nodemon\nLet‚Äôs create run_app.R at the root directory of our project. This is more of an ‚Äúentry point‚Äù to our shiny app.\nnodemon will rerun this file each time a change occurs.\n\n\nrun_app.R\n\nshiny::runApp(port = 3000L, launch.browser = TRUE)\n\nFor simplicity, we will fix the port to 3000.\nIn most cases you need the app to automatically launch the browser, so we set that to TRUE."
  },
  {
    "objectID": "posts/shiny/auto-reload/index.html#configure-nodemon",
    "href": "posts/shiny/auto-reload/index.html#configure-nodemon",
    "title": "AutoreloadingüîÑ in Shiny",
    "section": "Configure nodemon",
    "text": "Configure nodemon\nWe need to tell nodemon how to run R files.\nCreate the file nodemon.json at the root dir of our project and paste this in it:\n{\n  \"execMap\": {\n1    \"R\": \"Rscript\"\n  },\n  \"events\": {\n2    \"restart\": \"sh -c 'fuser -n tcp -k 3000'\",\n3    \"crash\": \"sh -c 'fuser -n tcp -k 3000'\"\n  }\n}\n\n1\n\nSpecifies an executable mapping for .R files: Rscript\n\n2\n\nAfter every restart, first kill whatever process is running in port 3000\n\n3\n\nDo the same whenever the app crashes\n\n\n2 & 3 ensure that the port 3000 is freed up before the application is rerun again.\nHere is a breakdown of the different parts:\n\nsh: Is the shell command, which is used to run other commands.\n-c: This option tells the shell to read the commands from the following string.\nfuser -n tcp -k 3000: This is the actual command that shell will execute.\n\n\n\n\n\n\n\nNote\n\n\n\nI‚Äôm using Ubuntu. If you‚Äôre on Windows, MacOS or another distro, you need to google how to kill a process that‚Äôs running in a port for your OS.\n\n\nWe‚Äôre done with nodemon configuration.\nNext, open package.json and edit the ‚Äúscripts‚Äù section:\n{\n  \"name\": \"autoreload\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n1    \"dev\": \"nodemon -e '*' run_app.R\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.2\"\n  }\n}\n\n1\n\nCreates a custom npm script called ‚Äúdev‚Äù\n\n\nLet‚Äôs break it down:\n\nnodemon: This is nodemon, which monitors changes in files in our project.\n-e '*': This option tells nodemon which files to watch for changes. In this case we set it to watch all files (* is a wildcard character), meaning nodemon will restart whenever any file changes.\nrun_app.R: This is the script that nodemon will execute when it restarts."
  },
  {
    "objectID": "posts/shiny/auto-reload/index.html#run-app",
    "href": "posts/shiny/auto-reload/index.html#run-app",
    "title": "AutoreloadingüîÑ in Shiny",
    "section": "Run app",
    "text": "Run app\nEverything is ready.\n\nIn our project root folder, run this in the terminal:\nnpm run dev\nThis should fire up the shiny app. Now go ahead and make changes to any file within the directory and watch what happens.\nTo stop npm, press CTRL + C.\nHappy development!"
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html",
    "title": "Subset every nth element from a vector",
    "section": "",
    "text": "I‚Äôve been using R on a daily basis (literally) precisely for 3 years 3 months 2 weeks 2 days now.\nIf I were to say anything about the language, it‚Äôd be what Gandalf said about Hobbits:\n\n\n\n\n\n\n\nHobbits are amazing creatures. You can learn all there is to know about their ways in a month, and yet after a hundred years, they can still surprise you.\n‚Äî Gandalf, LOTR"
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html#introduction",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html#introduction",
    "title": "Subset every nth element from a vector",
    "section": "",
    "text": "I‚Äôve been using R on a daily basis (literally) precisely for 3 years 3 months 2 weeks 2 days now.\nIf I were to say anything about the language, it‚Äôd be what Gandalf said about Hobbits:\n\n\n\n\n\n\n\nHobbits are amazing creatures. You can learn all there is to know about their ways in a month, and yet after a hundred years, they can still surprise you.\n‚Äî Gandalf, LOTR"
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html#problem-statement",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html#problem-statement",
    "title": "Subset every nth element from a vector",
    "section": "Problem Statement",
    "text": "Problem Statement\nAbout a week ago I needed to subset every second element of a vector. Let me explain.\nTake a look at letters:\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\nHow do you get the elements ‚Äúb‚Äù, ‚Äúd‚Äù, ‚Äúf‚Äù, ‚Äúh‚Äù, ‚Äúj‚Äù, ‚Ä¶ ie. values at the indices 2, 4, 6, 8, ...?\nSimple enough, right? Right.\nWhat amazed me wasn‚Äôt the simplicity of the question at hand, it was how even as a prolific user of R, the building blocks of the language sometimes slip past me so easily."
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html#what-i-did",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html#what-i-did",
    "title": "Subset every nth element from a vector",
    "section": "What I did",
    "text": "What I did\nLet‚Äôs go through my thought process.\n\nseq()\nThis was definitely the first option that came to mind:\n\nindices &lt;- seq(from = 2, to = length(letters), by = 2)\nletters[indices]\n\n [1] \"b\" \"d\" \"f\" \"h\" \"j\" \"l\" \"n\" \"p\" \"r\" \"t\" \"v\" \"x\" \"z\"\n\n\nPretty good, but‚Ä¶\nThere must be a better solution.\n\n\nModulo Operator %%\nThe modulo operator %% returns the remainder of the division of one number by another.\nFor example, 4 %% 2 would return 0 since: \\[\n\\frac{4}{2} = 2\\;remainder\\;0\n\\] and 9 %% 7 would return 2 since: \\[\n\\frac{9}{7} = 1\\;remainder\\;2\n\\]\nBack to our problem: I basically want all indices which are divisible by \\(2\\) ie. Leave a remainder of zero.\n\nindices &lt;- !seq_along(letters) %% 2\nletters[indices]\n\n [1] \"b\" \"d\" \"f\" \"h\" \"j\" \"l\" \"n\" \"p\" \"r\" \"t\" \"v\" \"x\" \"z\"\n\n\nThat works but‚Ä¶ It‚Äôs quite obfuscated for such a simple problem.\n\nThere‚Äôs only one way to know if there‚Äôs an easier solution: Google."
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html#vector-recycling",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html#vector-recycling",
    "title": "Subset every nth element from a vector",
    "section": "Vector recycling",
    "text": "Vector recycling\nIf logical vectors are used for indexing in R, their values are recycled if the index vector is shorter than the vector containing the values.\nIt is one of my all time favorite features about R. The first time I learnt the concept, it was mind-blowing.\nThis time round, it swept me off my feet completely.\nThe solution was as simple as this:\n\nletters[c(FALSE, TRUE)]\n\n [1] \"b\" \"d\" \"f\" \"h\" \"j\" \"l\" \"n\" \"p\" \"r\" \"t\" \"v\" \"x\" \"z\"\n\n\nTell me that isn‚Äôt elegant!\nThat‚Äôs one of the best answers on StackOverflow as far as I‚Äôm concerned.\n\nShort. In most cases short never equals good performance but this is one of the few cases where what‚Äôs advertised is what‚Äôs delivered.\nSimple. It‚Äôs very easy to understand. Straightforward.\nClean. It‚Äôs not obfuscated.\n\nIt‚Äôs better in every way compared to my initial trials. It was posted by the user Sven Hohenstein. Link to the answer."
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html#generalization",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html#generalization",
    "title": "Subset every nth element from a vector",
    "section": "Generalization",
    "text": "Generalization\nNow that we have the best solution (as far as we know), let‚Äôs generalize it.\n\n\\(i^{th}\\) element\nWhat if you wanted to subset every 9th element? Repeat TRUE & FALSE the required number of times:\n\n# Subset every 9th element:\nletters[c(rep(FALSE, times = 8), TRUE)]\n\n[1] \"i\" \"r\"\n\n\nWe repeat FALSE \\(8\\) times because we want every \\(9\\)th index to be retrieved.\nTaking \\(9\\) as our i:\n\ni &lt;- 9\nletters[c(rep(FALSE, times = i - 1), TRUE)]\n\n[1] \"i\" \"r\"\n\n\n\n\n\\((i + n)^{th}\\) element\nExtending the above logic, let‚Äôs assume i is \\(9\\) and n is \\(10\\). So it‚Äôs like saying we want to subset every \\((9 + 10)^{th} = 19^{th}\\) element.\n\ni &lt;- 9\nn &lt;- 10\n# So we repeat FALSE \"i + n - 1\" times:\nletters[c(rep(FALSE, times = i + n - 1), TRUE)]\n\n[1] \"s\""
  },
  {
    "objectID": "posts/subset-every-nth-element-from-a-vector/index.html#conclusion",
    "href": "posts/subset-every-nth-element-from-a-vector/index.html#conclusion",
    "title": "Subset every nth element from a vector",
    "section": "Conclusion",
    "text": "Conclusion\n\nTill next time, avoid complicating stuff."
  },
  {
    "objectID": "posts/how-i-ended-up-with-r/index.html",
    "href": "posts/how-i-ended-up-with-r/index.html",
    "title": "How I Ended Up With R",
    "section": "",
    "text": "Dear reader,\nI hope you‚Äôre doing well.\nI am doing great! Couldn‚Äôt be better. Thanks for asking, btw.\nI am reaching out to let you know more about the main character in my life: ME. Specifically, how I ended up learning R.\nWhether or not this story is good enough to end up in your inbox/my blog (same thing) is a matter of debate. But I must warn you that we shall not be writing any code today.\n3, 2, 1, Action üé¨\n‚ÄúHi, My name is Mwavu and I‚Äôm an addict. I‚Äôve been using for 4 years‚Ä¶‚Äù \nYou‚Äôre probably wondering how I ended up here. One does not simply build his whole software development career around R.\nLet‚Äôs rewind to where it all started:"
  },
  {
    "objectID": "posts/how-i-ended-up-with-r/index.html#introduction",
    "href": "posts/how-i-ended-up-with-r/index.html#introduction",
    "title": "How I Ended Up With R",
    "section": "",
    "text": "Dear reader,\nI hope you‚Äôre doing well.\nI am doing great! Couldn‚Äôt be better. Thanks for asking, btw.\nI am reaching out to let you know more about the main character in my life: ME. Specifically, how I ended up learning R.\nWhether or not this story is good enough to end up in your inbox/my blog (same thing) is a matter of debate. But I must warn you that we shall not be writing any code today.\n3, 2, 1, Action üé¨\n‚ÄúHi, My name is Mwavu and I‚Äôm an addict. I‚Äôve been using for 4 years‚Ä¶‚Äù \nYou‚Äôre probably wondering how I ended up here. One does not simply build his whole software development career around R.\nLet‚Äôs rewind to where it all started:"
  },
  {
    "objectID": "posts/how-i-ended-up-with-r/index.html#last-year-of-high-school",
    "href": "posts/how-i-ended-up-with-r/index.html#last-year-of-high-school",
    "title": "How I Ended Up With R",
    "section": "Last year of high school",
    "text": "Last year of high school\nI went to Alliance High School, btw.\nDuring the last year of high-school, students get to choose the course they‚Äôd like to major in the university. I had no idea what to choose. I was pretty good at maths, so it had to be something centered around that.\nAfter inquiring from my math teacher, he offered two suggestions: Statistics or Actuarial Science.\nWe went for a break and boy, did I do some deep research! By the end of the break, I had already made up my mind: Actuarial Science. A decision that was driven by two * checks notes * ‚Ä¶ uhhhmm three factors:\n\nMy vast google search revealed that actuaries have a fat paycheck. Who doesn‚Äôt want that? I mean, I do.\nMy aunt really championed for it, talking about a friend of hers who did the same course and now money aggressively hunts her down. Imagine!\nRumours had it that the course was really difficult, with lots of math. ‚ÄúBut I am excellent at maths, that won‚Äôt be a problem‚Äù, I said to myself. Besides, the university was said to be a fun place with lots of time to chill, I‚Äôd use that time to crunch the numbers.\n\nI considered myself to be smart‚Ä¶ Academically, at least. My grades heavily backed up that argument.\nAs fate would have it, I exceeded the cut-off points set for the course by a considerable margin. In September 2018, I enrolled into UoN. Or as they like to call it ‚ÄúThe University of Nairobi‚Äù, emphasis on ‚ÄúThe‚Äù. It‚Äôs said to be the largest university in our country."
  },
  {
    "objectID": "posts/how-i-ended-up-with-r/index.html#first-year-2018",
    "href": "posts/how-i-ended-up-with-r/index.html#first-year-2018",
    "title": "How I Ended Up With R",
    "section": "First year, 2018",
    "text": "First year, 2018\nI put in a lot of effort in my first year, and it paid off. The grades were nothing less than excellent. Oh - and spoiler alert - it was also the last time.\nDuring this first year, our lecturers mentioned of some papers outside the curriculum that one was supposed to take in order to become an actuary. And oh boy, weren‚Äôt they expensive!\nOne paper cost around¬†297 USD¬†at that time. Bear with me if that‚Äôs cheap to you, I‚Äôm from the other side of the wealth grid.\nStories were told of those who didn‚Äôt take the papers. They‚Äôd end up as mere salespeople for insurance companies. They could not become actuaries. That‚Äôs when it hit me. I was not going to become an actuary. A part of me was slightly disappointed.\nI started looking for alternatives. We had taken an introductory programming unit in our first semester and I found it really interesting. A friend of mine, Brian, had a desktop and since I didn‚Äôt have a laptop, I‚Äôd go to his house to learn from CS Dojo‚Äôs introductory course to python."
  },
  {
    "objectID": "posts/how-i-ended-up-with-r/index.html#second-year-2019.",
    "href": "posts/how-i-ended-up-with-r/index.html#second-year-2019.",
    "title": "How I Ended Up With R",
    "section": "Second year, 2019.",
    "text": "Second year, 2019.\nAfter exploring some options, I saw data science as a good fit since I could teach myself from online resources. It required programming knowledge, either python or R.\nI consulted with some of my classmates who seemed ‚Äúwoke‚Äù. I did not know much about computers, leave alone programming.\n‚ÄúRemember we did python in first year? I loved it and would like to learn more since I want to become a data scientist. Wdy think?‚Äù\n‚ÄúBut we‚Äôre taking actuarial science and actuaries use R all the time. Have you not heard how the lecturers keep on mentioning R? Python is not a good choice. I‚Äôd recommend R.‚Äù\nThe advice was unanimous. I took it.\nCensus was conducted that same year in Kenya and I was one of the enumerators. I used all the money I earned to get myself a laptop.¬†199.703 USD, 2019. This would turn out to be one of the best decisions I‚Äôve ever made.\nI started experimenting with R after classes but I wasn‚Äôt consistent. It seemed different and less absorbable compared to the little python I knew."
  },
  {
    "objectID": "posts/how-i-ended-up-with-r/index.html#lockdown-march-2020",
    "href": "posts/how-i-ended-up-with-r/index.html#lockdown-march-2020",
    "title": "How I Ended Up With R",
    "section": "Lockdown, March 2020",
    "text": "Lockdown, March 2020\nCovid19 hit and a countrywide lockdown was announced.\nTruth be told, I was nursing a heartbreak at that time. Dark days those!\nTo avoid being strangled and tortured by sad nigga hours, I‚Äôd wake up at 4am, learn R the whole day. By 9pm I‚Äôd be so spent that I‚Äôd just drop dead on my bed.\nDay in, day out.\nAfter around 3 months, I felt as if I had become a god at R.\n\nWe call it ‚Äúthe hand-holding honeymoon phase‚Äù.\nFour classmates had landed an internship at a big company and were being taught R. Their assignment was to rewrite some scripts in their own way. One of them told me. I‚Äôm always heavy on practice so I asked her to send me the assignment, I could also learn a thing or two.\nThe script she sent took around 7 minutes to run. I recall clearly it had 6 nested¬†for loops. Let‚Äôs just say that it worked.\nNo, no‚Ä¶ Don‚Äôt bring that ‚Äúloops are bad in R‚Äù argument here. We‚Äôve heard enough of it.\nOkay, now that you‚Äôve calmed down allow me to continue‚Ä¶\nI sat down, analyzed what it was doing and the required output. After a few hours I had finished rewriting it. And my script‚Ä¶ My script took a whooping 6 seconds to get the job done! Tell me if that isn‚Äôt some kind of god-shit! They couldn‚Äôt believe it. Neither could their manager, who I suppose was also learning R.\nI started getting some freelancing gigs from a friend of mine, Paul, mostly student university assignments. I had never had so much money in my life. For the next 3 months I would make an average of¬†425.4 USD¬†per month. Of course looking back now that isn‚Äôt a lot. But it was, back then."
  },
  {
    "objectID": "posts/how-i-ended-up-with-r/index.html#first-real-job",
    "href": "posts/how-i-ended-up-with-r/index.html#first-real-job",
    "title": "How I Ended Up With R",
    "section": "First real job",
    "text": "First real job\nAfter students went for holidays the earnings reduced drastically.\nI was learning fast. I created a linkedin account. After a few weeks ‚Äúsome guy‚Äù I had connected with messaged me and asked for my phone number.\nTo this day I‚Äôm not sure why I thought he was another person who was job hunting like me, and so I didn‚Äôt even bother to check his profile.\nSeveral weeks passed by. He called one day. I spoke to him casually, but I could detect seriousness in his voice. We talked about normal things, about life in general. We became friends, even though we‚Äôd never met. We‚Äôd call each other from time to time.\nOne day I decided to peek at his linkedin profile to see what he does. Aaand‚Ä¶ Surprise surprise! The guy was an actuarial fellow, a principal actuary and an MD at a certain company. Imagine realizing this after like 5 months of us talking!\nOn our next call I asked why he didn‚Äôt tell me. ‚ÄúIf I did we wouldn‚Äôt be friends as we are. Besides, it was out in the open. You could have looked at my profile.‚Äù Well, he was right.\nHe texted on May 2021 saying that the HR from the company would reach out to me and the discussion would be about my R skills.\nAfter an oral interview, completing a project and a final physical interview, they offered me a job as a junior software developer.\nAnd that, ladies and gentlemen, is when my career as an R developer took off.\n‚ÄúSo, what happened to actuarial science?‚Äù, you ask."
  },
  {
    "objectID": "posts/how-i-ended-up-with-r/index.html#mwavu-the-actuary",
    "href": "posts/how-i-ended-up-with-r/index.html#mwavu-the-actuary",
    "title": "How I Ended Up With R",
    "section": "Mwavu, the actuary",
    "text": "Mwavu, the actuary\nIf I said it ended well I‚Äôd be lying. Even lovers fall out. This was no exception. I lost all interest in actuarial science. To date. From 2.2 (second year, second semester) I didn‚Äôt study anything concerning the course.\nFortunately or unfortunately both classes and exams were conducted online due to covid19.\nFollowing my then heightening googling skills, getting answers from online sources proved to be easy enough and worked most of the time.\n2.2 through 3.2 was a breeze.\n\nI spent a better part of my days programming. Nothing beats the feeling of learning something that I both want and I‚Äôm super interested in."
  },
  {
    "objectID": "posts/how-i-ended-up-with-r/index.html#june-2021",
    "href": "posts/how-i-ended-up-with-r/index.html#june-2021",
    "title": "How I Ended Up With R",
    "section": "June, 2021",
    "text": "June, 2021\nI wanted to drop out after 3.2 was over but I decided to consult with friends and family first.\nLet‚Äôs go through some of the advice, each from a different person:\n‚ÄúYou‚Äôve come so far to give up now‚Äù\n‚ÄúIt‚Äôs just one year remaining‚Äù\n‚ÄúIn fact, not one year. It‚Äôs six months.‚Äù\n‚ÄúYou will never get a job. You might have been lucky this one time, but out here without a degree things are difficult.‚Äù\n‚ÄúThere is no way you‚Äôre going to shame us. We paid a lot of school fees for you to drop out now. All the loans?! What shall we tell people?‚Äù\n‚ÄúA degree is like a key. It will open doors you cannot see now. The other option is to enroll for a computer science degree. Another 4 years.‚Äù\n‚ÄúI understand, it won‚Äôt add anything to you. But just for the sake of having one, finish it.‚Äù\n‚ÄúWe‚Äôre not in the US. You‚Äôre not Steve Jobs or Mark Zuckerberg. Stop living in a utopia! If you ever want to get hired here in Kenya and get a good salary, you need to get a degree.‚Äù\nNot sure if I‚Äôve ever recovered from that last one. Damn!\nAll their arguments made sense, at least when viewed from a certain angle. The most striking thing was that none of them told me to go ahead and drop out. Not a single one!\nAt this point I hated school, or anything to do with it. I didn‚Äôt want to be there. I knew the degree was never going to help me anywhere in my career. It hasn‚Äôt, yet. I‚Äôm still waiting.üíÄ\n\n\n\n\n\n\nCaution\n\n\n\nBtw, I‚Äôm not against going to college/university. I just didn‚Äôt like it."
  },
  {
    "objectID": "posts/how-i-ended-up-with-r/index.html#fourth-year-2022",
    "href": "posts/how-i-ended-up-with-r/index.html#fourth-year-2022",
    "title": "How I Ended Up With R",
    "section": "Fourth year, 2022",
    "text": "Fourth year, 2022\nExams for both 4.1 and 4.2 were conducted physically, in the exam center. I dreaded this. I couldn‚Äôt google myself out of this one.\nAfter the first paper I actually made up my mind: I‚Äôm quitting this shit.\nCall me a lucky man but it happened that I was in the same major as my girlfriend, Brenda. She‚Äôd literally wake me up and drag me out of my room. Through her sheer force, I showed up for all the exams.\nEven before the results were out, I knew I had flopped. Who the hell goes to the exam room, writes their registration number, signs on the answer sheet as required and then ‚Äúhelps‚Äù the lecturer invigilate the other students for the rest of the time? Me. All in the name of finishing a degree I was totally disinterested in.\nOkay, I admit‚Ä¶ I have exaggerated things a bit in the paragraph above, but you get the point. I did answer some questions but I didn‚Äôt think my answers were good enough to even get me a pass.\nWhile others revised for the next day‚Äôs paper, I‚Äôd spend my time on stackoverflow going through old questions/answers and providing solutions to some. Almost all my reputation on stackoverflow can be attributed to that time period.\nBut fate, it seems, was hell-bent on ensuring I graduated. So, to my surprise, I finally did. Not with a pass, but a second class honors. Maybe I was smart after all. I guess we‚Äôll never know."
  },
  {
    "objectID": "posts/how-i-ended-up-with-r/index.html#wind-up",
    "href": "posts/how-i-ended-up-with-r/index.html#wind-up",
    "title": "How I Ended Up With R",
    "section": "Wind up",
    "text": "Wind up\n‚ÄúInteresting story you have there, Mwavu. Earlier you stated that you wanted to become a Data Scientist. Did that happen?‚Äù\nNo.¬†After I got that first job my career took a different turn: Software Development.\n‚ÄúYou use R for software dev?!‚Äù\nYes.\n‚ÄúWhy? I thought its only use is statistical & data analysis.‚Äù\nThat is what most people think. And rightly so. I am certainly not a pro at the language, but its appeal to me comes not from viewing it as a statistical & data analysis tool (which it is), but from looking at it as a programming language.\nFrom how I see it, R has so much more to offer. For one, it is unusually good at creating UIs. Take a look at this tweet for example. Second, R integrates extremely well with other languages.\nAdmittedly, the main reason I use R is because I love it. There, I said it.\nI am just not able to ditch it. I‚Äôve tried to, many times. And failed at each attempt. Maybe coz it was my first, and that first love hits hard. I just can‚Äôt seem to move on.\nIt has its quarks, but so does every other language. I‚Äôd never write a compiler using it, of course. That‚Äôd be stupid.\nAll I‚Äôm saying is if I were to go back, I‚Äôd still pick R.\nIf a day comes and the language ceases to amaze me, I shall look back and say: ‚ÄúIt was good while it lasted. And like all good things, it was bound to come to an end‚Äù.\nJust like my letter to you, dear reader.\nYours truly,\nMwavu."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, I‚Äôm Mwavu. Just typing R code.\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sections",
    "section": "",
    "text": "Sections\n\nShiny\n\n\n\nAll Posts\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\n\n\n\n\nFeb 8, 2024\n\n\nHow I Ended Up With R\n\n\n\n\nJan 6, 2024\n\n\nAutoreloadingüîÑ in Shiny\n\n\n\n\nJan 4, 2024\n\n\nInjecting üíâ tabPanelBodies into tabsetPanels\n\n\n\n\nJul 24, 2023\n\n\nThe input in function(input, output, session)\n\n\n\n\nJul 21, 2023\n\n\nBootstrap icons in Shiny\n\n\n\n\nJul 20, 2023\n\n\nJQuery Effects in Shiny\n\n\n\n\nMay 28, 2023\n\n\nAdd downLoading spinners‚Ä¶ using JS\n\n\n\n\nApr 16, 2023\n\n\nSubset every nth element from a vector\n\n\n\n\nFeb 26, 2023\n\n\nDefensive Programming\n\n\n\n\nFeb 21, 2023\n\n\nAdd downLoading spinners\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "authentication-in-r-shiny.html",
    "href": "authentication-in-r-shiny.html",
    "title": "Series: Authentication in R Shiny",
    "section": "",
    "text": "Many are the times you develop an in-house app for your organization. Two conditions must be met:\n\nA user can only access the app if and only if they are part of your organization ie. using the company email\nOnly certain users can access some parts of the app eg. the admin section\n\nAll I ever wanted was to build an app that felt intuitive:\n\na landing page,\na sign-in/up section, and\nthe app itself\n\nFor a long time I could not figure out how to build the sign-in/up section. The options I found online didn‚Äôt suit my needs either.\nWhich brings us to the topic of this series‚Ä¶\nShiny doesn‚Äôt have in-built features for user authentication or authorization.\nI found 2 remarkable packages which solve that problem:\n\npolished\nfirebase\n\nThey are easy enough to get started with, but not a walk in the park if you want the good stuff. By ‚Äúgood stuff‚Äù I mean detailed customization.\nI‚Äôm not here to show you the easy part, I‚Äôm here for the hard part."
  },
  {
    "objectID": "authentication-in-r-shiny.html#user-authentication-authorization",
    "href": "authentication-in-r-shiny.html#user-authentication-authorization",
    "title": "Series: Authentication in R Shiny",
    "section": "",
    "text": "Many are the times you develop an in-house app for your organization. Two conditions must be met:\n\nA user can only access the app if and only if they are part of your organization ie. using the company email\nOnly certain users can access some parts of the app eg. the admin section\n\nAll I ever wanted was to build an app that felt intuitive:\n\na landing page,\na sign-in/up section, and\nthe app itself\n\nFor a long time I could not figure out how to build the sign-in/up section. The options I found online didn‚Äôt suit my needs either.\nWhich brings us to the topic of this series‚Ä¶\nShiny doesn‚Äôt have in-built features for user authentication or authorization.\nI found 2 remarkable packages which solve that problem:\n\npolished\nfirebase\n\nThey are easy enough to get started with, but not a walk in the park if you want the good stuff. By ‚Äúgood stuff‚Äù I mean detailed customization.\nI‚Äôm not here to show you the easy part, I‚Äôm here for the hard part."
  },
  {
    "objectID": "authentication-in-r-shiny.html#posts-in-this-series",
    "href": "authentication-in-r-shiny.html#posts-in-this-series",
    "title": "Series: Authentication in R Shiny",
    "section": "Posts in this series",
    "text": "Posts in this series"
  },
  {
    "objectID": "posts/the-input-in-server-function/index.html",
    "href": "posts/the-input-in-server-function/index.html",
    "title": "The input in function(input, output, session)",
    "section": "",
    "text": "I recently came across this stackoverflow post from 6 years ago and I was intrigued.\nThe OP wanted to render a dynamic number of selectInputs. The number of the selectInputs would be dependent on the value of a numericInput.\nIf the numericInput had a value of 3 then there would be 3 selectInputs on the UI.\nThe OP correctly made this observation:\n\nSay the default value of the numericInput is 3. If you change it to 2, the UI correctly updates and there are only 2 selectInputs. But when you print the input object, it still contains the id and value of the 3rd selectInput even though it is not currently rendered.\nGenerally, the input slot does not correspond with the current number of elements, but with the largest number chosen during the session.\n\nHere is the reprex the OP provided:\n\n\nreprex-from-op.R\n\nlibrary(shiny)\nlibrary(plyr)\n\ntestUI &lt;- function(id) {\n  ns &lt;- NS(id)\n  uiOutput(ns(\"container\"))\n}\n\ntest &lt;- function(input, output, session, numElems) {\n   output$container &lt;- renderUI(do.call(tagList, llply(1:numElems(), function(i) \n            selectInput(session$ns(paste0(\"elem\", i)), \n                        label = i, choices = LETTERS[sample(26, 3)]))))\n   getNames &lt;- reactive(reactiveValuesToList(input))\n   list(getNames = getNames)\n}\n\nui &lt;- fluidPage(numericInput(\"n\", \"Number of Elems\", value = 3), \n                testUI(\"column1\"), \n                verbatimTextOutput(\"debug\"))\n\nserver &lt;- function(input, output, session) {\n   getN &lt;- reactive(input$n)\n   handler &lt;- callModule(test, \"column1\", getN)\n   output$debug &lt;- renderPrint(handler$getNames())\n}\n\nshinyApp(ui, server)\n\nMy manager at work always says ‚ÄúTrust but verify‚Äù. So please run the reprex and ascertain that all the above observations are indeed true."
  },
  {
    "objectID": "posts/the-input-in-server-function/index.html#introduction",
    "href": "posts/the-input-in-server-function/index.html#introduction",
    "title": "The input in function(input, output, session)",
    "section": "",
    "text": "I recently came across this stackoverflow post from 6 years ago and I was intrigued.\nThe OP wanted to render a dynamic number of selectInputs. The number of the selectInputs would be dependent on the value of a numericInput.\nIf the numericInput had a value of 3 then there would be 3 selectInputs on the UI.\nThe OP correctly made this observation:\n\nSay the default value of the numericInput is 3. If you change it to 2, the UI correctly updates and there are only 2 selectInputs. But when you print the input object, it still contains the id and value of the 3rd selectInput even though it is not currently rendered.\nGenerally, the input slot does not correspond with the current number of elements, but with the largest number chosen during the session.\n\nHere is the reprex the OP provided:\n\n\nreprex-from-op.R\n\nlibrary(shiny)\nlibrary(plyr)\n\ntestUI &lt;- function(id) {\n  ns &lt;- NS(id)\n  uiOutput(ns(\"container\"))\n}\n\ntest &lt;- function(input, output, session, numElems) {\n   output$container &lt;- renderUI(do.call(tagList, llply(1:numElems(), function(i) \n            selectInput(session$ns(paste0(\"elem\", i)), \n                        label = i, choices = LETTERS[sample(26, 3)]))))\n   getNames &lt;- reactive(reactiveValuesToList(input))\n   list(getNames = getNames)\n}\n\nui &lt;- fluidPage(numericInput(\"n\", \"Number of Elems\", value = 3), \n                testUI(\"column1\"), \n                verbatimTextOutput(\"debug\"))\n\nserver &lt;- function(input, output, session) {\n   getN &lt;- reactive(input$n)\n   handler &lt;- callModule(test, \"column1\", getN)\n   output$debug &lt;- renderPrint(handler$getNames())\n}\n\nshinyApp(ui, server)\n\nMy manager at work always says ‚ÄúTrust but verify‚Äù. So please run the reprex and ascertain that all the above observations are indeed true."
  },
  {
    "objectID": "posts/the-input-in-server-function/index.html#my-0.02",
    "href": "posts/the-input-in-server-function/index.html#my-0.02",
    "title": "The input in function(input, output, session)",
    "section": "My $0.02",
    "text": "My $0.02\n\nJackie Redmond Jackie GIFfrom Jackie Redmond GIFs\n\n\nThe OP had 2 questions:\n\nIs this behaviour intentional?\nIf so, how can I update the input to assure that it only contains valid slots?\n\n\nTL;DR\n\nIs this behaviour intentional?\n\nI don‚Äôt know. But it is consistent. The OP used renderUI in the reprex, I will use insertUI/removeUI in my reprex later and you will see that the behaviour is the same.\n\nHow can I update the input to assure that it only contains valid slots?\n\nYou can set the ‚Äúinvalid‚Äù slots to NULL, then use req() or isTruthy() to check for validity in your server.R.\n\n\nExplanation\nWe finally get to the juicy part.\nHere‚Äôs what I know about input:\n\ninput is immutable from the app‚Äôs server, unless you use update*Input(). eg. If you try this:\n\n\nserver.R\n\ninput$random_id &lt;- \"trial\"\n\nyou will get an error: ‚ÄúCan‚Äôt modify read-only reactive value ‚Äòrandom_id‚Äô‚Äù.\nOnce added, you can‚Äôt remove an element (an input id) from input, but you can change its value (using update*Input() or JavaScript).\nChanging the value of an element to NULL will not remove it from input.\nBy that I mean input will not behave like a regular list where setting the value of an element to NULL removes it from the list:\n\n\nregular-list.R\n\nx &lt;- list(a = 1, b = 2, c = 3)\nx$a &lt;- NULL\nx\n\n# $b\n# [1] 2\n#\n# $c\n# [1] 3\n\nAlso, you can‚Äôt use update*Input() to set the value of an input id to NULL. From ?updateSelectInput:\n\nAny arguments with NULL values will be ignored; they will not result in any changes to the input object on the client.\n\nSo to set the value of an input element to NULL you have to use JavaScript and provide the option priority: \"event\". Reference.\n\n\nscript.js\n\nShiny.setInputValue(input_id, new_input_value, {priority: \"event\"});\n\nWe can use 3 above to our advantage: Set the unwanted input id values (the ones whose UI has been removed/deleted) to NULL.\nThis is what will allow us to use req() or isTruthy() if need be."
  },
  {
    "objectID": "posts/the-input-in-server-function/index.html#reprex",
    "href": "posts/the-input-in-server-function/index.html#reprex",
    "title": "The input in function(input, output, session)",
    "section": "Reprex",
    "text": "Reprex\nIn the reprex below, I show how you can set the input id values to NULL.\nAlso, I use insertUI/removeUI as stated earlier.\n\n\n\nglobal.R\n\nlibrary(shiny)\n\n\n\nui.R\n\nui &lt;- fluidPage(\n  numericInput(\"n\", \"Number of Elems\", value = 3), \n  mod_test_ui(\"column1\"), \n  verbatimTextOutput(\"debug\"),\n  tags$script(src = \"script.js\")\n)\n\n\n\nserver.R\n\nserver &lt;- function(input, output, session) {\n  handler &lt;- mod_test_server(\n    id = \"column1\",\n    numElems = reactive({ input$n })\n  )\n  output$debug &lt;- renderPrint({ handler$getNames() })\n}\n\n\n\nR/mod_test_ui.R\n\nmod_test_ui &lt;- function(id) {\n  ns &lt;- NS(id)\n  tags$div(id = ns(\"container\"))\n}\n\n\n\nR/mod_test_ui.R\n\n\n\nR/mod_test_server.R\n\nmod_test_server &lt;- \\(id, numElems) {\n  moduleServer(\n    id = id,\n    module = \\(input, output, session) {\n      ns &lt;- session$ns\n      # reactive to track added UI ids:\n      rv_added_ids &lt;- reactiveValues(ids = NULL)\n      observeEvent(numElems(), {\n        # do nothing if `numElems()` is less than zero:\n        n &lt;- numElems()\n        if (n &lt; 0) return()\n        # remove previously rendered UIs:\n        removeUI(\n          selector = sprintf(\"#%s &gt; *\", ns(\"container\")),\n          multiple = TRUE,\n          immediate = TRUE\n        )\n        # inform JS to set the removed input id values to NULL:\n        lapply(rv_added_ids$ids, \\(id) {\n          session$sendCustomMessage(\n            type = \"set_to_null\",\n            list(id = id, value = NULL)\n          )\n        })\n        # reset tracker:\n        rv_added_ids$ids &lt;- NULL\n        # add new UIs:\n        lapply(seq_len(n), \\(i) {\n          id &lt;- ns(paste0(\"elem\", i))\n          # track new id:\n          rv_added_ids$ids &lt;- c(rv_added_ids$ids, id)\n          insertUI(\n            selector = paste0(\"#\", ns(\"container\")),\n            where = \"beforeEnd\",\n            ui = selectInput(\n              inputId = id, \n              label = i,\n              choices = LETTERS[sample(26, 3)]\n            )\n          )\n        }\n        )\n      })\n      getNames &lt;- reactive(reactiveValuesToList(input))\n      list(getNames = getNames)\n    }\n  )\n}\n\n\n\nwww/script.js\n\n$(document).ready(function() {\n  Shiny.addCustomMessageHandler(\"set_to_null\", (message) =&gt; {\n    Shiny.setInputValue(message.id, message.value, {priority: \"event\"});\n  });\n});"
  },
  {
    "objectID": "posts/the-input-in-server-function/index.html#conclusion",
    "href": "posts/the-input-in-server-function/index.html#conclusion",
    "title": "The input in function(input, output, session)",
    "section": "Conclusion",
    "text": "Conclusion\n$(this) has been the input in function(input, output, session).\nMe: At this point I can confidently say that I like JavaScript.\nJS:"
  },
  {
    "objectID": "posts/shiny/download-button-spinner/index.html#introduction",
    "href": "posts/shiny/download-button-spinner/index.html#introduction",
    "title": "Add downLoading spinners",
    "section": "Introduction",
    "text": "Introduction\n\n\nI hope nobody is reading. But if you are, then keep this to yourself.\n\n\nMwavu\n\n\nOftentimes you have a large dataset that takes a while to download. To give your users a visual cue that the download is in progress, you can (and should) add spinners to your download buttons."
  },
  {
    "objectID": "posts/shiny/download-button-spinner/index.html#the-module",
    "href": "posts/shiny/download-button-spinner/index.html#the-module",
    "title": "Add downLoading spinners",
    "section": "The module",
    "text": "The module\nLet‚Äôs first create a basic download button module that we can build upon.\nWe‚Äôll create an action button that will trigger the download (Yes, you read that right, an action button).\nWe‚Äôll then add the real download button but it will be hidden.\n\n\nR/mod_dnld_ui.R\n\n#' Download button module UI\n#' @param id Module ID\n#' @return [shiny::tagList()]\nmod_dnld_ui &lt;- function(id) {\n  ns &lt;- shiny::NS(id)\n\n  shiny::tagList(\n    # Trigger button:\n    shiny::actionButton(\n      inputId = ns(\"actbtn\"),\n      label = htmltools::doRenderTags(\n        shiny::tags$span(\n          shiny::icon(\"download\"),\n          \"Download\"\n        )\n      )\n    ),\n\n    # Real download button:\n    shiny::downloadButton(\n      outputId = ns(\"dnld\"),\n      label = NULL,\n      style = \"visibility: hidden;\"\n    )\n  )\n}\n\nThe basic server piece is also as simple:\n\n\nR/mod_dnld_server.R\n\n#' Download button module server\n#' @param id Module ID\n#' @param given_data Data to download, as a reactive.\n#' @param filename Filename to use for download.\n#' @return NULL\nmod_dnld_server &lt;- function(\n  id,\n  given_data = reactive({iris}),\n  filename = \"iris.csv\"\n) {\n  stopifnot(\n    \"`given_data` must be a reactive\" = is.reactive(given_data)\n  )\n\n  shiny::moduleServer(\n    id = id,\n    module = function(input, output, session) {\n      output$dnld &lt;- downloadHandler(\n        filename = filename,\n        content = function(file) {\n          write.csv(given_data(), file)\n        }\n      )\n    }\n  )\n}\n\nIt takes in a reactive data object (given_data) and a filename. The rest is normal stuff.\nWe can now move on to adding the download button spinner."
  },
  {
    "objectID": "posts/shiny/download-button-spinner/index.html#adding-a-spinner-to-the-download-button",
    "href": "posts/shiny/download-button-spinner/index.html#adding-a-spinner-to-the-download-button",
    "title": "Add downLoading spinners",
    "section": "Adding a spinner to the download button",
    "text": "Adding a spinner to the download button\nSpoiler alert: mod_dnld_ui is done. We‚Äôll work on mod_dnld_server from now on.\nIn the server module, we‚Äôll use shiny::observeEvent to listen for clicks on the action button.\nWhen the button is clicked, we update its label to show a spinner and a message indicating that the download is in progress.\nWe then trigger a click on the real download button using shinyjs::click:\n\n\nR/mod_dnld_server.R\n\nshiny::observeEvent(input$actbtn, {\n  # update label of 'actbtn':\n  shiny::updateActionButton(\n    session = session,\n    inputId = \"actbtn\",\n    label = htmltools::doRenderTags(\n      shiny::tags$span(\n        class = \"d-flex align-items-center\",\n        shiny::tags$span(\n          class = \"spinner-border spinner-border-sm\",\n          role = \"status\",\n          `aria-hidden` = \"true\"\n        ),\n        shiny::tags$span(\n          class = \"mx-1\",\n          \"Downloading...\"\n        )\n      )\n    )\n  )\n\n  # simulate click on 'dnld' btn:\n  shinyjs::delay(\n    ms = 2 * 1e3,\n    expr = shinyjs::click(id = \"dnld\")\n  )\n})\n\nTwo things to note here:\n\nI use Bootstrap 5 classes.\nI use shinyjs::delay to, well, delay the click for 2 seconds. Wanna know why?\n\n\n\n\nNext, after the download is complete, we need to update the label of the action button back to its original value.\n\n\nR/mod_dnld_server.R\n\noutput$dnld &lt;- downloadHandler(\n  filename = filename,\n  content = function(file) {\n    # on exit, update 'actbtn' label:\n    on.exit({\n      shiny::updateActionButton(\n        session = session,\n        inputId = \"actbtn\",\n        label = htmltools::doRenderTags(\n          shiny::tags$span(\n            shiny::icon(\"download\"),\n            \"Download\"\n          )\n        )\n      )\n    })\n\n    # write data to file:\n    write.csv(given_data(), file)\n  }\n)\n\n?on.exit:\n\non.exit records the expression given as its argument as needing to be executed when the current function exits (either naturally or as the result of an error). This is useful for resetting graphical parameters or performing other cleanup actions.\n\nIn our case, we‚Äôre performing a cleanup action: updating the label of the action button back to its original state.\nThe complete module server function is as follows:\n\n\nR/mod_dnld_server.R\n\n#' Download button module server\n#' @param id Module id\n#' @param given_data Data to download, as a reactive.\n#' @param filename Filename to use for download.\n#' @return NULL\nmod_dnld_server &lt;- function(\n    id,\n    given_data = reactive({\n      iris\n    }),\n    filename = \"iris.csv\") {\n  stopifnot(\n    \"`given_data` must be a reactive\" = is.reactive(given_data)\n  )\n\n  shiny::moduleServer(\n    id = id,\n    module = function(input, output, session) {\n      shiny::observeEvent(input$actbtn, {\n        # update label of 'actbtn':\n        shiny::updateActionButton(\n          session = session,\n          inputId = \"actbtn\",\n          label = htmltools::doRenderTags(\n            shiny::tags$span(\n              class = \"d-flex align-items-center\",\n              shiny::tags$span(\n                class = \"spinner-border spinner-border-sm\",\n                role = \"status\",\n                `aria-hidden` = \"true\"\n              ),\n              shiny::tags$span(\n                class = \"mx-1\",\n                \"Downloading...\"\n              )\n            )\n          )\n        )\n\n        # simulate click on 'dnld' btn:\n        shinyjs::delay(\n          ms = 2 * 1e3,\n          expr = shinyjs::click(id = \"dnld\")\n        )\n      })\n\n      output$dnld &lt;- downloadHandler(\n        filename = filename,\n        content = function(file) {\n          # on exit, update 'actbtn' label:\n          on.exit({\n            shiny::updateActionButton(\n              session = session,\n              inputId = \"actbtn\",\n              label = htmltools::doRenderTags(\n                shiny::tags$span(\n                  shiny::icon(\"download\"),\n                  \"Download\"\n                )\n              )\n            )\n          })\n\n          # write data to file:\n          write.csv(given_data(), file)\n        }\n      )\n    }\n  )\n}"
  },
  {
    "objectID": "posts/shiny/download-button-spinner/index.html#putting-it-all-together",
    "href": "posts/shiny/download-button-spinner/index.html#putting-it-all-together",
    "title": "Add downLoading spinners",
    "section": "Putting it all together",
    "text": "Putting it all together\nNow that we have the module UI and server parts, we can put them together in a shiny app.\nThe app is as simple as it can get:\nui &lt;- bslib::page(\n  theme = bslib::bs_theme(version = 5),\n  shinyjs::useShinyjs(),\n\n  shiny::tags$div(\n    class = \"bg-light\",\n\n    shiny::tags$div(\n    class = paste(\n      \"container min-vh-100\",\n      \"d-flex justify-content-center align-items-center bg-white\"\n    ),\n\n    # module UI:\n    shiny::tags$div(\n      mod_dnld_ui(\"this\")\n    )\n  )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  # module server:\n  mod_dnld_server(\"this\")\n}\n\nshiny::shinyApp(ui, server)\nThe full code is available on this GitHub Gist."
  },
  {
    "objectID": "posts/shiny/defensive-programming/index.html",
    "href": "posts/shiny/defensive-programming/index.html",
    "title": "Defensive Programming",
    "section": "",
    "text": "I hope nobody is reading. But if you are, then keep this to yourself.\n\n\nMwavu\n\n\nYour prod app should never have to fail, crash or display arcane red lines of errors on the UI.\nIf it has to, it should do so gracefully and with dignity. Only then will you have an easy time convincing the client that it‚Äôs a six-legged feature, not a bug."
  },
  {
    "objectID": "posts/shiny/defensive-programming/index.html#introduction",
    "href": "posts/shiny/defensive-programming/index.html#introduction",
    "title": "Defensive Programming",
    "section": "",
    "text": "I hope nobody is reading. But if you are, then keep this to yourself.\n\n\nMwavu\n\n\nYour prod app should never have to fail, crash or display arcane red lines of errors on the UI.\nIf it has to, it should do so gracefully and with dignity. Only then will you have an easy time convincing the client that it‚Äôs a six-legged feature, not a bug."
  },
  {
    "objectID": "posts/shiny/defensive-programming/index.html#when-do-errors-arise",
    "href": "posts/shiny/defensive-programming/index.html#when-do-errors-arise",
    "title": "Defensive Programming",
    "section": "When do errors arise?",
    "text": "When do errors arise?\nMost, if not all, application errors occur when you‚Äôre trying to perform an operation on data. This can be during app startup or in response to user action.\nCommon cases are:\n\nMathematical calculations eg. +, -, *, /\nData manipulations eg. subsetting (iris[, \"Sepal.Length\"])"
  },
  {
    "objectID": "posts/shiny/defensive-programming/index.html#defensive-programming",
    "href": "posts/shiny/defensive-programming/index.html#defensive-programming",
    "title": "Defensive Programming",
    "section": "Defensive programming",
    "text": "Defensive programming\nDefensive programming is an approach to software development that focuses on anticipating and preventing potential errors, bugs, and vulnerabilities in the code.\nThe fundamental concept of this approach is to develop a program that can function correctly even in the presence of unforeseen circumstances or when users enter unexpected inputs.\nWe‚Äôll focus on 2 key principles of defensive programming, both at the same time:\n\nValidating inputs: Checking that all input values are within expected ranges or formats, and handling unexpected input values appropriately.\nHandling errors: Catching and handling errors/exceptions in a way that allows the program to recover gracefully, without crashing or losing data\n\nThat‚Äôs where tryCatch comes in!"
  },
  {
    "objectID": "posts/shiny/defensive-programming/index.html#trycatch",
    "href": "posts/shiny/defensive-programming/index.html#trycatch",
    "title": "Defensive Programming",
    "section": "tryCatch()",
    "text": "tryCatch()\nThe basic syntax of tryCatch() is this:\n\n\ntrycatch.R\n\nresult &lt;- tryCatch(\n  expr = {\n    # Code block to be executed\n  },\n  error = \\(e) {\n    # Error handling code\n  },\n  warning = \\(w) {\n    # Warning handling code\n  },\n  finally = {\n    # Do this, regardless of success or failure of 'expr' block\n  }\n)\n\n\n\n\n\n\n\nMental model:\n\n\n\n\n\nHey R, I have this block of code. I‚Äôm not sure if it‚Äôs flawless, but I need you to try and run it.  In case you encounter issues, here‚Äôs how you should proceed depending on the scenario:\n\nDid it throw an error? Then do &lt;error handling&gt;\nDid it give a warning? Then run this &lt;warning handling chunk&gt;\nFinally, regardless of whether it ran successfully or failed, please do &lt;finally block&gt;"
  },
  {
    "objectID": "posts/shiny/defensive-programming/index.html#hands-on",
    "href": "posts/shiny/defensive-programming/index.html#hands-on",
    "title": "Defensive Programming",
    "section": "Hands-On",
    "text": "Hands-On\nPractical examples have been a great way for me to learn new concepts.\nBe sure to go through the examples thoroughly and see if you can remake similar ones of your own.\n\nExample 1: Generic errors & warnings\nIn case of an error or a warning during an operation, inform the user that something unexpected happened and show a glimpse of what might have went wrong.\n\n\napp.R\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  shinytoastr::useToastr(),\n  \n  tags$div(\n    class = \"container\",\n    align = \"center\",\n    \n    selectInput(\n      inputId = \"cols\",\n      label = \"Choose one or more columns\",\n      choices = c(names(iris), \"Unknown Column\"),\n      multiple = TRUE\n    ),\n    \n    DT::DTOutput(outputId = \"table\")\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  output$table &lt;- DT::renderDT({\n    tryCatch(\n      expr = {\n        { iris |&gt; dplyr::select(dplyr::all_of(input$cols)) } * 100\n      },\n      error = \\(e) {\n        shinytoastr::toastr_error(\n          title = \"Error in calculation\",\n          message = conditionMessage(e)\n        )\n      },\n      warning = \\(w) {\n        shinytoastr::toastr_warning(\n          title = \"Warning!\",\n          message = conditionMessage(w)\n        )\n      }\n    )\n  })\n}\n\nshinyApp(ui, server)\n\n\n\nExample 2: Custom errors & warnings\nSometimes you can choose to be more informative and specific. In this example, we tell the user what exactly went wrong.\nOn top of that, we leave room for unforeseen causes of errors & warnings.\n\n\napp.R\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  shinytoastr::useToastr(),\n  \n  tags$div(\n    class = \"container\",\n    align = \"center\",\n    \n    selectInput(\n      inputId = \"cols\",\n      label = \"Choose one or more columns\",\n      choices = c(names(iris), \"Unknown Column\"),\n      multiple = TRUE\n    ),\n    \n    DT::DTOutput(outputId = \"table\")\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  output$table &lt;- DT::renderDT({\n    cols &lt;- input$cols\n    req(cols)\n    \n    tryCatch(\n      expr = {\n        if (\"Species\" %in% cols) {\n          shinytoastr::toastr_warning(\n            title = \"Omitting column 'Species'\",\n            message = \"Cannot perform multiplication on a factor\"\n          )\n          \n          cols &lt;- setdiff(cols, \"Species\")\n        }\n        \n        if (\"Unknown Column\" %in% cols) {\n          shinytoastr::toastr_error(\n            title = \"Omitting 'Uknown Column'\",\n            message = \"Cannot subset columns which don't exist\"\n          )\n          \n          cols &lt;- setdiff(cols, \"Unknown Column\")\n        }\n        \n        { iris |&gt; dplyr::select(dplyr::all_of(cols)) } * 100\n      },\n      \n      # in case of other unforeseen errors & warnings:\n      error = \\(e) {\n        shinytoastr::toastr_error(\n          title = \"Error in calculation\",\n          message = conditionMessage(e)\n        )\n      },\n      warning = \\(w) {\n        shinytoastr::toastr_warning(\n          title = \"Warning!\",\n          message = conditionMessage(w)\n        )\n      }\n    )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "posts/shiny/bootstrap-icons-in-shiny/index.html",
    "href": "posts/shiny/bootstrap-icons-in-shiny/index.html",
    "title": "Bootstrap icons in Shiny",
    "section": "",
    "text": "Today‚Äôs one of those days when I‚Äôm like ‚ÄúMaybe I‚Äôm here for some easy parts after all‚Äù.\nI have an excuse though, hoping you‚Äôll buy it. ü§ûüèΩ\nWhen I was a beginner in shiny (Does one actually ever stop being a beginner?), every other website I visited had some cool icons.\nI couldn‚Äôt for the life of me figure out how to use another icon library apart from shiny‚Äôs default ones (Free fontawesome kit and glyphicons).\nIn short, this post is more of me narrating to my younger self how I finally made it.\n\nGood thing is that younger me didn‚Äôt know a lot and so it won‚Äôt take much to impress him, meaning this is going to be short."
  },
  {
    "objectID": "posts/shiny/bootstrap-icons-in-shiny/index.html#introduction",
    "href": "posts/shiny/bootstrap-icons-in-shiny/index.html#introduction",
    "title": "Bootstrap icons in Shiny",
    "section": "",
    "text": "Today‚Äôs one of those days when I‚Äôm like ‚ÄúMaybe I‚Äôm here for some easy parts after all‚Äù.\nI have an excuse though, hoping you‚Äôll buy it. ü§ûüèΩ\nWhen I was a beginner in shiny (Does one actually ever stop being a beginner?), every other website I visited had some cool icons.\nI couldn‚Äôt for the life of me figure out how to use another icon library apart from shiny‚Äôs default ones (Free fontawesome kit and glyphicons).\nIn short, this post is more of me narrating to my younger self how I finally made it.\n\nGood thing is that younger me didn‚Äôt know a lot and so it won‚Äôt take much to impress him, meaning this is going to be short."
  },
  {
    "objectID": "posts/shiny/bootstrap-icons-in-shiny/index.html#demo",
    "href": "posts/shiny/bootstrap-icons-in-shiny/index.html#demo",
    "title": "Bootstrap icons in Shiny",
    "section": "Demo",
    "text": "Demo\n\nBootstrap Icons is a free and open source library:\n\nIt has many icons you can choose from (over 1800 at the time of writing this)\nYou can style each of the icons as you wish"
  },
  {
    "objectID": "posts/shiny/bootstrap-icons-in-shiny/index.html#importing",
    "href": "posts/shiny/bootstrap-icons-in-shiny/index.html#importing",
    "title": "Bootstrap icons in Shiny",
    "section": "Importing",
    "text": "Importing\nTo use the icons, you first need to import them. You can do so:\n\nIn the header of your UI using tags$link, or,\nIn your css file using @import.\n\nLet‚Äôs go with the first option.\nHead over to the website, find the CDN (Content Delivery Network) link and copy it.\n\n\n\n\n\n\nTip\n\n\n\nOnce on the website, press CTRL + F and type in cdn. The page will scroll directly to the cdn link.\nIf you‚Äôre on Mac I think COMMAND + F should work.\n\n\nNow let‚Äôs add it to our UI:\n\n\nui.R\n\nui &lt;- bslib::page(\n  title = \"Bootstrap Icons\",\n  theme = bslib::bs_theme(version = 5),\n  tags$head(\n    tags$link(\n      rel = \"stylesheet\",\n      href = \"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\"\n    )\n  )\n)"
  },
  {
    "objectID": "posts/shiny/bootstrap-icons-in-shiny/index.html#usage",
    "href": "posts/shiny/bootstrap-icons-in-shiny/index.html#usage",
    "title": "Bootstrap icons in Shiny",
    "section": "Usage",
    "text": "Usage\nWe will use the &lt;i&gt; html tag to add icons to our app. In shiny, this is equivalent to tags$i().\nOn the Bootstrap icons website click on any icon. You should be able to see the &lt;i&gt; tag for the icon. Copy the class.\nNow back in your shiny app, you can use tags$i(class = \"what-you-copied\") eg.\ntags$i(class = \"bi bi-x-circle\")\nWhich should show this:"
  },
  {
    "objectID": "posts/shiny/bootstrap-icons-in-shiny/index.html#styling",
    "href": "posts/shiny/bootstrap-icons-in-shiny/index.html#styling",
    "title": "Bootstrap icons in Shiny",
    "section": "Styling",
    "text": "Styling\nFeel free to style the icons to your app‚Äôs theme.\nFor me, I‚Äôm okay using Bootstrap 5 classes on the icons. Here are 2 examples showing how you can customize the icons‚Äô appearance:\n\nColor\nTo change the color, add the text-* classes.\ntags$div(\n  tags$i(class = \"bi bi-x-circle text-success\"),\n  tags$i(class = \"bi bi-x-circle text-danger\"),\n  tags$i(class = \"bi bi-x-circle text-warning\"),\n  tags$i(class = \"bi bi-x-circle text-primary\")\n)\n   \n\n\nSize\nYou can use the fs-* classes to change the size of an icon.\ntags$div(\n  tags$i(class = \"bi bi-x-circle text-success fs-1\"),\n  tags$i(class = \"bi bi-x-circle text-danger fs-2\"),\n  tags$i(class = \"bi bi-x-circle text-warning fs-3\"),\n  tags$i(class = \"bi bi-x-circle text-primary fs-4\")\n)"
  },
  {
    "objectID": "posts/shiny/bootstrap-icons-in-shiny/index.html#tables",
    "href": "posts/shiny/bootstrap-icons-in-shiny/index.html#tables",
    "title": "Bootstrap icons in Shiny",
    "section": "Tables",
    "text": "Tables\nYou can as well use the icons in tables. I will demonstrate this using {DT}.\n\n\nui.R\n\nDT::DTOutput(outputId = \"thetable\")\n\n\n\nserver.R\n\n# up, down and side arrow icons:\nup &lt;- tags$i(class = \"bi bi-arrow-up-circle-fill text-success\") |&gt;\n  as.character()\ndown &lt;- tags$i(class = \"bi bi-arrow-down-circle-fill text-danger\") |&gt;\n  as.character()\nside &lt;- tags$i(class = \"bi bi-arrow-left-right text-primary\") |&gt;\n  as.character()\n\n# make an example data.frame:\na &lt;- sample(LETTERS, size = 10, replace = TRUE)\nb &lt;- sample(1:10, size = 10, replace = TRUE)\nc &lt;- ifelse(b &gt; 7, up, ifelse(b &gt; 4, side, down))\nDT &lt;- data.frame(a, b, c)\n\nserver &lt;- \\(input, output, session) {\n  output$thetable &lt;- DT::renderDT({\n    DT::datatable(DT, escape = FALSE, rownames = FALSE)\n  })\n}\n\nTwo things to note here:\n\nWe converted the icons to character format since a dataframe cannot contain an object of class shiny.tag\nWe set the option escape = FALSE in DT::datatable() to avoid escaping html entities in the table (our icons). So instead of them being showed as characters, they will be parsed to real html tags.\n\nThe resulting table should be the same as the one in the demo."
  },
  {
    "objectID": "posts/shiny/bootstrap-icons-in-shiny/index.html#app",
    "href": "posts/shiny/bootstrap-icons-in-shiny/index.html#app",
    "title": "Bootstrap icons in Shiny",
    "section": "App",
    "text": "App\nHere‚Äôs the complete app:\n\n\nglobal.R\n\nlibrary(shiny)\n\n\n\nShow UI code\n\n\n\nui.R\n\none_to_nine &lt;- paste0(\"bi bi-\", 0:9, \"-circle\")\n\nui &lt;- bslib::page(\n  title = \"Bootstrap Icons\",\n  theme = bslib::bs_theme(version = 5),\n  tags$head(\n    tags$link(\n      rel = \"stylesheet\",\n      href = \"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\"\n    )\n  ),\n  tags$div(\n    class = \"container\",\n    tags$h1(\"Bootstrap Icons\"),\n    lapply(one_to_nine, \\(x) tags$i(class = x)),\n    tags$div(\n      tags$i(class = \"bi bi-x-circle text-success\"),\n      tags$i(class = \"bi bi-x-circle text-danger\"),\n      tags$i(class = \"bi bi-x-circle text-warning\"),\n      tags$i(class = \"bi bi-x-circle text-primary\")\n    ),\n    tags$div(\n      tags$i(class = \"bi bi-x-circle text-success fs-1\"),\n      tags$i(class = \"bi bi-x-circle text-danger fs-2\"),\n      tags$i(class = \"bi bi-x-circle text-warning fs-3\"),\n      tags$i(class = \"bi bi-x-circle text-primary fs-4\")\n    ),\n    fluidRow(\n      class = \"mt-4\",\n      column(\n        width = 6,\n        DT::DTOutput(outputId = \"thetable\")\n      )\n    )\n  )\n)\n\n\n\n\nShow server code\n\n\n\nserver.R\n\n# up, down and side arrow icons:\nup &lt;- tags$i(class = \"bi bi-arrow-up-circle-fill text-success\") |&gt;\n  as.character()\ndown &lt;- tags$i(class = \"bi bi-arrow-down-circle-fill text-danger\") |&gt;\n  as.character()\nside &lt;- tags$i(class = \"bi bi-arrow-left-right text-primary\") |&gt;\n  as.character()\n\n# make an example data.frame:\na &lt;- sample(LETTERS, size = 10, replace = TRUE)\nb &lt;- sample(1:10, size = 10, replace = TRUE)\nc &lt;- ifelse(b &gt; 7, up, ifelse(b &gt; 4, side, down))\nDT &lt;- data.frame(a, b, c)\n\nserver &lt;- \\(input, output, session) {\n  output$thetable &lt;- DT::renderDT({\n    DT::datatable(DT, escape = FALSE, rownames = FALSE)\n  })\n}"
  },
  {
    "objectID": "posts/shiny/bootstrap-icons-in-shiny/index.html#conclusion",
    "href": "posts/shiny/bootstrap-icons-in-shiny/index.html#conclusion",
    "title": "Bootstrap icons in Shiny",
    "section": "Conclusion",
    "text": "Conclusion\n$(this) has been Bootstrap icons in Shiny."
  },
  {
    "objectID": "posts/shiny/download-button-spinner-js/index.html#introduction",
    "href": "posts/shiny/download-button-spinner-js/index.html#introduction",
    "title": "Add downLoading spinners‚Ä¶ using JS",
    "section": "Introduction",
    "text": "Introduction\nIn an older post I explained how to add loading spinners to download buttons when the download is in progress using shinyjs.\nI did so by rendering a fake download button which, when clicked, triggered the real download button. Honestly, it was kind of cumbersome.\nToday, as I was walking in the streets of R Shiny articles by Posit, I came across JavaScript events in shiny.\nI was intrigued. It opened my eyes to the endless possibilities of using JS with shiny. This blog post is just the tip of that iceberg."
  },
  {
    "objectID": "posts/shiny/download-button-spinner-js/index.html#motivation",
    "href": "posts/shiny/download-button-spinner-js/index.html#motivation",
    "title": "Add downLoading spinners‚Ä¶ using JS",
    "section": "Motivation",
    "text": "Motivation\nAllow me to let you in on a small secret‚Ä¶ Come here. Come closer.\n\nIn one way or another JavaScript is inevitable.\n\nI‚Äôve spent so much time trying to run away from JS, forcing R to do what JS was purposed to do.\nIn the end I‚Äôve come to one conclusion: Smith was always right.\n\nAs a matter of fact, I‚Äôm beginning to enjoy learning and using it."
  },
  {
    "objectID": "posts/shiny/download-button-spinner-js/index.html#the-module",
    "href": "posts/shiny/download-button-spinner-js/index.html#the-module",
    "title": "Add downLoading spinners‚Ä¶ using JS",
    "section": "The module",
    "text": "The module\nI refuse to NOT use modules. So, here we are.\nThe module‚Äôs UI is the simplest, there‚Äôs nothing to explain.\nI have a reminder for you though: It‚Äôs always a missing call to NS(). Thank me later.\n\n\nR/mod_dnld_ui.R\n\nmod_dnld_ui &lt;- \\(id) {\n  ns &lt;- NS(id)\n\n  tagList(\n    downloadButton(\n      outputId = ns(\"download\"),\n      icon = icon(name = NULL, class = \"bi bi-download\")\n    )\n  )\n}\n\n\n\nR/mod_dnld_server.R\n\nmod_dnld_server &lt;- \\(id, data) {\n  stopifnot(\"Argument 'data' must be a reactive!\" = is.reactive(data))\n  moduleServer(\n    id = id,\n    module = \\(input, output, session) {\n      ns &lt;- session$ns\n\n      output$download &lt;- downloadHandler(\n        filename = \\() {\n          paste(\"data-\", Sys.Date(), \".csv\", sep = \"\")\n        },\n        content = \\(file) {\n          session$sendCustomMessage(\n            type = \"starting_download\",\n            list(id = ns(\"download\"))\n          )\n          write.csv(data(), file)\n          session$sendCustomMessage(\n            type = \"end_download\",\n            list(id = ns(\"download\"))\n          )\n        }\n      )\n    }\n  )\n}\n\nEvery time the download button is clicked, shiny sends a message to JavaScript. It also sends another message when the download is complete.\n\n\n\n\n\n\nNote\n\n\n\nsendCustomMessage() sends information from the server to the client.\nOn the client side, a message handler function must be registered to receive and do something with the message."
  },
  {
    "objectID": "posts/shiny/download-button-spinner-js/index.html#script.js",
    "href": "posts/shiny/download-button-spinner-js/index.html#script.js",
    "title": "Add downLoading spinners‚Ä¶ using JS",
    "section": "script.js",
    "text": "script.js\n\n\nwww/script.js\n\nShiny.addCustomMessageHandler(\"starting_download\", (message) =&gt; {\n  let inner_html = '&lt;span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"&gt;&lt;/span&gt;' +\n  '&lt;span class=\"ps-1\"&gt;Downloading...&lt;/span&gt;';\n  $(\"#\" + message[\"id\"]).html(inner_html);\n});\n\nShiny.addCustomMessageHandler(\"end_download\", (message) =&gt; {\n  let inner_html = '&lt;i class=\"bi bi-download pe-1\"&gt;&lt;/i&gt;' + \"Download\";\n  $(\"#\" + message[\"id\"]).html(inner_html);\n});\n\nBoth message handlers change the inner HTML of the download button.\nThe first one (starting_download), adds a loading spinner to indicate that the download is in progress.\nThe second handler (end_download), changes the inner HTML to its original value, indicating that the download is done.\nThe module is complete!\n\n\nNested\nFor the sake of testing whether our module will work when nested in other modules, let‚Äôs define this:\n\n\nR/mod_nested_dnld.R\n\nmod_nested_dnld_ui &lt;- \\(id) {\n  ns &lt;- NS(id)\n  \n  tagList(\n    mod_dnld_ui(ns(\"this\"))\n  )\n}\n\nmod_nested_dnld_server &lt;- \\(id) {\n  moduleServer(\n    id = id,\n    module = \\(input, output, session) {\n      given_data &lt;- reactive({\n        lapply(seq_len(2000), \\(x) {\n          iris\n        }) |&gt;\n          do.call(what = rbind)\n      })\n      mod_dnld_server(\"this\", given_data)\n    }\n  )\n}"
  },
  {
    "objectID": "posts/shiny/download-button-spinner-js/index.html#the-app",
    "href": "posts/shiny/download-button-spinner-js/index.html#the-app",
    "title": "Add downLoading spinners‚Ä¶ using JS",
    "section": "The app",
    "text": "The app\nLet‚Äôs now knit it all together by defining the app‚Äôs ui and server chunks:\n\n\n\nui.R\n\nui &lt;- bslib::page(\n  title = \"DownLoading spinner\",\n  theme = bslib::bs_theme(version = 5),\n  lang = \"en\",\n  tags$head(\n    tags$link(\n      rel = \"stylesheet\",\n      href = \"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\"\n    )\n  ),\n  tags$body(\n    class = \"d-flex flex-column align-items-center bg-dark\",\n    tags$div(\n      tags$h1(\"H3110 W0r1d!\"),\n      tags$div(\n        class = \"my-5\",\n        tags$p(\"When the file is small:\"),\n        mod_dnld_ui(\"this\")\n      ),\n      tags$div(\n        class = \"my-5\",\n        tags$p(\"When the file is large:\"),\n        mod_nested_dnld_ui(\"that\")\n      ),\n      tags$div(\n        class = \"my-5\",\n        tags$p(\"Features:\"),\n        tags$ul(\n          tags$li(\n            \"Works even when the download module is nested in other modules\"\n          )\n        )\n      ),\n      tags$script(src = \"script.js\")\n    )\n  )\n)\n\n\n\n\nserver.R\n\nserver &lt;- \\(input, output, session) {\n  mod_dnld_server(\"this\", data = reactive(mtcars))\n  mod_nested_dnld_server(\"that\")\n}\n\n\n\n\nglobal.R\n\nlibrary(shiny)"
  },
  {
    "objectID": "posts/shiny/download-button-spinner-js/index.html#issawrap",
    "href": "posts/shiny/download-button-spinner-js/index.html#issawrap",
    "title": "Add downLoading spinners‚Ä¶ using JS",
    "section": "Issawrap!",
    "text": "Issawrap!\nReally proud of myself today!\nI expect to learn more JavaScript, but I can‚Äôt promise.\nWait‚Ä¶ What!?\n\nUhhmmm‚Ä¶\nAnddd I just tweeted that.\nI expect to learn more JavaScript, but I can't promise.‚Äî Mwavu (@kennedymwavu) May 28, 2023"
  }
]