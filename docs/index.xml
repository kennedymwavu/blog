<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Mwavu</title>
<link>https://mwavu.com/blog/</link>
<atom:link href="https://mwavu.com/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Kennedy Mwavu</description>
<generator>quarto-1.4.553</generator>
<lastBuildDate>Sat, 12 Jul 2025 21:00:00 GMT</lastBuildDate>
<item>
  <title>Downloading Spinners… Again!</title>
  <link>https://mwavu.com/blog/posts/shiny/download-button-spinner-again/</link>
  <description><![CDATA[ 





<section id="why-do-i-keep-coming-back-to-this" class="level1">
<h1>Why do I keep coming back to this?</h1>
<blockquote class="blockquote">
<p>Agent Smith: “Why, Mr.&nbsp;Anderson? Why, why? Why do you do it? Why, why get up? Why keep fighting? Do you believe you’re fighting… for something? For more than your survival? Can you tell me what it is? Do you even know? Is it freedom? Or truth? Perhaps peace? Could it be for love? Illusions, Mr.&nbsp;Anderson. Vagaries of perception. Temporary constructs of a feeble human intellect trying desperately to justify an existence that is without meaning or purpose. And all of them as artificial as the Matrix itself, although… only a human mind could invent something as insipid as love. You must be able to see it, Mr.&nbsp;Anderson. You must know it by now. You can’t win. It’s pointless to keep fighting. Why, Mr.&nbsp;Anderson? Why? Why do you persist?”</p>
<p>Neo: “Because I choose to.”</p>
<p><strong>— Matrix Revolutions, 2003</strong></p>
</blockquote>
</section>
<section id="whats-different-this-time" class="level1">
<h1>What’s different this time?</h1>
<ul>
<li>Better UI/UX.</li>
<li>More straightforward than my two previous attempts.</li>
<li>Works for all your app’s download buttons.</li>
</ul>
</section>
<section id="okay-fine.-show-me." class="level1">
<h1>Okay, fine. Show me.</h1>
<p>Let’s create a barebones shiny app with a download button in the UI and the corresponding download handler in the server portion:</p>
</section>
<section id="modify-download-handler" class="level1">
<h1>Modify download handler</h1>
<ul>
<li>on.exit</li>
<li>send custom msg</li>
</ul>
</section>
<section id="frontend" class="level1">
<h1>frontend</h1>
<ul>
<li>add on click handler</li>
<li>add custom msg handler</li>
<li>add spinner</li>
<li>disable btn</li>
</ul>
</section>
<section id="works-for-all-download-buttons" class="level1">
<h1>Works for all download buttons</h1>
<ul>
<li>add another download button &amp; handler to app</li>
</ul>
</section>
<section id="even-in-modules" class="level1">
<h1>Even in modules!</h1>
<ul>
<li>show module example</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <category>UI/UX</category>
  <guid>https://mwavu.com/blog/posts/shiny/download-button-spinner-again/</guid>
  <pubDate>Sat, 12 Jul 2025 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/shiny/download-button-spinner-again/thumbnail.png" medium="image" type="image/png" height="90" width="144"/>
</item>
<item>
  <title>Random tidings on SQLite &amp; {DBI}</title>
  <link>https://mwavu.com/blog/posts/random-sqlite-tidings/</link>
  <description><![CDATA[ 





<section id="how-to-check-if-a-table-exists" class="level2">
<h2 class="anchored" data-anchor-id="how-to-check-if-a-table-exists">How to check if a table exists?</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> sqlite_master <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'table'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AND</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'your_table_name'</span>;</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">EXISTS</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> sqlite_master <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'table'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AND</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'your_table_name'</span>);</span></code></pre></div>
<p>Reference: <a href="https://www.sqlite.org/fileformat2.html#storage_of_the_sql_database_schema">Storage of The SQL Database Schema</a>.</p>
</section>
<section id="how-to-check-if-a-table-column-exists" class="level2">
<h2 class="anchored" data-anchor-id="how-to-check-if-a-table-column-exists">How to check if a table column exists?</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb3-1">PRAGMA table_info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'your_table_name'</span>);</span></code></pre></div>
<p>Reference: <a href="https://www.sqlite.org/pragma.html#pragma_table_info">pragma</a>.</p>
<p>Please note that PRAGMA feature was added in SQLite version 3.16.0 (2017-01-02): <a href="https://sqlite.org/pragma.html#pragfunc">PRAGMA functions</a>.</p>
</section>
<section id="foreign-keys" class="level2">
<h2 class="anchored" data-anchor-id="foreign-keys">Foreign keys</h2>
<p>Foreign keys are disabled by default in sqlite. The have to be enabled on each connection.</p>
<p>Reference: <a href="https://www.sqlite.org/foreignkeys.html">Foreign Keys</a>.</p>
<p>That implies to use foreign keys with {pool}, you need to set the variable at the connection level. Hence, you cannot use the {pool} object itself.</p>
<p>Reference: <a href="https://shiny.posit.co/r/articles/build/pool-advanced/">Advanced Usage of Pool</a>.</p>
</section>
<section id="timestamps" class="level2">
<h2 class="anchored" data-anchor-id="timestamps">Timestamps</h2>
<p>In most cases you need timestamps for columns such as <code>created_at</code>, <code>modified_at</code>.</p>
<p>Reference: <a href="https://www.sqlite.org/lang_datefunc.html">Date and Time Functions</a></p>
</section>
<section id="varcharn" class="level2">
<h2 class="anchored" data-anchor-id="varcharn">VARCHAR(n)</h2>
<p>Due to type affinity, <code>VARCHAR(n)</code> will be treated as <code>TEXT</code>.</p>
<p>Reference: <a href="https://www.sqlite.org/datatype3.html#type_affinity">Type affinity</a>.</p>
</section>
<section id="running-an-sql-script" class="level2">
<h2 class="anchored" data-anchor-id="running-an-sql-script">Running an SQL script</h2>
<p>{RSQLite} does not allow running multiple SQL statements at once. As such, if you have an SQL script, you have to split it into individual statements and run them one after the other.</p>
<p>Reference: <a href="https://github.com/r-dbi/RSQLite/issues/313">Statements after the first dbExecute are ignored</a>.</p>
</section>
<section id="query-parameterization" class="level2">
<h2 class="anchored" data-anchor-id="query-parameterization">Query parameterization</h2>
<p>{DBI} currently has no way to parameterize queries across relational databases. Hence, if you’re writing a query to be run on multiple SQL backends, you need to change the parameterization for depending on the format used for each of the databases.</p>
<p>Reference: <a href="https://dbi.r-dbi.org/reference/dbBind.html#details">Parameterize Queries Across Relational DBs</a>.</p>


</section>

 ]]></description>
  <guid>https://mwavu.com/blog/posts/random-sqlite-tidings/</guid>
  <pubDate>Sat, 09 Nov 2024 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/random-sqlite-tidings/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Count sequential characters</title>
  <link>https://mwavu.com/blog/posts/count-sequential-chars/</link>
  <description><![CDATA[ 





<p>There is <a href="https://x.com/JosiahParry/status/1646165797125931009">this problem</a> Josiah posted on twitter in April 12 2023:</p>
<p><img src="https://mwavu.com/blog/posts/count-sequential-chars/problem.png" class="img-fluid" alt="I have a string 'abcd123' and  vector of strings c('abcd124', 'abcd133', 'acbd123') and I want to count the number of shared character sequential characters. How can I do this?  preferably in a vectorized way #rstats"></p>
<p>Since then, it has lingered in a corner of my mind. It is such a simple problem, and yet for a long time I couldn’t figure out how to solve it <strong>efficiently</strong> in R.</p>
<section id="reprex" class="level1">
<h1>Reprex</h1>
<p>A reprex is always a good starting point. Basically a practical explanation of what you want to achieve.</p>
<p>We want to create a function <code>count_sequential_chars()</code> such that:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abcd123"</span></span>
<span id="cb1-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abcd124"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abcd133"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"acbd123"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count_sequential_chars</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">char_vec =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">string =</span> string)</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] 6 5 1</span></span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count_sequential_chars</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">char_vec =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">string =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ab"</span>)</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] 2 2 1</span></span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count_sequential_chars</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">char_vec =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">string =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ac"</span>)</span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] 1 1 2</span></span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count_sequential_chars</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">char_vec =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">string =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"123"</span>)</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] 0 0 0</span></span></code></pre></div>
<p>Main thing to note:</p>
<ul>
<li>Matching is always done from left to right. ie. from the beginning of the reference string to its end.</li>
</ul>
</section>
<section id="algorithm" class="level1">
<h1>Algorithm</h1>
<p>Thinking about the problem and writing a “solution” in layman terms helps a lot. Let’s use the variables we’ve defined in the reprex above:</p>
<ul>
<li><code>string</code> is the reference string</li>
<li><code>x</code> is the character vector we’re comparing against</li>
</ul>
<ol type="1">
<li><p>Get all patterns that we need to match. Take characters of the reference string and concatenate them from left to right, adding one at a time. Using <code>string</code>, we end up with these patterns:</p>
<ul>
<li>“a”</li>
<li>“ab”</li>
<li>“abc”</li>
<li>“abcd”</li>
<li>“abcd1”</li>
<li>“abcd12”</li>
<li>“abcd123”</li>
</ul></li>
<li><p>Now for each pattern, check whether a given item in <code>x</code> starts with that pattern. If so, give the pattern a weight of 1. Otherwise, 0. Taking the first item of <code>x</code> (“abcd124”) as reference, we have this:</p>
<div class="table-responsive">
<table class="table-hover table-sm small table">
<caption>Pattern Weighting</caption>
<thead>
<tr class="header">
<th>pattern</th>
<th style="text-align: right;">weight</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>“a”</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td>“ab”</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td>“abc”</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td>“abcd”</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td>“abcd1”</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td>“abcd12”</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td>“abcd123”</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
</div></li>
<li><p>The number of shared sequential characters between <code>string</code> and the item is the sum of the weights. Again, taking the first item of <code>x</code> (“abcd124”), the sum of the weights is 6.</p></li>
<li><p>Repeat steps 1 to 3 for all items of <code>x</code>.</p></li>
</ol>
</section>
<section id="first-attempt" class="level1">
<h1>First attempt</h1>
<p>My first attempt was in Dec 8 2023:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">csc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(char_vec, str) {</span>
<span id="cb5-2">  patterns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(str) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(\(i) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> str, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stop =</span> i)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^%s"</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7">  count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(char_vec))</span>
<span id="cb5-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (pattern <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> patterns) {</span>
<span id="cb5-9">    count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> pattern, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> char_vec)</span>
<span id="cb5-10">  }</span>
<span id="cb5-11">  count</span>
<span id="cb5-12">}</span></code></pre></div>
</div>
<p><code>csc</code> for <code>count_sequential_characters</code>, btw.</p>
<p>This solution works fine:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abcd123"</span></span>
<span id="cb6-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abcd124"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abcd133"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"acbd123"</span>)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csc</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">char_vec =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">str =</span> string)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 6 5 1</code></pre>
</div>
</div>
<p>but… it’s too slow:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">sample_strings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span>,</span>
<span id="cb8-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>),</span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>),</span>
<span id="cb8-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb8-7">  )</span>
<span id="cb8-8">)</span>
<span id="cb8-9"></span>
<span id="cb8-10">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb8-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb8-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">csc =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">csc</span>(</span>
<span id="cb8-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">char_vec =</span> sample_strings,</span>
<span id="cb8-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">str =</span> string</span>
<span id="cb8-15">  )</span>
<span id="cb8-16">)</span></code></pre></div>
<pre><code># A tibble: 1 × 13
  expression      min median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc total_time
  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;   &lt;bch:tm&gt;
1 csc           627ms  638ms      1.55    87.7MB     4.71   100   304      1.07m
# ℹ 4 more variables: result &lt;list&gt;, memory &lt;list&gt;, time &lt;list&gt;, gc &lt;list&gt;</code></pre>
<p>I’m pretty sure you know that gut feeling in your stomach when… yes, you’ve done something to the best of your knowledge but… you just know there’s a better way to do it.</p>
<p>That tweet stayed in my bookmarks for so long (April 12 2023 - July 19 2024). I would regularly go back to the problem, but I’d always come short on the performance.</p>
<p>Time and time again. Until yesterday.</p>
<p><img src="https://mwavu.com/blog/posts/count-sequential-chars/fail-try.jpeg" class="img-fluid" alt="The meme: Everyday, I fail. But everyday, I try again"></p>
</section>
<section id="lightbulb-moment" class="level1">
<h1>Lightbulb moment</h1>
<p>This is extremely cliché, but it’s actually what happened.</p>
<p>Mostly during my workouts (2-3 pushups, nothing serious), I watch ThePrimeagen.</p>
<p>Yesterday he was reading <a href="https://www.checklyhq.com/blog/300ms-from-every-pod-startup-with-a-single-grafana-query/">this article</a> about how the writer and his team saved $5k a month with a single Grafana query.</p>
<p>Here’s a link to the video:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/_QLZs0QTaZM?si=RtyS38WBhtEp3k_Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
<p>You’re probably not gonna watch the video anyway, so I’ll just tell you: He’s basically talking about optimizations in software &amp; architecture.</p>
<p>ThePrimeagen’s videos always have a certain effect on my brain. I was in the shower when that sequential characters problem popped into my head, again.</p>
<p>I asked myself: How many ways are there in R to check whether a string starts with a certain set of characters?</p>
<ul>
<li><code>grepl()</code></li>
<li><code>startsWith()</code></li>
</ul>
<p>That right there, was the key.</p>
</section>
<section id="nth-attempt" class="level1">
<h1><img src="https://latex.codecogs.com/png.latex?n%5E%7Bth%7D"> attempt</h1>
<p>So I re-wrote the function again. The major change was that this time I used <code>startsWith()</code>:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">count_sequential_chars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(char_vec, string) {</span>
<span id="cb10-2">  split_string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> string, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">split =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb10-3"></span>
<span id="cb10-4">  patterns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(split_string))</span>
<span id="cb10-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(split_string)) {</span>
<span id="cb10-6">    pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> split_string[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(i)] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb10-7">    patterns[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pattern</span>
<span id="cb10-8">  }</span>
<span id="cb10-9"></span>
<span id="cb10-10">  res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(char_vec))</span>
<span id="cb10-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (pattern <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> patterns) {</span>
<span id="cb10-12">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> res <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">startsWith</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> char_vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prefix =</span> pattern)</span>
<span id="cb10-13">  }</span>
<span id="cb10-14">  res</span>
<span id="cb10-15">}</span></code></pre></div>
<p>Of course, it works fine:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abcd123"</span></span>
<span id="cb11-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abcd124"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abcd133"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"acbd123"</span>)</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count_sequential_chars</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">char_vec =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">string =</span> string)</span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] 6 5 1</span></span></code></pre></div>
<p>Now, let’s see how it performs:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb12-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count_sequential_chars</span>(</span>
<span id="cb12-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">char_vec =</span> sample_strings,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">string =</span> string</span>
<span id="cb12-6">  )</span>
<span id="cb12-7">)</span></code></pre></div>
<pre><code># A tibble: 1 × 13
  expression      min median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc total_time
  &lt;bch:expr&gt;   &lt;bch:&gt; &lt;bch:&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;   &lt;bch:tm&gt;
1 count_seque… 78.1ms 81.8ms      11.4    57.2MB     31.3   100   274      8.76s
# ℹ 4 more variables: result &lt;list&gt;, memory &lt;list&gt;, time &lt;list&gt;, gc &lt;list&gt;</code></pre>
<p>≈ 10x faster, 35% less memory</p>
<p>Unbelievable!</p>
<p>I had to re-run that benchmark like 10 more times (even though the benchmark itself is running 100 iterations, lol).</p>
<p>Just like you, the question I had was: why is <code>startsWith()</code> faster than <code>grepl()</code>? So I looked at the docs <code>?startsWith</code>:</p>
<blockquote class="blockquote">
<p><code>startsWith()</code> is equivalent to but much faster than</p>
<p><code>substring(x, 1, nchar(prefix)) == prefix</code></p>
<p>or also</p>
<p><code>grepl("^&lt;prefix&gt;", x)</code></p>
<p>where prefix is not to contain special regular expression characters (and for grepl, x does not contain missing values, see below).</p>
<p>The code has an optimized branch for the most common usage in which prefix or suffix is of length one, and is further optimized in a UTF-8 or 8-byte locale if that is an ASCII string.</p>
</blockquote>
<p>It also turns out <code>grepl(..., fixed = TRUE)</code> would offer a similar performance but we can’t use it for this problem since we strictly want to match characters at the start of a string.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p><img src="https://mwavu.com/blog/posts/count-sequential-chars/skill-issue.jpg" class="img-fluid" alt="The meme: Diagnosis: Skill Issue"></p>
<p>We’ve seen it again and again, more often than not, R is usually not the problem. It’s always a skill issue on the person writing the code.</p>
<p>But don’t get me wrong…</p>
<p>Relative to Rust, R is extremely slow &amp; memory intensive. Just look at <a href="https://josiahparry.com/posts/2023-04-13-counting-chars/">the blog post</a> Josiah wrote and see the Rust benchmarks. We, R users, can’t relate.</p>
<p>This was a good challenge and I’m kinda satisfied with my current solution.</p>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://mwavu.com/blog/posts/count-sequential-chars/</guid>
  <pubDate>Fri, 19 Jul 2024 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/count-sequential-chars/thumbnail.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How I Ended Up With R</title>
  <link>https://mwavu.com/blog/posts/how-i-ended-up-with-r/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Dear reader,</p>
<p>I hope you’re doing well.</p>
<p>I am doing great! Couldn’t be better. Thanks for asking, btw.</p>
<p>I am reaching out to let you know more about the main character in my life: <strong>ME</strong>. Specifically, how I ended up learning R.</p>
<p>Whether or not this story is good enough to end up in your inbox/my blog (same thing) is a matter of debate. But I must warn you that we shall not be writing any code today.</p>
<p>3, 2, 1, Action 🎬</p>
<p>“Hi, My name is Mwavu and I’m an addict. I’ve been using for 4 years…” <img src="https://mwavu.com/blog/posts/how-i-ended-up-with-r/budger.png" class="img-fluid" alt="Budger from 'Breaking Bad' confessing that he's an addict"></p>
<p>You’re probably wondering how I ended up here. One does not simply build his whole software development career around R.</p>
<p>Let’s rewind to where it all started:</p>
</section>
<section id="last-year-of-high-school" class="level2">
<h2 class="anchored" data-anchor-id="last-year-of-high-school">Last year of high school</h2>
<p>I went to Alliance High School, btw.</p>
<p>During the last year of high-school, students get to choose the course they’d like to major in the university. I had no idea what to choose. I was pretty good at maths, so it had to be something centered around that.</p>
<p>After inquiring from my math teacher, he offered two suggestions: Statistics or Actuarial Science.</p>
<p>We went for a break and boy, did I do some deep research! By the end of the break, I had already made up my mind: Actuarial Science. A decision that was driven by two * checks notes * … uhhhmm three factors:</p>
<ul>
<li>My vast google search revealed that actuaries have a fat paycheck. Who doesn’t want that? I mean, I do.</li>
<li>My aunt really championed for it, talking about a friend of hers who did the same course and now money aggressively hunts her down. Imagine!</li>
<li>Rumours had it that the course was really difficult, with lots of math. “But I am excellent at maths, that won’t be a problem”, I said to myself. Besides, the university was said to be a fun place with lots of time to chill, I’d use that time to crunch the numbers.</li>
</ul>
<p>I considered myself to be smart… Academically, at least. My grades heavily backed up that argument.</p>
<p>As fate would have it, I exceeded the cut-off points set for the course by a considerable margin. In September 2018, I enrolled into UoN. Or as they like to call it “The University of Nairobi”, emphasis on “The”. It’s said to be the largest university in our country.</p>
</section>
<section id="first-year-2018" class="level2">
<h2 class="anchored" data-anchor-id="first-year-2018">First year, 2018</h2>
<p>I put in a lot of effort in my first year, and it paid off. The grades were nothing less than excellent. Oh - and spoiler alert - it was also the last time.</p>
<p>During this first year, our lecturers mentioned of some papers outside the curriculum that one was supposed to take in order to become an actuary. And oh boy, weren’t they expensive!</p>
<p>One paper cost around&nbsp;<code>297 USD</code>&nbsp;at that time. Bear with me if that’s cheap to you, I’m from the other side of the wealth grid.</p>
<p>Stories were told of those who didn’t take the papers. They’d end up as mere salespeople for insurance companies. They could not become actuaries. That’s when it hit me. I was not going to become an actuary. A part of me was slightly disappointed.</p>
<p>I started looking for alternatives. We had taken an introductory programming unit in our first semester and I found it really interesting. A friend of mine, Brian, had a desktop and since I didn’t have a laptop, I’d go to his house to learn from <a href="https://www.youtube.com/playlist?list=PLBZBJbE_rGRWeh5mIBhD-hhDwSEDxogDg">CS Dojo’s introductory course to python.</a></p>
</section>
<section id="second-year-2019." class="level2">
<h2 class="anchored" data-anchor-id="second-year-2019.">Second year, 2019.</h2>
<p>After exploring some options, I saw data science as a good fit since I could teach myself from online resources. It required programming knowledge, either python or R.</p>
<p>I consulted with some of my classmates who seemed “woke”. I did not know much about computers, leave alone programming.</p>
<p>“Remember we did python in first year? I loved it and would like to learn more since I want to become a data scientist. Wdy think?”</p>
<p>“But we’re taking actuarial science and actuaries use R all the time. Have you not heard how the lecturers keep on mentioning R? Python is not a good choice. I’d recommend R.”</p>
<p>The advice was unanimous. I took it.</p>
<p>Census was conducted that same year in Kenya and I was one of the enumerators. I used all the money I earned to get myself a laptop.&nbsp;<code>199.703 USD, 2019.</code> This would turn out to be one of the best decisions I’ve ever made.</p>
<p>I started experimenting with R after classes but I wasn’t consistent. It seemed different and less absorbable compared to the little python I knew.</p>
</section>
<section id="lockdown-march-2020" class="level2">
<h2 class="anchored" data-anchor-id="lockdown-march-2020">Lockdown, March 2020</h2>
<p>Covid19 hit and a countrywide lockdown was announced.</p>
<p>Truth be told, I was nursing a heartbreak at that time. Dark days those!</p>
<p>To avoid being strangled and tortured by sad nigga hours, I’d wake up at 4am, learn R the whole day. By 9pm I’d be so spent that I’d just drop dead on my bed.</p>
<p>Day in, day out.</p>
<p>After around 3 months, I felt as if I had become a god at R.</p>
<p><img src="https://mwavu.com/blog/posts/how-i-ended-up-with-r/thor.png" class="img-fluid" alt="Thor holding his hammer"></p>
<p>We call it “the hand-holding honeymoon phase”.</p>
<p>Four classmates had landed an internship at a big company and were being taught R. Their assignment was to rewrite some scripts in their own way. One of them told me. I’m always heavy on practice so I asked her to send me the assignment, I could also learn a thing or two.</p>
<p>The script she sent took around 7 minutes to run. I recall clearly it had 6 nested&nbsp;<code>for loops</code>. Let’s just say that it worked.</p>
<p>No, no… Don’t bring that “loops are bad in R” argument here. We’ve heard enough of it.</p>
<p>Okay, now that you’ve calmed down allow me to continue…</p>
<p>I sat down, analyzed what it was doing and the required output. After a few hours I had finished rewriting it. And my script… My script took a whooping 6 seconds to get the job done! Tell me if that isn’t some kind of god-shit! They couldn’t believe it. Neither could their manager, who I suppose was also learning R.</p>
<p>I started getting some freelancing gigs from a friend of mine, Paul, mostly student university assignments. I had never had so much money in my life. For the next 3 months I would make an average of&nbsp;<code>425.4 USD</code>&nbsp;per month. Of course looking back now that isn’t a lot. But it was, back then.</p>
</section>
<section id="first-real-job" class="level2">
<h2 class="anchored" data-anchor-id="first-real-job">First real job</h2>
<p>After students went for holidays the earnings reduced drastically.</p>
<p>I was learning fast. I created a linkedin account. After a few weeks “some guy” I had connected with messaged me and asked for my phone number.</p>
<p>To this day I’m not sure why I thought he was another person who was job hunting like me, and so I didn’t even bother to check his profile.</p>
<p>Several weeks passed by. He called one day. I spoke to him casually, but I could detect seriousness in his voice. We talked about normal things, about life in general. We became friends, even though we’d never met. We’d call each other from time to time.</p>
<p>One day I decided to peek at his linkedin profile to see what he does. Aaand… Surprise surprise! The guy was an actuarial fellow, a principal actuary and an MD at a certain company. Imagine realizing this after like 5 months of us talking!</p>
<p>On our next call I asked why he didn’t tell me. “If I did we wouldn’t be friends as we are. Besides, it was out in the open. You could have looked at my profile.” Well, he was right.</p>
<p>He texted on May 2021 saying that the HR from the company would reach out to me and the discussion would be about my R skills.</p>
<p>After an oral interview, completing a project and a final physical interview, they offered me a job as a junior software developer.</p>
<p>And that, ladies and gentlemen, is when my career as an R developer took off.</p>
<p>“So, what happened to actuarial science?”, you ask.</p>
</section>
<section id="mwavu-the-actuary" class="level2">
<h2 class="anchored" data-anchor-id="mwavu-the-actuary">Mwavu, the actuary</h2>
<p>If I said it ended well I’d be lying. Even lovers fall out. This was no exception. I lost all interest in actuarial science. To date. From 2.2 (second year, second semester) I didn’t study anything concerning the course.</p>
<p>Fortunately or unfortunately both classes and exams were conducted online due to covid19.</p>
<p>Following my then heightening googling skills, getting answers from online sources proved to be easy enough and worked most of the time.</p>
<p>2.2 through 3.2 was a breeze.</p>
<p><img src="https://mwavu.com/blog/posts/how-i-ended-up-with-r/rick-dad.png" class="img-fluid" alt="Rick's dad saying 'I just keep googling stuff and it keeps working'"></p>
<p>I spent a better part of my days programming. Nothing beats the feeling of learning something that I both want and I’m super interested in.</p>
</section>
<section id="june-2021" class="level2">
<h2 class="anchored" data-anchor-id="june-2021">June, 2021</h2>
<p>I wanted to drop out after 3.2 was over but I decided to consult with friends and family first.</p>
<p>Let’s go through some of the advice, each from a different person:</p>
<p>“You’ve come so far to give up now”</p>
<p>“It’s just one year remaining”</p>
<p>“In fact, not one year. It’s six months.”</p>
<p>“You will never get a job. You might have been lucky this one time, but out here without a degree things are difficult.”</p>
<p>“There is no way you’re going to shame us. We paid a lot of school fees for you to drop out now. All the loans?! What shall we tell people?”</p>
<p>“A degree is like a key. It will open doors you cannot see now. The other option is to enroll for a computer science degree. Another 4 years.”</p>
<p>“I understand, it won’t add anything to you. But just for the sake of having one, finish it.”</p>
<p>“We’re not in the US. You’re not Steve Jobs or Mark Zuckerberg. Stop living in a utopia! If you ever want to get hired here in Kenya and get a good salary, you need to get a degree.”</p>
<p>Not sure if I’ve ever recovered from that last one. Damn!</p>
<p>All their arguments made sense, at least when viewed from a certain angle. The most striking thing was that none of them told me to go ahead and drop out. Not a single one!</p>
<p>At this point I hated school, or anything to do with it. I didn’t want to be there. I knew the degree was never going to help me anywhere in my career. It hasn’t, yet. I’m still waiting.💀</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
</div>
<div class="callout-body-container callout-body">
<p>Btw, I’m not against going to college/university. I just didn’t like it.</p>
</div>
</div>
</section>
<section id="fourth-year-2022" class="level2">
<h2 class="anchored" data-anchor-id="fourth-year-2022">Fourth year, 2022</h2>
<p>Exams for both 4.1 and 4.2 were conducted physically, in the exam center. I dreaded this. I couldn’t google myself out of this one.</p>
<p>After the first paper I actually made up my mind: I’m quitting this shit.</p>
<p>Call me a lucky man but it happened that I was in the same major as my girlfriend, Brenda. She’d literally wake me up and drag me out of my room. Through her sheer force, I showed up for all the exams.</p>
<p>Even before the results were out, I knew I had flopped. Who the hell goes to the exam room, writes their registration number, signs on the answer sheet as required and then “helps” the lecturer invigilate the other students for the rest of the time? Me. All in the name of finishing a degree I was totally disinterested in.</p>
<p>Okay, I admit… I have exaggerated things a bit in the paragraph above, but you get the point. I did answer some questions but I didn’t think my answers were good enough to even get me a pass.</p>
<p>While others revised for the next day’s paper, I’d spend my time on <a href="https://stackoverflow.com/">stackoverflow</a> going through old questions/answers and providing solutions to some. Almost all my reputation on stackoverflow can be attributed to that time period.</p>
<p>But fate, it seems, was hell-bent on ensuring I graduated. So, to my surprise, I finally did. Not with a pass, but a second class honors. Maybe I was smart after all. I guess we’ll never know.</p>
<p><img src="https://mwavu.com/blog/posts/how-i-ended-up-with-r/thor2.png" class="img-fluid" alt="Thor holding his hammer and saying 'I am still worthy'"></p>
</section>
<section id="wind-up" class="level2">
<h2 class="anchored" data-anchor-id="wind-up">Wind up</h2>
<p>“Interesting story you have there, Mwavu. Earlier you stated that you wanted to become a Data Scientist. Did that happen?”</p>
<p>No.&nbsp;After I got that first job my career took a different turn: Software Development.</p>
<p>“You use R for software dev?!”</p>
<p>Yes.</p>
<p>“Why? I thought its <strong>only</strong> use is statistical &amp; data analysis.”</p>
<p>That is what most people think. And rightly so. I am certainly not a pro at the language, but its appeal to me comes not from viewing it as a statistical &amp; data analysis tool (which it is), but from looking at it as a programming language.</p>
<p>From how I see it, R has so much more to offer. For one, it is unusually good at creating UIs. Take a look at <a href="https://x.com/kennedymwavu/status/1749022360043172113">this tweet</a> for example. Second, R integrates extremely well with other languages.</p>
<p>Admittedly, the main reason I use R is because I love it. There, I said it.</p>
<p>I am just not able to ditch it. I’ve tried to, many times. And failed at each attempt. Maybe coz it was my first, and that first love hits hard. I just can’t seem to move on.</p>
<p>It has its quarks, but so does every other language. I’d never write a compiler using it, of course. That’d be stupid.</p>
<p>All I’m saying is if I were to go back, I’d still pick R.</p>
<p>If a day comes and the language ceases to amaze me, I shall look back and say: “It was good while it lasted. And like all good things, it was bound to come to an end”.</p>
<p>Just like my letter to you, dear reader.</p>
<p>Yours truly,</p>
<p>Mwavu.</p>


</section>

 ]]></description>
  <category>Story</category>
  <category>R</category>
  <guid>https://mwavu.com/blog/posts/how-i-ended-up-with-r/</guid>
  <pubDate>Wed, 07 Feb 2024 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/how-i-ended-up-with-r/thumbnail.avif" medium="image" type="image/avif"/>
</item>
<item>
  <title>Autoreloading in Shiny</title>
  <dc:creator>Kennedy Mwavu</dc:creator>
  <link>https://mwavu.com/blog/posts/shiny/auto-reload/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Have a look at <a href="https://github.com/kennedymwavu/ambiorix-examples/tree/main/10_live_reloading">this example/article</a> for a better way to enable live-reloading.</p>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>If you take a look at</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">?shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>getShinyOption</span></code></pre></div>
<p>you’ll see there’s an option <code>shiny.autoreload</code> which when set to <code>TRUE</code> should reload your app when you make changes to the code.</p>
<p>This works well for relatively small apps where you have a simple architecture.</p>
<p>When you introduce shiny modules or use an R package architecture, the autoreloading stops.</p>
<p>For a very long time I’ve been envious of JavaScript devs. Regardless of the architecture, they make a change and their web apps automatically reload.</p>
<p>Let’s explore how we can bring such experience into the development of shiny apps.</p>
</section>
<section id="setup-the-shiny-side" class="level2">
<h2 class="anchored" data-anchor-id="setup-the-shiny-side">Setup the shiny side</h2>
<p>We, of course, need an app.</p>
<p>I’m sure by now you’re familiar with this setup:</p>
<pre><code>|- autoreload/
    |- global.R
    |- ui.R
    |- server.R
    |- R/
        |- mod_select_ui.R
        |- mod_select_server.R</code></pre>
<p><code>autoreload/</code> is our working directory.</p>
<p>I’ve added the select module under <code>autoreload/R/</code>, as expected.</p>
<p>Here’s the source code:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>global.R</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="global.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb4-2">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb4-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container"</span>,</span>
<span id="cb4-4">    tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, nodemon!"</span>),</span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_select_ui</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select"</span>)</span>
<span id="cb4-6">  )</span>
<span id="cb4-7">)</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(input, output, session) {</span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_select_server</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select"</span>)</span>
<span id="cb5-3">}</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_select_ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="R/mod_select_ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">mod_select_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(id) {</span>
<span id="cb6-2">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb6-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"letter"</span>),</span>
<span id="cb6-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LETTERS"</span>,</span>
<span id="cb6-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> LETTERS</span>
<span id="cb6-8">    ),</span>
<span id="cb6-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">checkboxInput</span>(</span>
<span id="cb6-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"case_sensitive"</span>),</span>
<span id="cb6-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Case Sensitive"</span></span>
<span id="cb6-12">    )</span>
<span id="cb6-13">  )</span>
<span id="cb6-14">}</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_select_server.R</strong></pre>
</div>
<div class="sourceCode" id="cb7" data-filename="R/mod_select_server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">mod_select_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(id) {</span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id,</span>
<span id="cb7-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">module =</span> \(input, output, session) {}</span>
<span id="cb7-5">  )</span>
<span id="cb7-6">}</span></code></pre></div>
</div>
<p>The reprex is complete.</p>
<p>We only have one job now: enable autoreload.</p>
</section>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>You will need to have these two installed:</p>
<ul>
<li>NodeJS. This is a JavaScript runtime environment.
<ul>
<li>Just google “how to install nodejs <insert your="" os="">”</insert></li>
</ul></li>
<li>NPM: Package manager for JavaScript.
<ul>
<li>Again, google “how to install npm <insert your="" os="">”</insert></li>
</ul></li>
</ul>
<p>By the way, in case you’re concerned, we aren’t going to write any JavaScript.</p>
</section>
<section id="initialize-project" class="level2">
<h2 class="anchored" data-anchor-id="initialize-project">Initialize project</h2>
<p>Switch to the terminal and ensure you’re in the root folder of your shiny app (<code>autoreload/</code>), then run:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"></code></pre></div>
<p>This will setup a new npm package and create the <code>package.json</code> file.</p>
<p>The <code>-y</code> flag accepts the default npm setup.</p>
</section>
<section id="enter-nodemon" class="level2">
<h2 class="anchored" data-anchor-id="enter-nodemon">Enter nodemon</h2>
<p>nodemon is a tool that helps develop Node.js based applications by automatically restarting the node application when file changes in the directory are detected.</p>
<p>We will use it to rerun our shiny app as needed.</p>
<p>Install nodemon as a dev dependency:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"></code></pre></div>
<p>Let’s create <code>run_app.R</code> at the root directory of our project. This is more of an “entry point” to our shiny app.</p>
<p>nodemon will rerun this file each time a change occurs.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>run_app.R</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="run_app.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">launch.browser =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>For simplicity, we will fix the port to 3000.</p>
<p>In most cases you need the app to automatically launch the browser, so we set that to <code>TRUE</code>.</p>
</section>
<section id="configure-nodemon" class="level2">
<h2 class="anchored" data-anchor-id="configure-nodemon">Configure nodemon</h2>
<p>We need to tell nodemon how to run R files.</p>
<p>Create the file <code>nodemon.json</code> at the root dir of our project and paste this in it:</p>
<div class="sourceCode" id="annotated-cell-11" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-11-1">{</span>
<span id="annotated-cell-11-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"execMap"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-11-3" class="code-annotation-target">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rscript"</span></span>
<span id="annotated-cell-11-4">  },</span>
<span id="annotated-cell-11-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"events"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-11-6" class="code-annotation-target">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restart"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sh -c 'fuser -n tcp -k 3000'"</span>,</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-11-7" class="code-annotation-target">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crash"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sh -c 'fuser -n tcp -k 3000'"</span></span>
<span id="annotated-cell-11-8">  }</span>
<span id="annotated-cell-11-9">}</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-11" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="3" data-code-annotation="1">Specifies an executable mapping for <code>.R</code> files: <code>Rscript</code></span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="6" data-code-annotation="2">After every restart, first kill whatever process is running in port 3000</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="7" data-code-annotation="3">Do the same whenever the app crashes</span>
</dd>
</dl>
<p><code>2</code> &amp; <code>3</code> ensure that the port 3000 is freed up before the application is rerun again.</p>
<p>Here is a breakdown of the different parts:</p>
<ul>
<li><code>sh</code>: Is the shell command, which is used to run other commands.</li>
<li><code>-c</code>: This option tells the shell to read the commands from the following string.</li>
<li><code>fuser -n tcp -k 3000</code>: This is the actual command that shell will execute.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I’m using Ubuntu. If you’re on Windows, MacOS or another distro, you need to google how to kill a process that’s running in a port for your OS.</p>
</div>
</div>
<p>We’re done with nodemon configuration.</p>
<p>Next, open <code>package.json</code> and edit the “scripts” section:</p>
<div class="sourceCode" id="annotated-cell-12" style="background: #f1f3f5;"><pre class="sourceCode r code-annotation-code code-with-copy code-annotated"><code class="sourceCode r"><span id="annotated-cell-12-1">{</span>
<span id="annotated-cell-12-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"autoreload"</span>,</span>
<span id="annotated-cell-12-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"version"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.0.0"</span>,</span>
<span id="annotated-cell-12-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="annotated-cell-12-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index.js"</span>,</span>
<span id="annotated-cell-12-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scripts"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-12" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-12-7" class="code-annotation-target">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nodemon -e '*' run_app.R"</span></span>
<span id="annotated-cell-12-8">  },</span>
<span id="annotated-cell-12-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"keywords"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [],</span>
<span id="annotated-cell-12-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"author"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="annotated-cell-12-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"license"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ISC"</span>,</span>
<span id="annotated-cell-12-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"devDependencies"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="annotated-cell-12-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nodemon"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^3.0.2"</span></span>
<span id="annotated-cell-12-14">  }</span>
<span id="annotated-cell-12-15">}</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-12" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-12" data-code-lines="7" data-code-annotation="1">Creates a custom npm script called “dev”</span>
</dd>
</dl>
<p>Let’s break it down:</p>
<ul>
<li><code>nodemon</code>: This is nodemon, which monitors changes in files in our project.</li>
<li><code>-e '*'</code>: This option tells nodemon which files to watch for changes. In this case we set it to watch all files (<code>*</code> is a wildcard character), meaning nodemon will restart whenever any file changes.</li>
<li><code>run_app.R</code>: This is the script that nodemon will execute when it restarts.</li>
</ul>
</section>
<section id="run-app" class="level2">
<h2 class="anchored" data-anchor-id="run-app">Run app</h2>
<p>Everything is ready.</p>
<p><img src="https://mwavu.com/blog/posts/shiny/auto-reload/showtime.jpg" class="img-fluid" alt="It's showtime meme"></p>
<p>In our project root folder, run this in the terminal:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"></code></pre></div>
<p>This should fire up the shiny app. Now go ahead and make changes to any file within the directory and watch what happens.</p>
<p>To stop npm, press <code>CTRL</code> + <code>C</code>.</p>
<p>Happy development!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <guid>https://mwavu.com/blog/posts/shiny/auto-reload/</guid>
  <pubDate>Fri, 05 Jan 2024 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/shiny/auto-reload/showtime.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Injecting tabPanelBodies into tabsetPanels</title>
  <dc:creator>Kennedy Mwavu</dc:creator>
  <link>https://mwavu.com/blog/posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/</link>
  <description><![CDATA[ 





<section id="context" class="level2">
<h2 class="anchored" data-anchor-id="context">Context</h2>
<p>Let’s talk about injections… Code &amp; data injections, to be specific.</p>
<p>If you have built any sizeable shiny app, then you’ve probably had to handle many hidden tab panels.</p>
<p>You end up with code which looks like this:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>global.R</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="global.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># btns to switch from one tab to the other:</span></span>
<span id="cb2-2">btns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>], \(letter) {</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">actionButton</span>(</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"btn_"</span>, letter),</span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(letter, letter),</span>
<span id="cb2-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"btn-primary btn-lg"</span></span>
<span id="cb2-7">  )</span>
<span id="cb2-8">})</span>
<span id="cb2-9"></span>
<span id="cb2-10">tabs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabsetPanel</span>(</span>
<span id="cb2-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tabs"</span>,</span>
<span id="cb2-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden"</span>,</span>
<span id="cb2-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>,</span>
<span id="cb2-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab A"</span>)),</span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab B"</span>)),</span>
<span id="cb2-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab C"</span>)),</span>
<span id="cb2-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab D"</span>)),</span>
<span id="cb2-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab E"</span>)),</span>
<span id="cb2-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab F"</span>)),</span>
<span id="cb2-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab G"</span>)),</span>
<span id="cb2-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab H"</span>)),</span>
<span id="cb2-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab I"</span>)),</span>
<span id="cb2-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"j"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab J"</span>))</span>
<span id="cb2-24">)</span>
<span id="cb2-25"></span>
<span id="cb2-26">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb2-27">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb2-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container text-center"</span>,</span>
<span id="cb2-29">    tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"page-header"</span>, btns),</span>
<span id="cb2-30">    tabs</span>
<span id="cb2-31">  )</span>
<span id="cb2-32">)</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(input, output, session) {</span>
<span id="cb3-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># switch to selected tab:</span></span>
<span id="cb3-3">  switch_tabs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(selected) {</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">freezeReactiveValue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> input, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tabs"</span>)</span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateTabsetPanel</span>(</span>
<span id="cb3-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session,</span>
<span id="cb3-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tabs"</span>,</span>
<span id="cb3-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> selected</span>
<span id="cb3-9">    )</span>
<span id="cb3-10">  }</span>
<span id="cb3-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add btn observers:</span></span>
<span id="cb3-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>], \(letter) {</span>
<span id="cb3-13">    btn_id <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"btn_"</span>, letter)</span>
<span id="cb3-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input[[btn_id]], <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">switch_tabs</span>(letter))</span>
<span id="cb3-15">  })</span>
<span id="cb3-16">}</span></code></pre></div>
</div>
<p><img src="https://mwavu.com/blog/posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/exhibit-1.gif" class="img-fluid" alt="preview of the app"></p>
</section>
<section id="problem-isolation" class="level2">
<h2 class="anchored" data-anchor-id="problem-isolation">Problem isolation</h2>
<p><code>server.R</code> looks good.</p>
<p>Let’s focus on <code>ui.R</code>, specifically on the tabs.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">tabs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabsetPanel</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tabs"</span>,</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden"</span>,</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>,</span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab A"</span>)),</span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab B"</span>)),</span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab C"</span>)),</span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab D"</span>)),</span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab E"</span>)),</span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab F"</span>)),</span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab G"</span>)),</span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab H"</span>)),</span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab I"</span>)),</span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"j"</span>, tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab J"</span>))</span>
<span id="cb4-15">)</span></code></pre></div>
<p>One thing is clear: the <code>tabPanelBody()</code>s are wet, not DRY. (Yes, I’m actually smiling right now).</p>
<p>Realistically, the content of each <code>tabPanelBody()</code> is usually a call to a module which I give the same id as the value of the <code>tabPanelBody()</code>.</p>
<p>I have used <code>h1</code> tags here for simplification.</p>
<p>To avoid repetition, let’s use <code>lapply()</code>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">panel_bodies <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>], \(value) {</span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(</span>
<span id="cb5-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> value,</span>
<span id="cb5-4">    tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(</span>
<span id="cb5-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tab"</span>, value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_to_title</span>()</span>
<span id="cb5-6">    )</span>
<span id="cb5-7">  )</span>
<span id="cb5-8">})</span></code></pre></div>
<p>If you have modules you’d have to use <code>Map()</code> so that you iterate over the values/ids and modules.</p>
<p>For example:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">panel_bodies <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Map</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> \(value, mod_ui) {</span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabPanelBody</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> value, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_ui</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> value))</span>
<span id="cb6-4">  },</span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb6-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home"</span>,</span>
<span id="cb6-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"generate_shifts"</span>,</span>
<span id="cb6-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"leave_application"</span>,</span>
<span id="cb6-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"manage_employees"</span>,</span>
<span id="cb6-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"download_shifts"</span></span>
<span id="cb6-11">  ),</span>
<span id="cb6-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb6-13">    mod_home_ui,</span>
<span id="cb6-14">    mod_generate_shifts_ui,</span>
<span id="cb6-15">    mod_leave_application_ui,</span>
<span id="cb6-16">    mod_manage_employees_ui,</span>
<span id="cb6-17">    mod_download_shifts_ui</span>
<span id="cb6-18">  )</span>
<span id="cb6-19">)</span></code></pre></div>
<p>I digress. Back to the <code>lapply()</code>.</p>
<p>We now no longer repeat ourselves. Yeeey!</p>
<p>But our joy is not meant to last long: how do we pass this list of <code>tabPanelBody()</code>s to <code>tabsetPanel()</code>?</p>
<p>This will <strong>not</strong> work:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabsetPanel</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tabs"</span>,</span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden"</span>,</span>
<span id="cb7-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>,</span>
<span id="cb7-5">  panel_bodies</span>
<span id="cb7-6">)</span></code></pre></div>
<pre><code>Error: Navigation containers expect a collection of `bslib::nav_panel()`/`shiny::tabPanel()`s and/or `bslib::nav_menu()`/`shiny::navbarMenu()`s. Consider using `header` or `footer` if you wish to place content above (or below) every panel's contents.</code></pre>
<p><code>tabsetPanel()</code> expects the bare <code>tabPanelBody()</code>s, without wrappers (in this case a list).</p>
</section>
<section id="good-old-do.call" class="level2">
<h2 class="anchored" data-anchor-id="good-old-do.call">Good-old <code>do.call()</code></h2>
<p>My first thought when I encountered this was to use <code>do.call()</code>.</p>
<p>Since we already have some default arguments passed to <code>tabsetPanel()</code>, we have to modify the approach to <code>do.call()</code> a little bit:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a wrapper function with default args to `tabsetPanel()`</span></span>
<span id="cb9-2">tp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(...) {</span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabsetPanel</span>(</span>
<span id="cb9-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tabs"</span>,</span>
<span id="cb9-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden"</span>,</span>
<span id="cb9-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>,</span>
<span id="cb9-7">    ...</span>
<span id="cb9-8">  )</span>
<span id="cb9-9">}</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">what =</span> tp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> panel_bodies)</span></code></pre></div>
</section>
<section id="enter-rlanginject." class="level2">
<h2 class="anchored" data-anchor-id="enter-rlanginject.">Enter <code>rlang::inject()</code>.</h2>
<p>The older I grow, the more I prefer reading the docs, so:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">?rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">!!!</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span></code></pre></div>
<blockquote class="blockquote">
<p>The splice operator <code>⁠!!!</code>⁠ implemented in dynamic dots injects a list of arguments into a function call. It belongs to the family of injection operators and provides the same functionality as <code>do.call()</code>.</p>
<p>The two main cases for splice injection are:</p>
<ul>
<li>Turning a list of inputs into distinct arguments. This is especially useful with functions that take data in <code>...</code>, such as <code>base::rbind()</code>.</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">dfs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(mtcars, mtcars)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inject</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>dfs))</span></code></pre></div>
<p>…</p>
</blockquote>
<p>This is exactly what we need. Let’s now inject the <code>tabPanelBody()</code>s into the <code>tabsetPanel()</code>:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">tabs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inject</span>(</span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabsetPanel</span>(</span>
<span id="cb12-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tabs"</span>,</span>
<span id="cb12-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden"</span>,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>,</span>
<span id="cb12-6">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>panel_bodies</span>
<span id="cb12-7">  )</span>
<span id="cb12-8">)</span></code></pre></div>
<p>Shiny comes with injection support out of the box. Therefore, there’s no need to wrap the code in <code>rlang::inject()</code>:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">tabs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tabsetPanel</span>(</span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tabs"</span>,</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden"</span>,</span>
<span id="cb13-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>,</span>
<span id="cb13-5">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>panel_bodies</span>
<span id="cb13-6">)</span></code></pre></div>
<p>This is way cleaner and also visually appealing.</p>
<p>There are numerous applications of code &amp; data injection. Check out more in the docs.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <category>UI/UX</category>
  <guid>https://mwavu.com/blog/posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/</guid>
  <pubDate>Wed, 03 Jan 2024 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/shiny/injecting-tabpanelbodies-in-tabsetpanels/exhibit-1.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>The input in function(input, output, session)</title>
  <dc:creator>Kennedy Mwavu</dc:creator>
  <link>https://mwavu.com/blog/posts/shiny/the-input-in-server-function/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I recently came across this <a href="https://stackoverflow.com/q/41637957/16246909">stackoverflow post</a> from 6 years ago and I was intrigued.</p>
<p>The OP wanted to render a dynamic number of <code>selectInput</code>s. The number of the <code>selectInput</code>s would be dependent on the value of a <code>numericInput</code>.</p>
<p>If the <code>numericInput</code> had a value of 3 then there would be 3 <code>selectInput</code>s on the UI.</p>
<p>The OP correctly made this observation:</p>
<ul>
<li>Say the default value of the <code>numericInput</code> is 3. If you change it to 2, the UI correctly updates and there are only 2 <code>selectInputs</code>. But when you print the <code>input</code> object, it still contains the id and value of the 3rd <code>selectInput</code> even though it is not currently rendered.</li>
<li>Generally, the <code>input</code> slot does not correspond with the current number of elements, but with the largest number chosen during the session.</li>
</ul>
<p>Here is the reprex the OP provided:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>reprex-from-op.R</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="reprex-from-op.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(plyr)</span>
<span id="cb1-3"></span>
<span id="cb1-4">testUI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb1-5">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uiOutput</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container"</span>))</span>
<span id="cb1-7">}</span>
<span id="cb1-8"></span>
<span id="cb1-9">test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session, numElems) {</span>
<span id="cb1-10">   output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>container <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderUI</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(tagList, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">llply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numElems</span>(), <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i) </span>
<span id="cb1-11">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elem"</span>, i)), </span>
<span id="cb1-12">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> LETTERS[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]))))</span>
<span id="cb1-13">   getNames <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input))</span>
<span id="cb1-14">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getNames =</span> getNames)</span>
<span id="cb1-15">}</span>
<span id="cb1-16"></span>
<span id="cb1-17">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Elems"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), </span>
<span id="cb1-18">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testUI</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column1"</span>), </span>
<span id="cb1-19">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"debug"</span>))</span>
<span id="cb1-20"></span>
<span id="cb1-21">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb1-22">   getN <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n)</span>
<span id="cb1-23">   handler <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">callModule</span>(test, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column1"</span>, getN)</span>
<span id="cb1-24">   output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>debug <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>(handler<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getNames</span>())</span>
<span id="cb1-25">}</span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
<p>My manager at work always says “Trust but verify”. So please run the reprex and ascertain that all the above observations are indeed true.</p>
</section>
<section id="my-0.02" class="level2">
<h2 class="anchored" data-anchor-id="my-0.02">My $0.02</h2>
<div class="tenor-gif-embed" data-postid="20340639" data-share-method="host" data-aspect-ratio="1" data-width="100%">
<a href="https://tenor.com/view/jackie-redmond-jackie-redmond-two-cents-my-two-cents-gif-20340639">Jackie Redmond Jackie GIF</a>from <a href="https://tenor.com/search/jackie+redmond-gifs">Jackie Redmond GIFs</a>
</div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>
<p>The OP had 2 questions:</p>
<ol type="1">
<li>Is this behaviour intentional?</li>
<li>If so, how can I update the <code>input</code> to assure that it only contains valid slots?</li>
</ol>
<section id="tldr" class="level3">
<h3 class="anchored" data-anchor-id="tldr">TL;DR</h3>
<blockquote class="blockquote">
<p>Is this behaviour intentional?</p>
</blockquote>
<p>I don’t know. But it is <code>consistent</code>. The OP used <code>renderUI</code> in the reprex, I will use <code>insertUI</code>/<code>removeUI</code> in my reprex later and you will see that the behaviour is the same.</p>
<blockquote class="blockquote">
<p>How can I update the <code>input</code> to assure that it only contains valid slots?</p>
</blockquote>
<p>You can set the “invalid” slots to <code>NULL</code>, then use <code>req()</code> or <code>isTruthy()</code> to check for validity in your <code>server.R</code>.</p>
</section>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation</h3>
<p>We finally get to the juicy part.</p>
<p>Here’s what I know about <code>input</code>:</p>
<ol type="1">
<li><p><code>input</code> is immutable from the app’s server, unless you use <code>update*Input()</code>. eg. If you try this:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>random_id <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trial"</span></span></code></pre></div>
</div>
<p>you will get an error: “Can’t modify read-only reactive value ‘random_id’”.</p></li>
<li><p>Once added, you can’t remove an element (an input id) from <code>input</code>, but you can change its value (using <code>update*Input()</code> or JavaScript).</p></li>
<li><p>Changing the value of an element to <code>NULL</code> will not remove it from <code>input</code>.</p>
<p>By that I mean <code>input</code> will not behave like a regular list where setting the value of an element to <code>NULL</code> removes it from the list:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>regular-list.R</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="regular-list.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-2">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb3-3">x</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $b</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] 2</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $c</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] 3</span></span></code></pre></div>
</div>
<p>Also, you can’t use <code>update*Input()</code> to set the value of an input id to <code>NULL</code>. From <code>?updateSelectInput</code>:</p>
<blockquote class="blockquote">
<p>Any arguments with <code>NULL</code> values will be ignored; they will not result in any changes to the input object on the client.</p>
</blockquote>
<p>So to set the value of an input element to <code>NULL</code> you have to use JavaScript and provide the option <code>priority: "event"</code>. <a href="https://shiny.posit.co/r/articles/build/communicating-with-js/">Reference</a>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>script.js</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="script.js" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb4-1">Shiny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputValue</span>(input_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> new_input_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">priority</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"event"</span>})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div></li>
<li><p>We can use <code>3</code> above to our advantage: Set the unwanted input id values (the ones whose UI has been removed/deleted) to <code>NULL</code>.</p>
<p>This is what will allow us to use <code>req()</code> or <code>isTruthy()</code> if need be.</p></li>
</ol>
</section>
</section>
<section id="reprex" class="level2">
<h2 class="anchored" data-anchor-id="reprex">Reprex</h2>
<p>In the reprex below, I show how you can set the input id values to <code>NULL</code>.</p>
<p>Also, I use <code>insertUI</code>/<code>removeUI</code> as stated earlier.</p>
<p><img src="https://mwavu.com/blog/posts/shiny/the-input-in-server-function/reprex.gif" class="img-fluid" alt="Reprex showing the above"></p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>global.R</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="global.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Elems"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_test_ui</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column1"</span>), </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"debug"</span>),</span>
<span id="cb6-5">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">script</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">src =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"script.js"</span>)</span>
<span id="cb6-6">)</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode" id="cb7" data-filename="server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb7-2">  handler <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_test_server</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column1"</span>,</span>
<span id="cb7-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numElems =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({ input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n })</span>
<span id="cb7-5">  )</span>
<span id="cb7-6">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>debug <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({ handler<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getNames</span>() })</span>
<span id="cb7-7">}</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_test_ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="R/mod_test_ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">mod_test_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb8-2">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb8-3">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container"</span>))</span>
<span id="cb8-4">}</span></code></pre></div>
</div>
<details open="">
<summary>
<code>R/mod_test_ui.R</code>
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_test_server.R</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="R/mod_test_server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">mod_test_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(id, numElems) {</span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(</span>
<span id="cb9-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id,</span>
<span id="cb9-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">module =</span> \(input, output, session) {</span>
<span id="cb9-5">      ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ns</span>
<span id="cb9-6">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reactive to track added UI ids:</span></span>
<span id="cb9-7">      rv_added_ids <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValues</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ids =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb9-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numElems</span>(), {</span>
<span id="cb9-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do nothing if `numElems()` is less than zero:</span></span>
<span id="cb9-10">        n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numElems</span>()</span>
<span id="cb9-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>()</span>
<span id="cb9-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove previously rendered UIs:</span></span>
<span id="cb9-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">removeUI</span>(</span>
<span id="cb9-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selector =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#%s &gt; *"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container"</span>)),</span>
<span id="cb9-15">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multiple =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb9-16">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">immediate =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb9-17">        )</span>
<span id="cb9-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inform JS to set the removed input id values to NULL:</span></span>
<span id="cb9-19">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(rv_added_ids<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ids, \(id) {</span>
<span id="cb9-20">          session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sendCustomMessage</span>(</span>
<span id="cb9-21">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"set_to_null"</span>,</span>
<span id="cb9-22">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb9-23">          )</span>
<span id="cb9-24">        })</span>
<span id="cb9-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset tracker:</span></span>
<span id="cb9-26">        rv_added_ids<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ids <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb9-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add new UIs:</span></span>
<span id="cb9-28">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n), \(i) {</span>
<span id="cb9-29">          id <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elem"</span>, i))</span>
<span id="cb9-30">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track new id:</span></span>
<span id="cb9-31">          rv_added_ids<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ids <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(rv_added_ids<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ids, id)</span>
<span id="cb9-32">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">insertUI</span>(</span>
<span id="cb9-33">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selector =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container"</span>)),</span>
<span id="cb9-34">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">where =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beforeEnd"</span>,</span>
<span id="cb9-35">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb9-36">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> id, </span>
<span id="cb9-37">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> i,</span>
<span id="cb9-38">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> LETTERS[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span>
<span id="cb9-39">            )</span>
<span id="cb9-40">          )</span>
<span id="cb9-41">        }</span>
<span id="cb9-42">        )</span>
<span id="cb9-43">      })</span>
<span id="cb9-44">      getNames <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValuesToList</span>(input))</span>
<span id="cb9-45">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getNames =</span> getNames)</span>
<span id="cb9-46">    }</span>
<span id="cb9-47">  )</span>
<span id="cb9-48">}</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>www/script.js</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="www/script.js" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ready</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb10-2">  Shiny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addCustomMessageHandler</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"set_to_null"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> (message) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb10-3">    Shiny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setInputValue</span>(message<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> message<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">priority</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"event"</span>})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-4">  })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-5">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
</details>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p><code>$(this)</code> has been the <code>input</code> in <code>function(input, output, session)</code>.</p>
<p>Me: At this point I can confidently say that I like JavaScript.</p>
<p>JS:</p>
<p><img src="https://mwavu.com/blog/posts/shiny/the-input-in-server-function/all-shall-love-me.png" class="img-fluid" alt="Galadriel from LOTR saying 'All shall love me and despair'"></p>


</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <guid>https://mwavu.com/blog/posts/shiny/the-input-in-server-function/</guid>
  <pubDate>Sun, 23 Jul 2023 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/shiny/the-input-in-server-function/reprex.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Bootstrap icons in Shiny</title>
  <dc:creator>Kennedy Mwavu</dc:creator>
  <link>https://mwavu.com/blog/posts/shiny/bootstrap-icons-in-shiny/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Today’s one of those days when I’m like “Maybe I’m here for some easy parts after all”.</p>
<p>I have an excuse though, hoping you’ll buy it. 🤞🏽</p>
<p>When I was a beginner in shiny (Does one actually ever stop being a beginner?), every other website I visited had some cool icons.</p>
<p>I couldn’t for the life of me figure out how to use another icon library apart from shiny’s default ones (Free fontawesome kit and glyphicons).</p>
<p>In short, this post is more of me narrating to my younger self how I finally made it.</p>
<p><img src="https://mwavu.com/blog/posts/shiny/bootstrap-icons-in-shiny/did-you-do-it.png" class="img-fluid" alt="what did it cost meme"></p>
<p>Good thing is that younger me didn’t know a lot and so it won’t take much to impress him, meaning this is going to be short.</p>
</section>
<section id="demo" class="level2">
<h2 class="anchored" data-anchor-id="demo">Demo</h2>
<p><img src="https://mwavu.com/blog/posts/shiny/bootstrap-icons-in-shiny/bi.png" class="img-fluid" alt="bootstrap icons in a shiny app"></p>
<p><a href="https://icons.getbootstrap.com/">Bootstrap Icons</a> is a free and open source library:</p>
<ul>
<li>It has many icons you can choose from (over 1800 at the time of writing this)</li>
<li>You can style each of the icons as you wish</li>
</ul>
</section>
<section id="importing" class="level2">
<h2 class="anchored" data-anchor-id="importing">Importing</h2>
<p>To use the icons, you first need to import them. You can do so:</p>
<ol type="1">
<li>In the header of your UI using <code>tags$link</code>, or,</li>
<li>In your css file using <code>@import</code>.</li>
</ol>
<p>Let’s go with the first option.</p>
<p>Head over to <a href="https://icons.getbootstrap.com/">the website</a>, find the CDN (Content Delivery Network) link and copy it.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Once on the website, press <code>CTRL + F</code> and type in <code>cdn</code>. The page will scroll directly to the cdn link.</p>
<p>If you’re on Mac I think <code>COMMAND + F</code> should work.</p>
</div>
</div>
<p>Now let’s add it to our UI:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bootstrap Icons"</span>,</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb1-4">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(</span>
<span id="cb1-5">    tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">link</span>(</span>
<span id="cb1-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rel =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stylesheet"</span>,</span>
<span id="cb1-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">href =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"</span></span>
<span id="cb1-8">    )</span>
<span id="cb1-9">  )</span>
<span id="cb1-10">)</span></code></pre></div>
</div>
</section>
<section id="usage" class="level2">
<h2 class="anchored" data-anchor-id="usage">Usage</h2>
<p>We will use the <code>&lt;i&gt;</code> html tag to add icons to our app. In shiny, this is equivalent to <code>tags$i()</code>.</p>
<p>On the <a href="https://icons.getbootstrap.com/">Bootstrap icons website</a> click on any icon. You should be able to see the <code>&lt;i&gt;</code> tag for the icon. Copy the class.</p>
<p>Now back in your shiny app, you can use <code>tags$i(class = "what-you-copied")</code> eg.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle"</span>)</span></code></pre></div>
<p>Which should show this:</p>
<p><i class="bi bi-x-circle"></i></p>
</section>
<section id="styling" class="level2">
<h2 class="anchored" data-anchor-id="styling">Styling</h2>
<p>Feel free to style the icons to your app’s theme.</p>
<p>For me, I’m okay using Bootstrap 5 classes on the icons. Here are 2 examples showing how you can customize the icons’ appearance:</p>
<section id="color" class="level3">
<h3 class="anchored" data-anchor-id="color">Color</h3>
<p>To change the color, add the <code>text-*</code> classes.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb3-2">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-success"</span>),</span>
<span id="cb3-3">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-danger"</span>),</span>
<span id="cb3-4">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-warning"</span>),</span>
<span id="cb3-5">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-primary"</span>)</span>
<span id="cb3-6">)</span></code></pre></div>
<p><i class="bi bi-x-circle text-success"></i> <i class="bi bi-x-circle text-danger"></i> <i class="bi bi-x-circle text-warning"></i> <i class="bi bi-x-circle text-primary"></i></p>
</section>
<section id="size" class="level3">
<h3 class="anchored" data-anchor-id="size">Size</h3>
<p>You can use the <code>fs-*</code> classes to change the size of an icon.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb4-2">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-success fs-1"</span>),</span>
<span id="cb4-3">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-danger fs-2"</span>),</span>
<span id="cb4-4">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-warning fs-3"</span>),</span>
<span id="cb4-5">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-primary fs-4"</span>)</span>
<span id="cb4-6">)</span></code></pre></div>
<p><i class="bi bi-x-circle text-success fs-1"></i> <i class="bi bi-x-circle text-danger fs-2"></i> <i class="bi bi-x-circle text-warning fs-3"></i> <i class="bi bi-x-circle text-primary fs-4"></i></p>
</section>
</section>
<section id="tables" class="level2">
<h2 class="anchored" data-anchor-id="tables">Tables</h2>
<p>You can as well use the icons in tables. I will demonstrate this using <code>{DT}</code>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DTOutput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"thetable"</span>)</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># up, down and side arrow icons:</span></span>
<span id="cb6-2">up <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-arrow-up-circle-fill text-success"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>()</span>
<span id="cb6-4">down <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-arrow-down-circle-fill text-danger"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>()</span>
<span id="cb6-6">side <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-arrow-left-right text-primary"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>()</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make an example data.frame:</span></span>
<span id="cb6-10">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(LETTERS, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb6-11">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb6-12">c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, up, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, side, down))</span>
<span id="cb6-13">DT <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(a, b, c)</span>
<span id="cb6-14"></span>
<span id="cb6-15">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(input, output, session) {</span>
<span id="cb6-16">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>thetable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderDT</span>({</span>
<span id="cb6-17">    DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datatable</span>(DT, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">escape =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rownames =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb6-18">  })</span>
<span id="cb6-19">}</span></code></pre></div>
</div>
<p>Two things to note here:</p>
<ol type="1">
<li>We converted the icons to character format since a dataframe cannot contain an object of class <code>shiny.tag</code></li>
<li>We set the option <code>escape = FALSE</code> in <code>DT::datatable()</code> to avoid escaping html entities in the table (our icons). So instead of them being showed as characters, they will be parsed to real html tags.</li>
</ol>
<p>The resulting table should be the same as the one in the demo.</p>
</section>
<section id="app" class="level2">
<h2 class="anchored" data-anchor-id="app">App</h2>
<p>Here’s the complete app:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>global.R</strong></pre>
</div>
<div class="sourceCode" id="cb7" data-filename="global.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span></code></pre></div>
</div>
<details>
<summary>
Show UI code
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">one_to_nine <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-circle"</span>)</span>
<span id="cb8-2"></span>
<span id="cb8-3">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page</span>(</span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bootstrap Icons"</span>,</span>
<span id="cb8-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb8-6">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(</span>
<span id="cb8-7">    tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">link</span>(</span>
<span id="cb8-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rel =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stylesheet"</span>,</span>
<span id="cb8-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">href =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"</span></span>
<span id="cb8-10">    )</span>
<span id="cb8-11">  ),</span>
<span id="cb8-12">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb8-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container"</span>,</span>
<span id="cb8-14">    tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bootstrap Icons"</span>),</span>
<span id="cb8-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(one_to_nine, \(x) tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> x)),</span>
<span id="cb8-16">    tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb8-17">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-success"</span>),</span>
<span id="cb8-18">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-danger"</span>),</span>
<span id="cb8-19">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-warning"</span>),</span>
<span id="cb8-20">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-primary"</span>)</span>
<span id="cb8-21">    ),</span>
<span id="cb8-22">    tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb8-23">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-success fs-1"</span>),</span>
<span id="cb8-24">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-danger fs-2"</span>),</span>
<span id="cb8-25">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-warning fs-3"</span>),</span>
<span id="cb8-26">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-x-circle text-primary fs-4"</span>)</span>
<span id="cb8-27">    ),</span>
<span id="cb8-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidRow</span>(</span>
<span id="cb8-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mt-4"</span>,</span>
<span id="cb8-30">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">column</span>(</span>
<span id="cb8-31">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb8-32">        DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DTOutput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"thetable"</span>)</span>
<span id="cb8-33">      )</span>
<span id="cb8-34">    )</span>
<span id="cb8-35">  )</span>
<span id="cb8-36">)</span></code></pre></div>
</div>
</details>
<details>
<summary>
Show server code
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># up, down and side arrow icons:</span></span>
<span id="cb9-2">up <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-arrow-up-circle-fill text-success"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>()</span>
<span id="cb9-4">down <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-arrow-down-circle-fill text-danger"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>()</span>
<span id="cb9-6">side <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-arrow-left-right text-primary"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>()</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make an example data.frame:</span></span>
<span id="cb9-10">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(LETTERS, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb9-11">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb9-12">c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, up, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, side, down))</span>
<span id="cb9-13">DT <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(a, b, c)</span>
<span id="cb9-14"></span>
<span id="cb9-15">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(input, output, session) {</span>
<span id="cb9-16">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>thetable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderDT</span>({</span>
<span id="cb9-17">    DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datatable</span>(DT, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">escape =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rownames =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb9-18">  })</span>
<span id="cb9-19">}</span></code></pre></div>
</div>
</details>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p><code>$(this)</code> has been Bootstrap icons in Shiny.</p>
<p><img src="https://mwavu.com/blog/posts/shiny/bootstrap-icons-in-shiny/bs-5.jpg" class="img-fluid" alt="Bootstrap to the rescue of a backend engineer"></p>


</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <category>UI/UX</category>
  <guid>https://mwavu.com/blog/posts/shiny/bootstrap-icons-in-shiny/</guid>
  <pubDate>Thu, 20 Jul 2023 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/shiny/bootstrap-icons-in-shiny/did-you-do-it.png" medium="image" type="image/png" height="97" width="144"/>
</item>
<item>
  <title>JQuery Effects in Shiny</title>
  <dc:creator>Kennedy Mwavu</dc:creator>
  <link>https://mwavu.com/blog/posts/shiny/jquery-effects/</link>
  <description><![CDATA[ 





<section id="demo" class="level2">
<h2 class="anchored" data-anchor-id="demo">Demo</h2>
<p>Here is how <code>renderUI()</code> normally functions:</p>
<div class="d-flex justify-content-center">
<p><img src="https://mwavu.com/blog/posts/shiny/jquery-effects/normal-renderUI-demo.gif" class="img-fluid" alt="Normal renderUI demo"></p>
</div>
<p>There’s nothing wrong with it. It works well.</p>
<p>But notice how on the initial render, the user is just slapped with the content. It gets worse if you’re rendering a huge portion.</p>
<p>I’m not here to offer you another version of <code>renderUI</code>. What I can do, however, is show you how you can improvise and make the rendering feel magical to the user.</p>
<p>Let’s take a look at a sample:</p>
<div class="d-flex justify-content-center">
<p><img src="https://mwavu.com/blog/posts/shiny/jquery-effects/animated-renderUI-demo.gif" class="img-fluid" alt="Animated renderUI demo"></p>
</div>
<p>The rendered UI now smoothly slides down and up depending on user action. How cool is that?</p>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’ve been playing around with <a href="https://jquery.com/">JQuery</a> and I must admit, it’s very fascinating. It has allowed me to do some exciting things.</p>
<p>Today we’ll focus on one specific task:</p>
<ul>
<li>Adding a sliding animation (like the one in the demo) to a <code>div</code></li>
</ul>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<em>Why did you choose <code>renderUI</code> specifically?</em>
</div>
</div>
<div class="callout-body-container callout-body">
<p>It’s easy enough to add such effects on non-rendered divs. But with <code>renderUI</code>? I found it quite challenging.</p>
<p>That’s why I must remind you… I’m not here for the easy part.</p>
</div>
</div>
</section>
<section id="module" class="level2">
<h2 class="anchored" data-anchor-id="module">Module</h2>
<p>One thing is for sure: I am going to use modules.</p>
<p>The module’s UI is pretty straightforward:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_animated_ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="R/mod_animated_ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">mod_animated_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(id) {</span>
<span id="cb1-2">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb1-3">  </span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb1-5">    tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Animated renderUI"</span>),</span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">actionButton</span>(</span>
<span id="cb1-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"render_div"</span>),</span>
<span id="cb1-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Render UI"</span>,</span>
<span id="cb1-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"btn-outline-success px-5 mb-3"</span></span>
<span id="cb1-10">    ),</span>
<span id="cb1-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uiOutput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"theui"</span>))</span>
<span id="cb1-12">  )</span>
<span id="cb1-13">}</span></code></pre></div>
</div>
<p>For the server part, let’s build it up step by step. Starting with what we’re all used to, then levelling up to new heights.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_animated_server.R</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="R/mod_animated_server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mod_animated_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(id) {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(</span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id,</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">module =</span> \(input, output, session) {</span>
<span id="cb2-5">      ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ns</span>
<span id="cb2-6">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># values to use for the textInput:</span></span>
<span id="cb2-7">      aliases <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb2-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gandalf the grey"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Strider"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Saruman"</span>,</span>
<span id="cb2-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sauron"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frodo"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Samwise Gamgee"</span></span>
<span id="cb2-10">      )</span>
<span id="cb2-11">      output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>theui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderUI</span>({</span>
<span id="cb2-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb2-13">          tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb2-14">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to_animate"</span>),</span>
<span id="cb2-15">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"display: none;"</span>,</span>
<span id="cb2-16">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb2-17">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selector"</span>),</span>
<span id="cb2-18">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What's your fav letter?"</span>,</span>
<span id="cb2-19">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> LETTERS,</span>
<span id="cb2-20">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> LETTERS, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-21">            ),</span>
<span id="cb2-22">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textInput</span>(</span>
<span id="cb2-23">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>),</span>
<span id="cb2-24">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your pseudo name"</span>,</span>
<span id="cb2-25">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> aliases, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-26">            ),</span>
<span id="cb2-27">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">checkboxInput</span>(</span>
<span id="cb2-28">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lotr_fan"</span>),</span>
<span id="cb2-29">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Are you a LOTR fan?"</span>,</span>
<span id="cb2-30">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-31">            ),</span>
<span id="cb2-32">            tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">p</span>(</span>
<span id="cb2-33">              tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">em</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PS: Don't overdo the animations! Thanks."</span>)</span>
<span id="cb2-34">            )</span>
<span id="cb2-35">          ),</span>
<span id="cb2-36">          tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb2-37">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d-flex"</span>,</span>
<span id="cb2-38">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">actionButton</span>(</span>
<span id="cb2-39">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toggle_div"</span>),</span>
<span id="cb2-40">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hide the rendered UI"</span>,</span>
<span id="cb2-41">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"btn-outline-primary px-5 mr-1 mt-3"</span></span>
<span id="cb2-42">            )</span>
<span id="cb2-43">          )</span>
<span id="cb2-44">        )</span>
<span id="cb2-45">      }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>render_div)</span>
<span id="cb2-46">      </span>
<span id="cb2-47">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>render_div, {</span>
<span id="cb2-48">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateActionButton</span>(</span>
<span id="cb2-49">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session,</span>
<span id="cb2-50">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"render_div"</span>,</span>
<span id="cb2-51">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Re-render UI"</span></span>
<span id="cb2-52">        )</span>
<span id="cb2-53">      }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">once =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-54">    }</span>
<span id="cb2-55">  )</span>
<span id="cb2-56">}</span></code></pre></div>
</div>
<p>A few things to note here:</p>
<ul>
<li>To get this module’s namespace we use <code>ns &lt;- session$ns</code>. This is the equivalent of <code>ns &lt;- NS(id)</code> in the module’s UI.</li>
<li>The <code>div</code> we’re returning inside of the <code>tagList</code> has:
<ul>
<li>An id which we will use later in JQuery to select the <code>div</code>.</li>
<li>A display of none. This means that even after it is rendered, it will take no space and hence won’t be visible. This is similar to what <code>shinyjs::hide()</code> does.</li>
</ul></li>
<li>We only need to render the UI when the user clicks on the button, hence <code>bindEvent(input$render_div)</code>.</li>
<li>Once the button <code>render_div</code> is clicked, we change it’s label to “Re-render UI”, and we only do this once since any further clicks will just be “Re-rendering the UI”. That’s why we have <code>once = TRUE</code> on the <code>observeEvent</code>. The observer is destroyed after the first time the handler expression is ran.</li>
</ul>
<p>Now, are you ready for the juicy (and probably messy) part?</p>
<p>I’m not a fan of inline JS in a shiny app, unless it’s just a short one-liner.</p>
<p>What I’m trying to tell you is that we’re going to use a script. Let’s add it just before closing the <code>tagList</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_animated_server.R</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="R/mod_animated_server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb3-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb3-3">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">script</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">src =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"animate.js"</span>)</span>
<span id="cb3-4">)</span></code></pre></div>
</div>
<p>We want the script to target elements in this module alone, not any other part of <code>ui.R</code>. This presents us with a huge problem:</p>
<ul>
<li>How do we pass our module’s namespace to the script?</li>
</ul>
<p>This is the point where I almost gave up on using modules. I tried numerous tricks, I googled, I even asked my grandma :)</p>
<div class="tenor-gif-embed" data-postid="20907922" data-share-method="host" data-aspect-ratio="1.78771" data-width="100%">
<a href="https://tenor.com/view/monkey-laptop-adult-swim-frustrated-technology-gif-20907922">Monkey Laptop GIF</a>from <a href="https://tenor.com/search/monkey-gifs">Monkey GIFs</a>
</div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>
<p>None of those worked, least of all the last option. So I decided to take a walk.</p>
<p>I was in the middle of nowhere when a thought crept into my mind:</p>
<blockquote class="blockquote">
<p>Can R read an arbitrary file? If so, I can read the JS file and modify it so that the selectors incorporate the namespace id.</p>
</blockquote>
<p>Let me explain.</p>
</section>
<section id="script.js" class="level2">
<h2 class="anchored" data-anchor-id="script.js">script.js</h2>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>www/animate.js</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="www/animate.js" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ready</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> () {</span>
<span id="cb4-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> ns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">undefined</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to_animate"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> toggle_div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toggle_div"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> hide_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hide the rendered UI"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> show_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Show the rendered UI"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">  div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slideToggle</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-9"></span>
<span id="cb4-10">  toggle_div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"click"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> () <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb4-11">    div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slideToggle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slow"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// toggle button text:</span></span>
<span id="cb4-13">    toggle_div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span>(toggle_div<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> hide_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> show_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> hide_text)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-14">  })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<p>Here’s what the script does, line by line:</p>
<ul>
<li>Line <img src="https://latex.codecogs.com/png.latex?1"> says: Wait till this document is ready for manipulation and then call this anonymous function.</li>
<li>Line <img src="https://latex.codecogs.com/png.latex?2"> is the key to solving our problem. We assign <code>undefined</code> to a variable <code>ns</code>. We will replace the <code>undefined</code> with our module’s namespace.</li>
<li>Line <img src="https://latex.codecogs.com/png.latex?3"> selects the <code>div</code> to animate.</li>
<li>Line <img src="https://latex.codecogs.com/png.latex?4"> selects the button which hides and shows the rendered <code>div</code>.</li>
<li>Line <img src="https://latex.codecogs.com/png.latex?5"> &amp; <img src="https://latex.codecogs.com/png.latex?6"> are the button labels when the <code>div</code> is hidden or shown.</li>
<li>Recall that by default the rendered <code>div</code> is hidden. Line <img src="https://latex.codecogs.com/png.latex?8"> makes it visible and slides it down in a span of 600 ms.</li>
<li>On line <img src="https://latex.codecogs.com/png.latex?10">, we are adding an observer to the button. We’re basically saying whenever the button is clicked:
<ul>
<li>If the <code>div</code> is hidden, show it [slowly]. If it’s shown, hide it [slowly] (Line <img src="https://latex.codecogs.com/png.latex?11">).</li>
<li>Relabel the button. If its current label is <code>hide_text</code>, change it to <code>show_text</code>. Otherwise change it to <code>hide_text</code> (Line <img src="https://latex.codecogs.com/png.latex?13">).</li>
</ul></li>
</ul>
<p>Now let’s circle back and add this script to our module’s server:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_animated_server.R</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="R/mod_animated_server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mod_animated_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(id) {</span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(</span>
<span id="cb5-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id,</span>
<span id="cb5-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">module =</span> \(input, output, session) {</span>
<span id="cb5-5">      ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ns</span>
<span id="cb5-6">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read animate.js and add namespace to the line "const ns = undefined":</span></span>
<span id="cb5-7">      anim_js <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">con =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"www"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"animate.js"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(</span>
<span id="cb5-9">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"const ns = undefined"</span>,</span>
<span id="cb5-10">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'const ns = "%s"'</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>))</span>
<span id="cb5-11">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">HTML</span>()</span>
<span id="cb5-14">      </span>
<span id="cb5-15">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb5-16">      </span>
<span id="cb5-17">      output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>theui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderUI</span>({</span>
<span id="cb5-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb5-19">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...,</span></span>
<span id="cb5-20">          tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">script</span>(anim_js)</span>
<span id="cb5-21">        )</span>
<span id="cb5-22">      }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>render_div)</span>
<span id="cb5-23">    }</span>
<span id="cb5-24">  )</span>
<span id="cb5-25">}</span></code></pre></div>
</div>
<p>The most important thing to note here is that passing an empty string to <code>ns</code> returns the namespace of the module.</p>
<p>That’s it! Here’s how the final module server looks like:</p>
<details>
<summary>
Show code
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_animated_server.R</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="R/mod_animated_server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">mod_animated_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(id) {</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(</span>
<span id="cb6-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id,</span>
<span id="cb6-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">module =</span> \(input, output, session) {</span>
<span id="cb6-5">      ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ns</span>
<span id="cb6-6">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read animate.js and add namespace to the line "const ns = undefined":</span></span>
<span id="cb6-7">      anim_js <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">con =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"www"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"animate.js"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(</span>
<span id="cb6-9">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"const ns = undefined"</span>,</span>
<span id="cb6-10">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'const ns = "%s"'</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>))</span>
<span id="cb6-11">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">HTML</span>()</span>
<span id="cb6-14">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># values to use for the textInput:</span></span>
<span id="cb6-15">      aliases <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb6-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gandalf the grey"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Strider"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Saruman"</span>,</span>
<span id="cb6-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sauron"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frodo"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Samwise Gamgee"</span></span>
<span id="cb6-18">      )</span>
<span id="cb6-19">      output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>theui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderUI</span>({</span>
<span id="cb6-20">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb6-21">          tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb6-22">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to_animate"</span>),</span>
<span id="cb6-23">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"display: none;"</span>,</span>
<span id="cb6-24">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb6-25">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selector"</span>),</span>
<span id="cb6-26">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What's your fav letter?"</span>,</span>
<span id="cb6-27">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> LETTERS,</span>
<span id="cb6-28">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> LETTERS, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-29">            ),</span>
<span id="cb6-30">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textInput</span>(</span>
<span id="cb6-31">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>),</span>
<span id="cb6-32">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your pseudo name"</span>,</span>
<span id="cb6-33">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> aliases, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-34">            ),</span>
<span id="cb6-35">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">checkboxInput</span>(</span>
<span id="cb6-36">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lotr_fan"</span>),</span>
<span id="cb6-37">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Are you a LOTR fan?"</span>,</span>
<span id="cb6-38">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-39">            ),</span>
<span id="cb6-40">            tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">p</span>(</span>
<span id="cb6-41">              tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">em</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PS: Don't overdo the animations! Thanks."</span>)</span>
<span id="cb6-42">            )</span>
<span id="cb6-43">          ),</span>
<span id="cb6-44">          tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb6-45">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d-flex"</span>,</span>
<span id="cb6-46">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">actionButton</span>(</span>
<span id="cb6-47">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toggle_div"</span>),</span>
<span id="cb6-48">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hide the rendered UI"</span>,</span>
<span id="cb6-49">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"btn-outline-primary px-5 mr-1 mt-3"</span></span>
<span id="cb6-50">            )</span>
<span id="cb6-51">          ),</span>
<span id="cb6-52">          tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">script</span>(anim_js)</span>
<span id="cb6-53">        )</span>
<span id="cb6-54">      }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>render_div)</span>
<span id="cb6-55">      </span>
<span id="cb6-56">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>render_div, {</span>
<span id="cb6-57">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateActionButton</span>(</span>
<span id="cb6-58">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session,</span>
<span id="cb6-59">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"render_div"</span>,</span>
<span id="cb6-60">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Re-render UI"</span></span>
<span id="cb6-61">        )</span>
<span id="cb6-62">      }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">once =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb6-63">    }</span>
<span id="cb6-64">  )</span>
<span id="cb6-65">}</span></code></pre></div>
</div>
</details>
</section>
<section id="the-app" class="level2">
<h2 class="anchored" data-anchor-id="the-app">The app</h2>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>global.R</strong></pre>
</div>
<div class="sourceCode" id="cb7" data-filename="global.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Animate rendered UIs"</span>,</span>
<span id="cb8-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb8-4">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb8-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container"</span>,</span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_animated_ui</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"animated"</span>)</span>
<span id="cb8-7">  )</span>
<span id="cb8-8">)</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(input, output, session) {</span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_animated_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"animated"</span>)</span>
<span id="cb9-3">}</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>I don’t know about you, but I’m kinda liking JavaScript.</p>
<p>JQuery has <a href="http://api.jquery.com/category/effects/">many such effects</a> which you can use in your apps for better UI/UX.</p>
<p><code>$(this)</code> has been JQuery + Shiny in a nutshell.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <category>JavaScript</category>
  <category>UI/UX</category>
  <guid>https://mwavu.com/blog/posts/shiny/jquery-effects/</guid>
  <pubDate>Wed, 19 Jul 2023 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/shiny/jquery-effects/animated-renderUI-demo.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Add downLoading spinners… using JS</title>
  <dc:creator>Kennedy Mwavu</dc:creator>
  <link>https://mwavu.com/blog/posts/shiny/download-button-spinner-js/</link>
  <description><![CDATA[ 





<section id="demo" class="level2">
<h2 class="anchored" data-anchor-id="demo">Demo</h2>
<p><img src="https://mwavu.com/blog/posts/shiny/download-button-spinner-js/dnld-spinner-js.gif" class="img-fluid" alt="A gif showing what we will build today"></p>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="../../../posts/shiny/download-button-spinner/index.html">an older post</a> I explained how to add loading spinners to download buttons when the download is in progress using shinyjs.</p>
<p>I did so by rendering a fake download button which, when clicked, triggered the real download button. Honestly, it was kind of cumbersome.</p>
<p>Today, as I was walking in the streets of R Shiny articles by Posit, I came across <a href="https://shiny.posit.co/r/articles/build/js-events/">JavaScript events in shiny</a>.</p>
<p>I was intrigued. It opened my eyes to the endless possibilities of using JS with shiny. This blog post is just the tip of that iceberg.</p>
</section>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>Allow me to let you in on a small secret… Come here. Come closer.</p>
<blockquote class="blockquote">
<p>In one way or another JavaScript is inevitable.</p>
</blockquote>
<p>I’ve spent so much time trying to run away from JS, forcing R to do what JS was purposed to do.</p>
<p>In the end I’ve come to one conclusion: Smith was always right.</p>
<p><img src="https://mwavu.com/blog/posts/shiny/download-button-spinner-js/inevitable.jpg" class="img-fluid" alt="the sound of inevitability meme"></p>
<p>As a matter of fact, I’m beginning to enjoy learning and using it.</p>
</section>
<section id="the-module" class="level2">
<h2 class="anchored" data-anchor-id="the-module">The module</h2>
<p>I refuse to NOT use modules. So, here we are.</p>
<p>The module’s UI is the simplest, there’s nothing to explain.</p>
<p>I have a reminder for you though: It’s always a missing call to <code>NS()</code>. Thank me later.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_dnld_ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="R/mod_dnld_ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">mod_dnld_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(id) {</span>
<span id="cb1-2">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb1-3"></span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">downloadButton</span>(</span>
<span id="cb1-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"download"</span>),</span>
<span id="cb1-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bi bi-download"</span>)</span>
<span id="cb1-8">    )</span>
<span id="cb1-9">  )</span>
<span id="cb1-10">}</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_dnld_server.R</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="R/mod_dnld_server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mod_dnld_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(id, data) {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Argument 'data' must be a reactive!"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(data))</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id,</span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">module =</span> \(input, output, session) {</span>
<span id="cb2-6">      ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ns</span>
<span id="cb2-7"></span>
<span id="cb2-8">      output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>download <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">downloadHandler</span>(</span>
<span id="cb2-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> \() {</span>
<span id="cb2-10">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-11">        },</span>
<span id="cb2-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> \(file) {</span>
<span id="cb2-13">          session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sendCustomMessage</span>(</span>
<span id="cb2-14">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"starting_download"</span>,</span>
<span id="cb2-15">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"download"</span>))</span>
<span id="cb2-16">          )</span>
<span id="cb2-17">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(), file)</span>
<span id="cb2-18">          session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sendCustomMessage</span>(</span>
<span id="cb2-19">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end_download"</span>,</span>
<span id="cb2-20">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"download"</span>))</span>
<span id="cb2-21">          )</span>
<span id="cb2-22">        }</span>
<span id="cb2-23">      )</span>
<span id="cb2-24">    }</span>
<span id="cb2-25">  )</span>
<span id="cb2-26">}</span></code></pre></div>
</div>
<p>Every time the download button is clicked, shiny sends a message to JavaScript. It also sends another message when the download is complete.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>sendCustomMessage()</code> sends information from the server to the client.</p>
<p>On the client side, a message handler function must be registered to receive and do something with the message.</p>
</div>
</div>
</section>
<section id="script.js" class="level2">
<h2 class="anchored" data-anchor-id="script.js">script.js</h2>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>www/script.js</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="www/script.js" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb3-1">Shiny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addCustomMessageHandler</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"starting_download"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> (message) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb3-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> inner_html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"&gt;&lt;/span&gt;'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;span class="ps-1"&gt;Downloading...&lt;/span&gt;'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> message[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span>(inner_html)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-5">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">Shiny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addCustomMessageHandler</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end_download"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> (message) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb3-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> inner_html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;i class="bi bi-download pe-1"&gt;&lt;/i&gt;'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Download"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> message[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span>(inner_html)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-10">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<p>Both message handlers change the inner HTML of the download button.</p>
<p>The first one (<code>starting_download</code>), adds a loading spinner to indicate that the download is in progress.</p>
<p>The second handler (<code>end_download</code>), changes the inner HTML to its original value, indicating that the download is done.</p>
<p>The module is complete!</p>
<p><img src="https://mwavu.com/blog/posts/shiny/download-button-spinner-js/same-var-name.png" class="img-fluid"></p>
<section id="nested" class="level3">
<h3 class="anchored" data-anchor-id="nested">Nested</h3>
<p>For the sake of testing whether our module will work when nested in other modules, let’s define this:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_nested_dnld.R</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="R/mod_nested_dnld.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mod_nested_dnld_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(id) {</span>
<span id="cb4-2">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb4-3">  </span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_dnld_ui</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this"</span>))</span>
<span id="cb4-6">  )</span>
<span id="cb4-7">}</span>
<span id="cb4-8"></span>
<span id="cb4-9">mod_nested_dnld_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(id) {</span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(</span>
<span id="cb4-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id,</span>
<span id="cb4-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">module =</span> \(input, output, session) {</span>
<span id="cb4-13">      given_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb4-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>), \(x) {</span>
<span id="cb4-15">          iris</span>
<span id="cb4-16">        }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-17">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">what =</span> rbind)</span>
<span id="cb4-18">      })</span>
<span id="cb4-19">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_dnld_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this"</span>, given_data)</span>
<span id="cb4-20">    }</span>
<span id="cb4-21">  )</span>
<span id="cb4-22">}</span></code></pre></div>
</div>
</section>
</section>
<section id="the-app" class="level2">
<h2 class="anchored" data-anchor-id="the-app">The app</h2>
<p>Let’s now knit it all together by defining the app’s ui and server chunks:</p>
<!-- ### ui.R -->
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DownLoading spinner"</span>,</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lang =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span>,</span>
<span id="cb5-5">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(</span>
<span id="cb5-6">    tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">link</span>(</span>
<span id="cb5-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rel =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stylesheet"</span>,</span>
<span id="cb5-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">href =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"</span></span>
<span id="cb5-9">    )</span>
<span id="cb5-10">  ),</span>
<span id="cb5-11">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body</span>(</span>
<span id="cb5-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d-flex flex-column align-items-center bg-dark"</span>,</span>
<span id="cb5-13">    tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb5-14">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h1</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H3110 W0r1d!"</span>),</span>
<span id="cb5-15">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb5-16">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-5"</span>,</span>
<span id="cb5-17">        tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">p</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"When the file is small:"</span>),</span>
<span id="cb5-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_dnld_ui</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this"</span>)</span>
<span id="cb5-19">      ),</span>
<span id="cb5-20">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb5-21">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-5"</span>,</span>
<span id="cb5-22">        tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">p</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"When the file is large:"</span>),</span>
<span id="cb5-23">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_nested_dnld_ui</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"that"</span>)</span>
<span id="cb5-24">      ),</span>
<span id="cb5-25">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb5-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-5"</span>,</span>
<span id="cb5-27">        tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">p</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Features:"</span>),</span>
<span id="cb5-28">        tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ul</span>(</span>
<span id="cb5-29">          tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">li</span>(</span>
<span id="cb5-30">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Works even when the download module is nested in other modules"</span></span>
<span id="cb5-31">          )</span>
<span id="cb5-32">        )</span>
<span id="cb5-33">      ),</span>
<span id="cb5-34">      tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">script</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">src =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"script.js"</span>)</span>
<span id="cb5-35">    )</span>
<span id="cb5-36">  )</span>
<span id="cb5-37">)</span></code></pre></div>
</div>
<!-- ### server.R -->
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> \(input, output, session) {</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_dnld_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(mtcars))</span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_nested_dnld_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"that"</span>)</span>
<span id="cb6-4">}</span></code></pre></div>
</div>
<!-- ### global.R -->
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>global.R</strong></pre>
</div>
<div class="sourceCode" id="cb7" data-filename="global.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span></code></pre></div>
</div>
</section>
<section id="issawrap" class="level2">
<h2 class="anchored" data-anchor-id="issawrap">Issawrap!</h2>
<p>Really proud of myself today!</p>
<p>I expect to learn more JavaScript, but I can’t promise.</p>
<p>Wait… What!?</p>
<p><img src="https://mwavu.com/blog/posts/shiny/download-button-spinner-js/unga.jpg" class="img-fluid"></p>
<p>Uhhmmm…</p>
<p>Anddd I just tweeted that.</p>
<blockquote class="twitter-tweet blockquote"><p lang="en" dir="ltr">I expect to learn more JavaScript, but I can't promise.</p>— Mwavu (@kennedymwavu) <a href="https://twitter.com/kennedymwavu/status/1662911894699507714?ref_src=twsrc%5Etfw">May 28, 2023</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <category>JavaScript</category>
  <category>UI/UX</category>
  <guid>https://mwavu.com/blog/posts/shiny/download-button-spinner-js/</guid>
  <pubDate>Sat, 27 May 2023 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/shiny/download-button-spinner-js/dnld-spinner-js.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Subset every nth element from a vector</title>
  <dc:creator>Kennedy Mwavu</dc:creator>
  <link>https://mwavu.com/blog/posts/subset-every-nth-element-from-a-vector/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’ve been using R on a daily basis (literally) precisely for 3 years 3 months 2 weeks 2 days now.</p>
<p>If I were to say anything about the language, it’d be what Gandalf said about Hobbits:</p>
<p><img src="https://mwavu.com/blog/posts/subset-every-nth-element-from-a-vector/gandalf.webp" class="img-fluid"></p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>Hobbits are amazing creatures. You can learn all there is to know about their ways in a month, and yet after a hundred years, they can still surprise you.</p>
<p>— Gandalf, LOTR</p>
</div>
</div>
</div>
</section>
<section id="problem-statement" class="level2">
<h2 class="anchored" data-anchor-id="problem-statement">Problem Statement</h2>
<p>About a week ago I needed to subset every second element of a vector. Let me explain.</p>
<p>Take a look at <code>letters</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">letters</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s"
[20] "t" "u" "v" "w" "x" "y" "z"</code></pre>
</div>
</div>
<p>How do you get the elements “b”, “d”, “f”, “h”, “j”, … ie. values at the indices <code>2, 4, 6, 8, ...</code>?</p>
<p>Simple enough, right? Right.</p>
<p>What amazed me wasn’t the simplicity of the question at hand, it was how even as a prolific user of R, the building blocks of the language sometimes slip past me so easily.</p>
</section>
<section id="what-i-did" class="level2">
<h2 class="anchored" data-anchor-id="what-i-did">What I did</h2>
<p>Let’s go through my thought process.</p>
<section id="seq" class="level3">
<h3 class="anchored" data-anchor-id="seq"><code>seq()</code></h3>
<p>This was definitely the first option that came to mind:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(letters), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-2">letters[indices]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "b" "d" "f" "h" "j" "l" "n" "p" "r" "t" "v" "x" "z"</code></pre>
</div>
</div>
<p>Pretty good, but…</p>
<p>There must be a better solution.</p>
</section>
<section id="modulo-operator" class="level3">
<h3 class="anchored" data-anchor-id="modulo-operator">Modulo Operator <code>%%</code></h3>
<p>The modulo operator <code>%%</code> returns the remainder of the division of one number by another.</p>
<p>For example, <code>4 %% 2</code> would return <code>0</code> since: <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B4%7D%7B2%7D%20=%202%5C;remainder%5C;0%0A"> and <code>9 %% 7</code> would return <code>2</code> since: <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B9%7D%7B7%7D%20=%201%5C;remainder%5C;2%0A"></p>
<p>Back to our problem: I basically want all indices which are divisible by <img src="https://latex.codecogs.com/png.latex?2"> <em>ie.</em> Leave a remainder of zero.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(letters) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-2">letters[indices]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "b" "d" "f" "h" "j" "l" "n" "p" "r" "t" "v" "x" "z"</code></pre>
</div>
</div>
<p>That works but… It’s quite obfuscated for such a simple problem.</p>
<p><img src="https://mwavu.com/blog/posts/subset-every-nth-element-from-a-vector/trynna-explain.jpg" class="img-fluid"></p>
<p>There’s only one way to know if there’s an easier solution: Google.</p>
</section>
</section>
<section id="vector-recycling" class="level2">
<h2 class="anchored" data-anchor-id="vector-recycling">Vector recycling</h2>
<p>If logical vectors are used for indexing in R, their values are recycled if the index vector is shorter than the vector containing the values.</p>
<p>It is one of my all time favorite features about R. The first time I learnt the concept, it was mind-blowing.</p>
<p>This time round, it swept me off my feet completely.</p>
<p>The solution was as simple as this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">letters[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "b" "d" "f" "h" "j" "l" "n" "p" "r" "t" "v" "x" "z"</code></pre>
</div>
</div>
<p>Tell me that isn’t elegant!</p>
<p>That’s one of the best answers on StackOverflow as far as I’m concerned.</p>
<ul>
<li><p>Short. In most cases short never equals good performance but this is one of the few cases where what’s advertised is what’s delivered.</p></li>
<li><p>Simple. It’s very easy to understand. Straightforward.</p></li>
<li><p>Clean. It’s not obfuscated.</p></li>
</ul>
<p>It’s better in every way compared to my initial trials. It was posted by the user <code>Sven Hohenstein</code>. <a href="https://stackoverflow.com/a/13462110/16246909">Link to the answer.</a></p>
</section>
<section id="generalization" class="level2">
<h2 class="anchored" data-anchor-id="generalization">Generalization</h2>
<p>Now that we have the best solution (as far as we know), let’s generalize it.</p>
<section id="ith-element" class="level3">
<h3 class="anchored" data-anchor-id="ith-element"><img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> element</h3>
<p>What if you wanted to subset every 9th element? Repeat <code>TRUE</code> &amp; <code>FALSE</code> the required number of times:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subset every 9th element:</span></span>
<span id="cb9-2">letters[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "i" "r"</code></pre>
</div>
</div>
<p>We repeat <code>FALSE</code> <img src="https://latex.codecogs.com/png.latex?8"> times because we want every <img src="https://latex.codecogs.com/png.latex?9">th index to be retrieved.</p>
<p>Taking <img src="https://latex.codecogs.com/png.latex?9"> as our <code>i</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb11-2">letters[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "i" "r"</code></pre>
</div>
</div>
</section>
<section id="i-nth-element" class="level3">
<h3 class="anchored" data-anchor-id="i-nth-element"><img src="https://latex.codecogs.com/png.latex?(i%20+%20n)%5E%7Bth%7D"> element</h3>
<p>Extending the above logic, let’s assume <code>i</code> is <img src="https://latex.codecogs.com/png.latex?9"> and <code>n</code> is <img src="https://latex.codecogs.com/png.latex?10">. So it’s like saying we want to subset every <img src="https://latex.codecogs.com/png.latex?(9%20+%2010)%5E%7Bth%7D%20=%2019%5E%7Bth%7D"> element.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb13-2">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># So we repeat FALSE "i + n - 1" times:</span></span>
<span id="cb13-4">letters[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "s"</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p><img src="https://mwavu.com/blog/posts/subset-every-nth-element-from-a-vector/keep-it-simple-stupid.jpg" class="img-fluid"></p>
<p>Till next time, avoid complicating stuff.</p>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://mwavu.com/blog/posts/subset-every-nth-element-from-a-vector/</guid>
  <pubDate>Sat, 15 Apr 2023 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/subset-every-nth-element-from-a-vector/gandalf.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Defensive Programming</title>
  <dc:creator>Kennedy Mwavu</dc:creator>
  <link>https://mwavu.com/blog/posts/shiny/defensive-programming/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<blockquote class="blockquote text-right">
<p class="mb-4">
I hope nobody is reading. But if you are, then keep this to yourself.
</p>
<footer class="blockquote-footer">
Mwavu
</footer>
</blockquote>
<p>Your prod app should never have to fail, crash or display arcane red lines of errors on the UI.</p>
<p>If it has to, it should do so gracefully and with dignity. Only then will you have an easy time convincing the client that it’s a six-legged feature, not a bug.</p>
<div class="d-flex justify-content-center">
<p><img src="https://mwavu.com/blog/posts/shiny/defensive-programming/bug.png" alt="A red bug with black spots and legs"></p>
</div>
</section>
<section id="when-do-errors-arise" class="level2">
<h2 class="anchored" data-anchor-id="when-do-errors-arise">When do errors arise?</h2>
<p>Most, if not all, application errors occur when you’re trying to perform an operation on data. This can be during app startup or in response to user action.</p>
<p>Common cases are:</p>
<ul>
<li>Mathematical calculations eg. <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code></li>
<li>Data manipulations eg. subsetting (<code>iris[, "Sepal.Length"]</code>)</li>
</ul>
</section>
<section id="defensive-programming" class="level2">
<h2 class="anchored" data-anchor-id="defensive-programming">Defensive programming</h2>
<p>Defensive programming is an approach to software development that focuses on anticipating and preventing potential errors, bugs, and vulnerabilities in the code.</p>
<p>The fundamental concept of this approach is to develop a program that can function correctly even in the presence of unforeseen circumstances or when users enter unexpected inputs.</p>
<p>We’ll focus on 2 key principles of defensive programming, both at the same time:</p>
<ol type="1">
<li><p>Validating inputs: Checking that all input values are within expected ranges or formats, and handling unexpected input values appropriately.</p></li>
<li><p>Handling errors: Catching and handling errors/exceptions in a way that allows the program to recover gracefully, without crashing or losing data</p></li>
</ol>
<p>That’s where <code>tryCatch</code> comes in!</p>
</section>
<section id="trycatch" class="level2">
<h2 class="anchored" data-anchor-id="trycatch">tryCatch()</h2>
<p>The basic syntax of <code>tryCatch()</code> is this:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>trycatch.R</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="trycatch.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb1-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Code block to be executed</span></span>
<span id="cb1-4">  },</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> \(e) {</span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Error handling code</span></span>
<span id="cb1-7">  },</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warning =</span> \(w) {</span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Warning handling code</span></span>
<span id="cb1-10">  },</span>
<span id="cb1-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">finally =</span> {</span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do this, regardless of success or failure of 'expr' block</span></span>
<span id="cb1-13">  }</span>
<span id="cb1-14">)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Mental model:
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Hey R,<br> I have this block of code. I’m not sure if it’s flawless, but I need you to try and run it. <br> In case you encounter issues, here’s how you should proceed depending on the scenario:</p>
<ul>
<li>Did it throw an error? Then do &lt;error handling&gt;</li>
<li>Did it give a warning? Then run this &lt;warning handling chunk&gt;</li>
<li>Finally, regardless of whether it ran successfully or failed, please do &lt;finally block&gt;</li>
</ul>
</div>
</div>
</div>
</section>
<section id="hands-on" class="level2">
<h2 class="anchored" data-anchor-id="hands-on">Hands-On</h2>
<p>Practical examples have been a great way for me to learn new concepts.</p>
<p>Be sure to go through the examples thoroughly and see if you can remake similar ones of your own.</p>
<section id="example-1-generic-errors-warnings" class="level3">
<h3 class="anchored" data-anchor-id="example-1-generic-errors-warnings">Example 1: Generic errors &amp; warnings</h3>
<p>In case of an error or a warning during an operation, inform the user that something unexpected happened and show a glimpse of what might have went wrong.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>app.R</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="app.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb2-2"></span>
<span id="cb2-3">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb2-4">  shinytoastr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">useToastr</span>(),</span>
<span id="cb2-5">  </span>
<span id="cb2-6">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb2-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container"</span>,</span>
<span id="cb2-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb2-9">    </span>
<span id="cb2-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb2-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cols"</span>,</span>
<span id="cb2-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Choose one or more columns"</span>,</span>
<span id="cb2-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(iris), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unknown Column"</span>),</span>
<span id="cb2-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multiple =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-15">    ),</span>
<span id="cb2-16">    </span>
<span id="cb2-17">    DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DTOutput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table"</span>)</span>
<span id="cb2-18">  )</span>
<span id="cb2-19">)</span>
<span id="cb2-20"></span>
<span id="cb2-21">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb2-22">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderDT</span>({</span>
<span id="cb2-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb2-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb2-25">        { iris <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cols)) } <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb2-26">      },</span>
<span id="cb2-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> \(e) {</span>
<span id="cb2-28">        shinytoastr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toastr_error</span>(</span>
<span id="cb2-29">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error in calculation"</span>,</span>
<span id="cb2-30">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">conditionMessage</span>(e)</span>
<span id="cb2-31">        )</span>
<span id="cb2-32">      },</span>
<span id="cb2-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warning =</span> \(w) {</span>
<span id="cb2-34">        shinytoastr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toastr_warning</span>(</span>
<span id="cb2-35">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Warning!"</span>,</span>
<span id="cb2-36">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">conditionMessage</span>(w)</span>
<span id="cb2-37">        )</span>
<span id="cb2-38">      }</span>
<span id="cb2-39">    )</span>
<span id="cb2-40">  })</span>
<span id="cb2-41">}</span>
<span id="cb2-42"></span>
<span id="cb2-43"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
</section>
<section id="example-2-custom-errors-warnings" class="level3">
<h3 class="anchored" data-anchor-id="example-2-custom-errors-warnings">Example 2: Custom errors &amp; warnings</h3>
<p>Sometimes you can choose to be more informative and specific. In this example, we tell the user what exactly went wrong.</p>
<p>On top of that, we leave room for unforeseen causes of errors &amp; warnings.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>app.R</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="app.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb3-2"></span>
<span id="cb3-3">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb3-4">  shinytoastr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">useToastr</span>(),</span>
<span id="cb3-5">  </span>
<span id="cb3-6">  tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb3-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container"</span>,</span>
<span id="cb3-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb3-9">    </span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb3-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cols"</span>,</span>
<span id="cb3-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Choose one or more columns"</span>,</span>
<span id="cb3-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(iris), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unknown Column"</span>),</span>
<span id="cb3-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multiple =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb3-15">    ),</span>
<span id="cb3-16">    </span>
<span id="cb3-17">    DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DTOutput</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table"</span>)</span>
<span id="cb3-18">  )</span>
<span id="cb3-19">)</span>
<span id="cb3-20"></span>
<span id="cb3-21">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb3-22">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderDT</span>({</span>
<span id="cb3-23">    cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cols</span>
<span id="cb3-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(cols)</span>
<span id="cb3-25">    </span>
<span id="cb3-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb3-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> {</span>
<span id="cb3-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> cols) {</span>
<span id="cb3-29">          shinytoastr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toastr_warning</span>(</span>
<span id="cb3-30">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Omitting column 'Species'"</span>,</span>
<span id="cb3-31">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cannot perform multiplication on a factor"</span></span>
<span id="cb3-32">          )</span>
<span id="cb3-33">          </span>
<span id="cb3-34">          cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>)</span>
<span id="cb3-35">        }</span>
<span id="cb3-36">        </span>
<span id="cb3-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unknown Column"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> cols) {</span>
<span id="cb3-38">          shinytoastr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toastr_error</span>(</span>
<span id="cb3-39">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Omitting 'Uknown Column'"</span>,</span>
<span id="cb3-40">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cannot subset columns which don't exist"</span></span>
<span id="cb3-41">          )</span>
<span id="cb3-42">          </span>
<span id="cb3-43">          cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unknown Column"</span>)</span>
<span id="cb3-44">        }</span>
<span id="cb3-45">        </span>
<span id="cb3-46">        { iris <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>(cols)) } <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb3-47">      },</span>
<span id="cb3-48">      </span>
<span id="cb3-49">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in case of other unforeseen errors &amp; warnings:</span></span>
<span id="cb3-50">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> \(e) {</span>
<span id="cb3-51">        shinytoastr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toastr_error</span>(</span>
<span id="cb3-52">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error in calculation"</span>,</span>
<span id="cb3-53">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">conditionMessage</span>(e)</span>
<span id="cb3-54">        )</span>
<span id="cb3-55">      },</span>
<span id="cb3-56">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warning =</span> \(w) {</span>
<span id="cb3-57">        shinytoastr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toastr_warning</span>(</span>
<span id="cb3-58">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Warning!"</span>,</span>
<span id="cb3-59">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">conditionMessage</span>(w)</span>
<span id="cb3-60">        )</span>
<span id="cb3-61">      }</span>
<span id="cb3-62">    )</span>
<span id="cb3-63">  })</span>
<span id="cb3-64">}</span>
<span id="cb3-65"></span>
<span id="cb3-66"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>


</section>
</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <category>UI/UX</category>
  <guid>https://mwavu.com/blog/posts/shiny/defensive-programming/</guid>
  <pubDate>Sat, 25 Feb 2023 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/shiny/defensive-programming/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Add downLoading spinners</title>
  <dc:creator>Kennedy Mwavu</dc:creator>
  <link>https://mwavu.com/blog/posts/shiny/download-button-spinner/</link>
  <description><![CDATA[ 





<section id="demo" class="level2">
<h2 class="anchored" data-anchor-id="demo">Demo</h2>
<p><img src="https://mwavu.com/blog/posts/shiny/download-button-spinner/dnld-spinner.gif" class="img-fluid" alt="A gif showing what we will build today"></p>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<blockquote class="blockquote text-right">
<p class="mb-4">
I hope nobody is reading. But if you are, then keep this to yourself.
</p>
<footer class="blockquote-footer">
Mwavu
</footer>
</blockquote>
<p>Oftentimes you have a large dataset that takes a while to download. To give your users a visual cue that the download is in progress, you can (and should) add spinners to your download buttons.</p>
</section>
<section id="the-module" class="level2">
<h2 class="anchored" data-anchor-id="the-module">The module</h2>
<p>Let’s first create a basic download button module that we can build upon.</p>
<p>We’ll create an action button that will trigger the download (Yes, you read that right, an action button).</p>
<p>We’ll then add the real download button but it will be hidden.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_dnld_ui.R</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="R/mod_dnld_ui.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Download button module UI</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param id Module ID</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return [shiny::tagList()]</span></span>
<span id="cb1-4">mod_dnld_ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(id) {</span>
<span id="cb1-5">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb1-6"></span>
<span id="cb1-7">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb1-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Trigger button:</span></span>
<span id="cb1-9">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">actionButton</span>(</span>
<span id="cb1-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actbtn"</span>),</span>
<span id="cb1-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">doRenderTags</span>(</span>
<span id="cb1-12">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(</span>
<span id="cb1-13">          shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icon</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"download"</span>),</span>
<span id="cb1-14">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Download"</span></span>
<span id="cb1-15">        )</span>
<span id="cb1-16">      )</span>
<span id="cb1-17">    ),</span>
<span id="cb1-18"></span>
<span id="cb1-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Real download button:</span></span>
<span id="cb1-20">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">downloadButton</span>(</span>
<span id="cb1-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dnld"</span>),</span>
<span id="cb1-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visibility: hidden;"</span></span>
<span id="cb1-24">    )</span>
<span id="cb1-25">  )</span>
<span id="cb1-26">}</span></code></pre></div>
</div>
<p>The basic server piece is also as simple:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_dnld_server.R</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="R/mod_dnld_server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Download button module server</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param id Module ID</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param given_data Data to download, as a reactive.</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param filename Filename to use for download.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return NULL</span></span>
<span id="cb2-6">mod_dnld_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(</span>
<span id="cb2-7">  id,</span>
<span id="cb2-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">given_data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({iris}),</span>
<span id="cb2-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris.csv"</span></span>
<span id="cb2-10">) {</span>
<span id="cb2-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(</span>
<span id="cb2-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`given_data` must be a reactive"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(given_data)</span>
<span id="cb2-13">  )</span>
<span id="cb2-14"></span>
<span id="cb2-15">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(</span>
<span id="cb2-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id,</span>
<span id="cb2-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">module =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb2-18">      output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dnld <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">downloadHandler</span>(</span>
<span id="cb2-19">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> filename,</span>
<span id="cb2-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(file) {</span>
<span id="cb2-21">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">given_data</span>(), file)</span>
<span id="cb2-22">        }</span>
<span id="cb2-23">      )</span>
<span id="cb2-24">    }</span>
<span id="cb2-25">  )</span>
<span id="cb2-26">}</span></code></pre></div>
</div>
<p>It takes in a reactive data object (<code>given_data</code>) and a <code>filename</code>. The rest is normal stuff.</p>
<p>We can now move on to adding the download button spinner.</p>
</section>
<section id="adding-a-spinner-to-the-download-button" class="level2">
<h2 class="anchored" data-anchor-id="adding-a-spinner-to-the-download-button">Adding a spinner to the download button</h2>
<p>Spoiler alert: <code>mod_dnld_ui</code> is done. We’ll work on <code>mod_dnld_server</code> from now on.</p>
<p>In the server module, we’ll use <code>shiny::observeEvent</code> to listen for clicks on the action button.</p>
<p>When the button is clicked, we update its label to show a spinner and a message indicating that the download is in progress.</p>
<p>We then trigger a click on the real download button using <code>shinyjs::click</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_dnld_server.R</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="R/mod_dnld_server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>actbtn, {</span>
<span id="cb3-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update label of 'actbtn':</span></span>
<span id="cb3-3">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateActionButton</span>(</span>
<span id="cb3-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session,</span>
<span id="cb3-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actbtn"</span>,</span>
<span id="cb3-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">doRenderTags</span>(</span>
<span id="cb3-7">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(</span>
<span id="cb3-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d-flex align-items-center"</span>,</span>
<span id="cb3-9">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(</span>
<span id="cb3-10">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spinner-border spinner-border-sm"</span>,</span>
<span id="cb3-11">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>,</span>
<span id="cb3-12">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aria-hidden</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"true"</span></span>
<span id="cb3-13">        ),</span>
<span id="cb3-14">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(</span>
<span id="cb3-15">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mx-1"</span>,</span>
<span id="cb3-16">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading..."</span></span>
<span id="cb3-17">        )</span>
<span id="cb3-18">      )</span>
<span id="cb3-19">    )</span>
<span id="cb3-20">  )</span>
<span id="cb3-21"></span>
<span id="cb3-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># simulate click on 'dnld' btn:</span></span>
<span id="cb3-23">  shinyjs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delay</span>(</span>
<span id="cb3-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ms =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>,</span>
<span id="cb3-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> shinyjs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">click</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dnld"</span>)</span>
<span id="cb3-26">  )</span>
<span id="cb3-27">})</span></code></pre></div>
</div>
<p>Two things to note here:</p>
<ol type="1">
<li><p>I use <a href="https://getbootstrap.com/docs/5.0/getting-started/introduction/">Bootstrap 5</a> classes.</p></li>
<li><p>I use <code>shinyjs::delay</code> to, well, delay the click for 2 seconds. Wanna know why?</p></li>
</ol>
<div class="d-flex justify-content-center">
<p><img src="https://mwavu.com/blog/posts/shiny/download-button-spinner/purpose-of-delay.png" alt="The whisper and goosebumps meme: The delay makes the overall UX better"></p>
</div>
<p>Next, after the download is complete, we need to update the label of the action button back to its original value.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_dnld_server.R</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="R/mod_dnld_server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dnld <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">downloadHandler</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> filename,</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(file) {</span>
<span id="cb4-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on exit, update 'actbtn' label:</span></span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>({</span>
<span id="cb4-6">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateActionButton</span>(</span>
<span id="cb4-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session,</span>
<span id="cb4-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actbtn"</span>,</span>
<span id="cb4-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">doRenderTags</span>(</span>
<span id="cb4-10">          shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(</span>
<span id="cb4-11">            shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icon</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"download"</span>),</span>
<span id="cb4-12">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Download"</span></span>
<span id="cb4-13">          )</span>
<span id="cb4-14">        )</span>
<span id="cb4-15">      )</span>
<span id="cb4-16">    })</span>
<span id="cb4-17"></span>
<span id="cb4-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write data to file:</span></span>
<span id="cb4-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">given_data</span>(), file)</span>
<span id="cb4-20">  }</span>
<span id="cb4-21">)</span></code></pre></div>
</div>
<p><code>?on.exit</code>:</p>
<blockquote class="blockquote">
<p>on.exit records the expression given as its argument as needing to be executed when the current function exits (either naturally or as the result of an error). This is useful for resetting graphical parameters or performing other cleanup actions.</p>
</blockquote>
<p>In our case, we’re performing a cleanup action: updating the label of the action button back to its original state.</p>
<p>The complete module server function is as follows:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>R/mod_dnld_server.R</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="R/mod_dnld_server.R" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Download button module server</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param id Module id</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param given_data Data to download, as a reactive.</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param filename Filename to use for download.</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return NULL</span></span>
<span id="cb5-6">mod_dnld_server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(</span>
<span id="cb5-7">    id,</span>
<span id="cb5-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">given_data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb5-9">      iris</span>
<span id="cb5-10">    }),</span>
<span id="cb5-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris.csv"</span>) {</span>
<span id="cb5-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(</span>
<span id="cb5-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`given_data` must be a reactive"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.reactive</span>(given_data)</span>
<span id="cb5-14">  )</span>
<span id="cb5-15"></span>
<span id="cb5-16">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(</span>
<span id="cb5-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id,</span>
<span id="cb5-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">module =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb5-19">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>actbtn, {</span>
<span id="cb5-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update label of 'actbtn':</span></span>
<span id="cb5-21">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateActionButton</span>(</span>
<span id="cb5-22">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session,</span>
<span id="cb5-23">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actbtn"</span>,</span>
<span id="cb5-24">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">doRenderTags</span>(</span>
<span id="cb5-25">            shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(</span>
<span id="cb5-26">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d-flex align-items-center"</span>,</span>
<span id="cb5-27">              shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(</span>
<span id="cb5-28">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spinner-border spinner-border-sm"</span>,</span>
<span id="cb5-29">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>,</span>
<span id="cb5-30">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aria-hidden</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"true"</span></span>
<span id="cb5-31">              ),</span>
<span id="cb5-32">              shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(</span>
<span id="cb5-33">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mx-1"</span>,</span>
<span id="cb5-34">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading..."</span></span>
<span id="cb5-35">              )</span>
<span id="cb5-36">            )</span>
<span id="cb5-37">          )</span>
<span id="cb5-38">        )</span>
<span id="cb5-39"></span>
<span id="cb5-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># simulate click on 'dnld' btn:</span></span>
<span id="cb5-41">        shinyjs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delay</span>(</span>
<span id="cb5-42">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ms =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>,</span>
<span id="cb5-43">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> shinyjs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">click</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dnld"</span>)</span>
<span id="cb5-44">        )</span>
<span id="cb5-45">      })</span>
<span id="cb5-46"></span>
<span id="cb5-47">      output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dnld <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">downloadHandler</span>(</span>
<span id="cb5-48">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> filename,</span>
<span id="cb5-49">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(file) {</span>
<span id="cb5-50">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on exit, update 'actbtn' label:</span></span>
<span id="cb5-51">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>({</span>
<span id="cb5-52">            shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateActionButton</span>(</span>
<span id="cb5-53">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session,</span>
<span id="cb5-54">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actbtn"</span>,</span>
<span id="cb5-55">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">doRenderTags</span>(</span>
<span id="cb5-56">                shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(</span>
<span id="cb5-57">                  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icon</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"download"</span>),</span>
<span id="cb5-58">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Download"</span></span>
<span id="cb5-59">                )</span>
<span id="cb5-60">              )</span>
<span id="cb5-61">            )</span>
<span id="cb5-62">          })</span>
<span id="cb5-63"></span>
<span id="cb5-64">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write data to file:</span></span>
<span id="cb5-65">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">given_data</span>(), file)</span>
<span id="cb5-66">        }</span>
<span id="cb5-67">      )</span>
<span id="cb5-68">    }</span>
<span id="cb5-69">  )</span>
<span id="cb5-70">}</span></code></pre></div>
</div>
</section>
<section id="putting-it-all-together" class="level2">
<h2 class="anchored" data-anchor-id="putting-it-all-together">Putting it all together</h2>
<p>Now that we have the module UI and server parts, we can put them together in a shiny app.</p>
<p>The app is as simple as it can get:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb6-3">  shinyjs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">useShinyjs</span>(),</span>
<span id="cb6-4"></span>
<span id="cb6-5">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bg-light"</span>,</span>
<span id="cb6-7"></span>
<span id="cb6-8">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb6-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(</span>
<span id="cb6-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container min-vh-100"</span>,</span>
<span id="cb6-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d-flex justify-content-center align-items-center bg-white"</span></span>
<span id="cb6-12">      ),</span>
<span id="cb6-13"></span>
<span id="cb6-14">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># module UI:</span></span>
<span id="cb6-15">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb6-16">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_dnld_ui</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this"</span>)</span>
<span id="cb6-17">      )</span>
<span id="cb6-18">    )</span>
<span id="cb6-19">  )</span>
<span id="cb6-20">)</span>
<span id="cb6-21"></span>
<span id="cb6-22">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb6-23">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># module server:</span></span>
<span id="cb6-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_dnld_server</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this"</span>)</span>
<span id="cb6-25">}</span>
<span id="cb6-26"></span>
<span id="cb6-27">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
<p>The full code is available on <a href="https://gist.github.com/kennedymwavu/bbcbe3a2373f103c98f52a9d8d79dabc">this GitHub Gist</a>.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <category>UI/UX</category>
  <guid>https://mwavu.com/blog/posts/shiny/download-button-spinner/</guid>
  <pubDate>Mon, 20 Feb 2023 21:00:00 GMT</pubDate>
  <media:content url="https://mwavu.com/blog/posts/shiny/download-button-spinner/dnld-spinner.gif" medium="image" type="image/gif"/>
</item>
</channel>
</rss>
