{
  "hash": "1553761ec14c071d53b52b98fb73ed92",
  "result": {
    "markdown": "---\ntitle: \"Defensive Programming\"\ndescription: \"Say hello to your new friend: tryCatch()\"\nauthor: \"Kennedy Mwavu\"\ndate: \"2023-02-26\"\ncategories: [R, Shiny, UI/UX]\nimage: \"tc.png\"\ndraft: false\n---\n\n\n## Introduction\n\n<blockquote class=\"blockquote text-right text-black\">\n<p class=\"mb-4\">I hope nobody is reading. But if you are, then keep this to yourself.</p>\n<footer class=\"blockquote-footer\">Mwavu</footer>\n</blockquote>\n\nYour prod app should never have to fail, crash or display arcane red lines \nof errors on the UI. \n\nIf it has to, it should do so gracefully and with dignity.\nOnly then will you have an easy time convincing the client that it's a \nsix-legged feature, not a bug.\n\n<div class=\"d-flex justify-content-center\">\n  <img src=\"bug.png\" alt=\"A red bug with black spots and legs\">\n</div>\n\n## When do errors arise?\n\nMost, if not all, application errors occur when you're trying to perform an\noperation on data. This can be during app startup or \nin response to user action.\n\nCommon cases are:\n\n- Mathematical calculations eg. `+`, `-`, `*`, `/`\n- Data manipulations eg. subsetting (`iris[, \"Sepal.Length\"]`)\n\n## Defensive programming\n\nDefensive programming is an approach to software development that \nfocuses on anticipating and preventing potential errors, bugs, and \nvulnerabilities in the code.\n\nThe fundamental concept of this approach is to develop a program that can function correctly even in the presence of unforeseen circumstances or when users enter unexpected inputs.\n\nWe'll focus on 2 key principles of defensive programming, both at the same time:\n\n1. Validating inputs: Checking that all input values are within \nexpected ranges or formats, and handling unexpected input values \nappropriately.\n\n2. Handling errors: Catching and handling errors/exceptions in a way\nthat allows the program to recover gracefully, without crashing or \nlosing data\n\nThat's where `tryCatch` comes in!\n\n## tryCatch()\n\nThe basic syntax of `tryCatch()` is this:\n\n![](trycatch.svg)\n\n::: {.callout-tip}\n## Mental model:\n\nHey R,<br>\nI have this block of code. I'm not sure if it's flawless, but I need you to try\nand run it. <br>\nIn case you encounter issues, here's how you should proceed depending on the\nscenario:\n\n- Did it throw an error? Then do &lt;error handling&gt;\n- Did it give a warning? Then run this &lt;warning handling chunk&gt;\n- Finally, regardless of whether it ran successfully or failed, please\ndo &lt;finally block&gt;\n:::\n\n## Hands-On\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(DT)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'DT'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:shiny':\n\n    dataTableOutput, renderDataTable\n```\n:::\n\n```{.r .cell-code}\nui <- fluidPage(\n  tags$div(\n    class = \"container\",\n    align = \"center\",\n    selectInput(\n      inputId = \"cols\",\n      label = \"Choose one or more columns\",\n      choices = c(names(iris), \"Unknown Column\"),\n      multiple = TRUE\n    ),\n    DTOutput(outputId = \"table\")\n  )\n)\n\nserver <- function(input, output, session) {\n  output$table <- renderDT({\n    # iris[, input$cols]\n    tryCatch(\n      expr = {\n        iris |> dplyr::select(input$cols)\n      },\n      error = \\(e) {\n        print(\"There's an error!\")\n      }\n    )\n  })\n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}